
out.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <_start>:
_start:
    .cfi_startproc
    .cfi_undefined ra
    .option push
    .option norelax
    la gp, __global_pointer$
   0:	00003197          	auipc	x3,0x3
   4:	d1418193          	addi	x3,x3,-748 # 2d14 <__global_pointer$>
    .option pop
    la sp, __stack_top
   8:	00400117          	auipc	x2,0x400
   c:	ff810113          	addi	x2,x2,-8 # 400000 <__stack_top>
    add s0, sp, zero
  10:	00010433          	add	x8,x2,x0
    jal zero, main
  14:	4b90106f          	jal	x0,1ccc <main>

Disassembly of section .text:

00000018 <parseEXT>:
    
    The function returns :
        0 if given pattern not a valid EXT type regex or if the pattern results in a NFA with greater than W length, 1 otherwise
*/

int parseEXT (char *PATTERN, unsigned int *INIT, unsigned int *ACCEPT, unsigned int *EpsBEG, unsigned int *EpsEND, unsigned int *EpsBLK, unsigned int MOVE[], unsigned int SELFLOOP[]) {
      18:	b6010113          	addi	x2,x2,-1184
      1c:	48812e23          	sw	x8,1180(x2)
      20:	4a010413          	addi	x8,x2,1184
      24:	b6a42e23          	sw	x10,-1156(x8)
      28:	b6b42c23          	sw	x11,-1160(x8)
      2c:	b6c42a23          	sw	x12,-1164(x8)
      30:	b6d42823          	sw	x13,-1168(x8)
      34:	b6e42623          	sw	x14,-1172(x8)
      38:	b6f42423          	sw	x15,-1176(x8)
      3c:	b7042223          	sw	x16,-1180(x8)
      40:	b7142023          	sw	x17,-1184(x8)
    
    *INIT = 1;
      44:	b7842783          	lw	x15,-1160(x8)
      48:	00100713          	addi	x14,x0,1
      4c:	00e7a023          	sw	x14,0(x15)
    *ACCEPT = (1<<(W-1));
      50:	b7442783          	lw	x15,-1164(x8)
      54:	80000737          	lui	x14,0x80000
      58:	00e7a023          	sw	x14,0(x15)
    *EpsBEG = *EpsEND = *EpsBLK = 0;
      5c:	b6842783          	lw	x15,-1176(x8)
      60:	0007a023          	sw	x0,0(x15)
      64:	b6842783          	lw	x15,-1176(x8)
      68:	0007a703          	lw	x14,0(x15)
      6c:	b6c42783          	lw	x15,-1172(x8)
      70:	00e7a023          	sw	x14,0(x15)
      74:	b6c42783          	lw	x15,-1172(x8)
      78:	0007a703          	lw	x14,0(x15)
      7c:	b7042783          	lw	x15,-1168(x8)
      80:	00e7a023          	sw	x14,0(x15)
    for(int i = 0;i < 256;i++) {
      84:	fe042623          	sw	x0,-20(x8)
      88:	0380006f          	jal	x0,c0 <parseEXT+0xa8>
        MOVE[i] = 0;
      8c:	fec42783          	lw	x15,-20(x8)
      90:	00279793          	slli	x15,x15,0x2
      94:	b6442703          	lw	x14,-1180(x8)
      98:	00f707b3          	add	x15,x14,x15
      9c:	0007a023          	sw	x0,0(x15)
        SELFLOOP[i] = 0;
      a0:	fec42783          	lw	x15,-20(x8)
      a4:	00279793          	slli	x15,x15,0x2
      a8:	b6042703          	lw	x14,-1184(x8)
      ac:	00f707b3          	add	x15,x14,x15
      b0:	0007a023          	sw	x0,0(x15)
    for(int i = 0;i < 256;i++) {
      b4:	fec42783          	lw	x15,-20(x8)
      b8:	00178793          	addi	x15,x15,1
      bc:	fef42623          	sw	x15,-20(x8)
      c0:	fec42703          	lw	x14,-20(x8)
      c4:	0ff00793          	addi	x15,x0,255
      c8:	fce7d2e3          	bge	x15,x14,8c <parseEXT+0x74>

    // escape : 1 if a backslash (\) is encountered which denotes a escape sequence
    // range : 1 if a hiphen (-) is encountered which denotes a range
    // char_class : 1 if we are decoding the character class from the regex provided
    // negate : 1 if ^ is encountered in character class when characters other than those given must be included
    int escape = 0,range = 0,char_class = 1,negate = 0;
      cc:	fe042423          	sw	x0,-24(x8)
      d0:	fe042223          	sw	x0,-28(x8)
      d4:	00100793          	addi	x15,x0,1
      d8:	fef42023          	sw	x15,-32(x8)
      dc:	fc042e23          	sw	x0,-36(x8)

    // state_no : deontes the number of states in the NFA minus 1
    int state_no = -1;
      e0:	fff00793          	addi	x15,x0,-1
      e4:	fcf42c23          	sw	x15,-40(x8)

    // char_set : sets the characters provided in the character class HIGH
    int char_set[256];

    for(int i = 0; !char_class || PATTERN[i] != '\0'; i++) {
      e8:	fc042a23          	sw	x0,-44(x8)
      ec:	2dd0006f          	jal	x0,bc8 <parseEXT+0xbb0>
        if(!char_class) {
      f0:	fe042783          	lw	x15,-32(x8)
      f4:	64079c63          	bne	x15,x0,74c <parseEXT+0x734>
            
            state_no++;
      f8:	fd842783          	lw	x15,-40(x8)
      fc:	00178793          	addi	x15,x15,1
     100:	fcf42c23          	sw	x15,-40(x8)
            int tmpMask = (1<<state_no);
     104:	fd842783          	lw	x15,-40(x8)
     108:	00100713          	addi	x14,x0,1
     10c:	00f717b3          	sll	x15,x14,x15
     110:	fcf42823          	sw	x15,-48(x8)

            if(PATTERN[i] == '+') {
     114:	fd442783          	lw	x15,-44(x8)
     118:	b7c42703          	lw	x14,-1156(x8)
     11c:	00f707b3          	add	x15,x14,x15
     120:	0007c703          	lbu	x14,0(x15)
     124:	02b00793          	addi	x15,x0,43
     128:	0ef71063          	bne	x14,x15,208 <parseEXT+0x1f0>
                for(int c = 0;c < 256;c++) {
     12c:	fc042623          	sw	x0,-52(x8)
     130:	05c0006f          	jal	x0,18c <parseEXT+0x174>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     134:	fcc42783          	lw	x15,-52(x8)
     138:	00279793          	slli	x15,x15,0x2
     13c:	ff040713          	addi	x14,x8,-16
     140:	00f707b3          	add	x15,x14,x15
     144:	b947a783          	lw	x15,-1132(x15)
     148:	fdc42703          	lw	x14,-36(x8)
     14c:	02f70a63          	beq	x14,x15,180 <parseEXT+0x168>
     150:	fcc42783          	lw	x15,-52(x8)
     154:	00279793          	slli	x15,x15,0x2
     158:	b6442703          	lw	x14,-1180(x8)
     15c:	00f707b3          	add	x15,x14,x15
     160:	0007a683          	lw	x13,0(x15)
     164:	fd042703          	lw	x14,-48(x8)
     168:	fcc42783          	lw	x15,-52(x8)
     16c:	00279793          	slli	x15,x15,0x2
     170:	b6442603          	lw	x12,-1180(x8)
     174:	00f607b3          	add	x15,x12,x15
     178:	00e6e733          	or	x14,x13,x14
     17c:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     180:	fcc42783          	lw	x15,-52(x8)
     184:	00178793          	addi	x15,x15,1
     188:	fcf42623          	sw	x15,-52(x8)
     18c:	fcc42703          	lw	x14,-52(x8)
     190:	0ff00793          	addi	x15,x0,255
     194:	fae7d0e3          	bge	x15,x14,134 <parseEXT+0x11c>
                }
                for(int c = 0;c < 256;c++) {
     198:	fc042423          	sw	x0,-56(x8)
     19c:	05c0006f          	jal	x0,1f8 <parseEXT+0x1e0>
                    if(negate ^ char_set[c]) SELFLOOP[c] |= tmpMask;
     1a0:	fc842783          	lw	x15,-56(x8)
     1a4:	00279793          	slli	x15,x15,0x2
     1a8:	ff040713          	addi	x14,x8,-16
     1ac:	00f707b3          	add	x15,x14,x15
     1b0:	b947a783          	lw	x15,-1132(x15)
     1b4:	fdc42703          	lw	x14,-36(x8)
     1b8:	02f70a63          	beq	x14,x15,1ec <parseEXT+0x1d4>
     1bc:	fc842783          	lw	x15,-56(x8)
     1c0:	00279793          	slli	x15,x15,0x2
     1c4:	b6042703          	lw	x14,-1184(x8)
     1c8:	00f707b3          	add	x15,x14,x15
     1cc:	0007a683          	lw	x13,0(x15)
     1d0:	fd042703          	lw	x14,-48(x8)
     1d4:	fc842783          	lw	x15,-56(x8)
     1d8:	00279793          	slli	x15,x15,0x2
     1dc:	b6042603          	lw	x12,-1184(x8)
     1e0:	00f607b3          	add	x15,x12,x15
     1e4:	00e6e733          	or	x14,x13,x14
     1e8:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     1ec:	fc842783          	lw	x15,-56(x8)
     1f0:	00178793          	addi	x15,x15,1
     1f4:	fcf42423          	sw	x15,-56(x8)
     1f8:	fc842703          	lw	x14,-56(x8)
     1fc:	0ff00793          	addi	x15,x0,255
     200:	fae7d0e3          	bge	x15,x14,1a0 <parseEXT+0x188>
     204:	5280006f          	jal	x0,72c <parseEXT+0x714>
                }
            }
            else if(PATTERN[i] == '?') {
     208:	fd442783          	lw	x15,-44(x8)
     20c:	b7c42703          	lw	x14,-1156(x8)
     210:	00f707b3          	add	x15,x14,x15
     214:	0007c703          	lbu	x14,0(x15)
     218:	03f00793          	addi	x15,x0,63
     21c:	08f71663          	bne	x14,x15,2a8 <parseEXT+0x290>
                for(int c = 0;c < 256;c++) {
     220:	fc042223          	sw	x0,-60(x8)
     224:	05c0006f          	jal	x0,280 <parseEXT+0x268>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     228:	fc442783          	lw	x15,-60(x8)
     22c:	00279793          	slli	x15,x15,0x2
     230:	ff040713          	addi	x14,x8,-16
     234:	00f707b3          	add	x15,x14,x15
     238:	b947a783          	lw	x15,-1132(x15)
     23c:	fdc42703          	lw	x14,-36(x8)
     240:	02f70a63          	beq	x14,x15,274 <parseEXT+0x25c>
     244:	fc442783          	lw	x15,-60(x8)
     248:	00279793          	slli	x15,x15,0x2
     24c:	b6442703          	lw	x14,-1180(x8)
     250:	00f707b3          	add	x15,x14,x15
     254:	0007a683          	lw	x13,0(x15)
     258:	fd042703          	lw	x14,-48(x8)
     25c:	fc442783          	lw	x15,-60(x8)
     260:	00279793          	slli	x15,x15,0x2
     264:	b6442603          	lw	x12,-1180(x8)
     268:	00f607b3          	add	x15,x12,x15
     26c:	00e6e733          	or	x14,x13,x14
     270:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     274:	fc442783          	lw	x15,-60(x8)
     278:	00178793          	addi	x15,x15,1
     27c:	fcf42223          	sw	x15,-60(x8)
     280:	fc442703          	lw	x14,-60(x8)
     284:	0ff00793          	addi	x15,x0,255
     288:	fae7d0e3          	bge	x15,x14,228 <parseEXT+0x210>
                }
                (*EpsBLK) |= tmpMask;
     28c:	b6842783          	lw	x15,-1176(x8)
     290:	0007a703          	lw	x14,0(x15)
     294:	fd042783          	lw	x15,-48(x8)
     298:	00f76733          	or	x14,x14,x15
     29c:	b6842783          	lw	x15,-1176(x8)
     2a0:	00e7a023          	sw	x14,0(x15)
     2a4:	4880006f          	jal	x0,72c <parseEXT+0x714>
            }
            else if(PATTERN[i] == '*') {
     2a8:	fd442783          	lw	x15,-44(x8)
     2ac:	b7c42703          	lw	x14,-1156(x8)
     2b0:	00f707b3          	add	x15,x14,x15
     2b4:	0007c703          	lbu	x14,0(x15)
     2b8:	02a00793          	addi	x15,x0,42
     2bc:	0ef71c63          	bne	x14,x15,3b4 <parseEXT+0x39c>
                for(int c = 0;c < 256;c++) {
     2c0:	fc042023          	sw	x0,-64(x8)
     2c4:	05c0006f          	jal	x0,320 <parseEXT+0x308>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     2c8:	fc042783          	lw	x15,-64(x8)
     2cc:	00279793          	slli	x15,x15,0x2
     2d0:	ff040713          	addi	x14,x8,-16
     2d4:	00f707b3          	add	x15,x14,x15
     2d8:	b947a783          	lw	x15,-1132(x15)
     2dc:	fdc42703          	lw	x14,-36(x8)
     2e0:	02f70a63          	beq	x14,x15,314 <parseEXT+0x2fc>
     2e4:	fc042783          	lw	x15,-64(x8)
     2e8:	00279793          	slli	x15,x15,0x2
     2ec:	b6442703          	lw	x14,-1180(x8)
     2f0:	00f707b3          	add	x15,x14,x15
     2f4:	0007a683          	lw	x13,0(x15)
     2f8:	fd042703          	lw	x14,-48(x8)
     2fc:	fc042783          	lw	x15,-64(x8)
     300:	00279793          	slli	x15,x15,0x2
     304:	b6442603          	lw	x12,-1180(x8)
     308:	00f607b3          	add	x15,x12,x15
     30c:	00e6e733          	or	x14,x13,x14
     310:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     314:	fc042783          	lw	x15,-64(x8)
     318:	00178793          	addi	x15,x15,1
     31c:	fcf42023          	sw	x15,-64(x8)
     320:	fc042703          	lw	x14,-64(x8)
     324:	0ff00793          	addi	x15,x0,255
     328:	fae7d0e3          	bge	x15,x14,2c8 <parseEXT+0x2b0>
                }
                for(int c = 0;c < 256;c++) {
     32c:	fa042e23          	sw	x0,-68(x8)
     330:	05c0006f          	jal	x0,38c <parseEXT+0x374>
                    if(negate ^ char_set[c]) SELFLOOP[c] |= tmpMask;
     334:	fbc42783          	lw	x15,-68(x8)
     338:	00279793          	slli	x15,x15,0x2
     33c:	ff040713          	addi	x14,x8,-16
     340:	00f707b3          	add	x15,x14,x15
     344:	b947a783          	lw	x15,-1132(x15)
     348:	fdc42703          	lw	x14,-36(x8)
     34c:	02f70a63          	beq	x14,x15,380 <parseEXT+0x368>
     350:	fbc42783          	lw	x15,-68(x8)
     354:	00279793          	slli	x15,x15,0x2
     358:	b6042703          	lw	x14,-1184(x8)
     35c:	00f707b3          	add	x15,x14,x15
     360:	0007a683          	lw	x13,0(x15)
     364:	fd042703          	lw	x14,-48(x8)
     368:	fbc42783          	lw	x15,-68(x8)
     36c:	00279793          	slli	x15,x15,0x2
     370:	b6042603          	lw	x12,-1184(x8)
     374:	00f607b3          	add	x15,x12,x15
     378:	00e6e733          	or	x14,x13,x14
     37c:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     380:	fbc42783          	lw	x15,-68(x8)
     384:	00178793          	addi	x15,x15,1
     388:	faf42e23          	sw	x15,-68(x8)
     38c:	fbc42703          	lw	x14,-68(x8)
     390:	0ff00793          	addi	x15,x0,255
     394:	fae7d0e3          	bge	x15,x14,334 <parseEXT+0x31c>
                }
                (*EpsBLK) |= tmpMask;
     398:	b6842783          	lw	x15,-1176(x8)
     39c:	0007a703          	lw	x14,0(x15)
     3a0:	fd042783          	lw	x15,-48(x8)
     3a4:	00f76733          	or	x14,x14,x15
     3a8:	b6842783          	lw	x15,-1176(x8)
     3ac:	00e7a023          	sw	x14,0(x15)
     3b0:	37c0006f          	jal	x0,72c <parseEXT+0x714>
            }
            else if(PATTERN[i] == '{') {
     3b4:	fd442783          	lw	x15,-44(x8)
     3b8:	b7c42703          	lw	x14,-1156(x8)
     3bc:	00f707b3          	add	x15,x14,x15
     3c0:	0007c703          	lbu	x14,0(x15)
     3c4:	07b00793          	addi	x15,x0,123
     3c8:	2cf71c63          	bne	x14,x15,6a0 <parseEXT+0x688>
                int lb = 0, ub = 0;
     3cc:	fa042c23          	sw	x0,-72(x8)
     3d0:	fa042a23          	sw	x0,-76(x8)
                i++;
     3d4:	fd442783          	lw	x15,-44(x8)
     3d8:	00178793          	addi	x15,x15,1
     3dc:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     3e0:	0440006f          	jal	x0,424 <parseEXT+0x40c>
                    lb = lb*10 + (PATTERN[i]-'0');
     3e4:	fb842703          	lw	x14,-72(x8)
     3e8:	00070793          	addi	x15,x14,0 # 80000000 <__stack_top+0x7fc00000>
     3ec:	00279793          	slli	x15,x15,0x2
     3f0:	00e787b3          	add	x15,x15,x14
     3f4:	00179793          	slli	x15,x15,0x1
     3f8:	00078693          	addi	x13,x15,0
     3fc:	fd442783          	lw	x15,-44(x8)
     400:	b7c42703          	lw	x14,-1156(x8)
     404:	00f707b3          	add	x15,x14,x15
     408:	0007c783          	lbu	x15,0(x15)
     40c:	fd078793          	addi	x15,x15,-48
     410:	00f687b3          	add	x15,x13,x15
     414:	faf42c23          	sw	x15,-72(x8)
                    i++;
     418:	fd442783          	lw	x15,-44(x8)
     41c:	00178793          	addi	x15,x15,1
     420:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     424:	fd442783          	lw	x15,-44(x8)
     428:	b7c42703          	lw	x14,-1156(x8)
     42c:	00f707b3          	add	x15,x14,x15
     430:	0007c703          	lbu	x14,0(x15)
     434:	02f00793          	addi	x15,x0,47
     438:	00e7fe63          	bgeu	x15,x14,454 <parseEXT+0x43c>
     43c:	fd442783          	lw	x15,-44(x8)
     440:	b7c42703          	lw	x14,-1156(x8)
     444:	00f707b3          	add	x15,x14,x15
     448:	0007c703          	lbu	x14,0(x15)
     44c:	03900793          	addi	x15,x0,57
     450:	f8e7fae3          	bgeu	x15,x14,3e4 <parseEXT+0x3cc>
                }
                if(PATTERN[i] != ',') return 0;
     454:	fd442783          	lw	x15,-44(x8)
     458:	b7c42703          	lw	x14,-1156(x8)
     45c:	00f707b3          	add	x15,x14,x15
     460:	0007c703          	lbu	x14,0(x15)
     464:	02c00793          	addi	x15,x0,44
     468:	00f70663          	beq	x14,x15,474 <parseEXT+0x45c>
     46c:	00000793          	addi	x15,x0,0
     470:	0750006f          	jal	x0,ce4 <parseEXT+0xccc>
                i++;
     474:	fd442783          	lw	x15,-44(x8)
     478:	00178793          	addi	x15,x15,1
     47c:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     480:	0440006f          	jal	x0,4c4 <parseEXT+0x4ac>
                    ub = ub*10 + (PATTERN[i]-'0');
     484:	fb442703          	lw	x14,-76(x8)
     488:	00070793          	addi	x15,x14,0
     48c:	00279793          	slli	x15,x15,0x2
     490:	00e787b3          	add	x15,x15,x14
     494:	00179793          	slli	x15,x15,0x1
     498:	00078693          	addi	x13,x15,0
     49c:	fd442783          	lw	x15,-44(x8)
     4a0:	b7c42703          	lw	x14,-1156(x8)
     4a4:	00f707b3          	add	x15,x14,x15
     4a8:	0007c783          	lbu	x15,0(x15)
     4ac:	fd078793          	addi	x15,x15,-48
     4b0:	00f687b3          	add	x15,x13,x15
     4b4:	faf42a23          	sw	x15,-76(x8)
                    i++;
     4b8:	fd442783          	lw	x15,-44(x8)
     4bc:	00178793          	addi	x15,x15,1
     4c0:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     4c4:	fd442783          	lw	x15,-44(x8)
     4c8:	b7c42703          	lw	x14,-1156(x8)
     4cc:	00f707b3          	add	x15,x14,x15
     4d0:	0007c703          	lbu	x14,0(x15)
     4d4:	02f00793          	addi	x15,x0,47
     4d8:	00e7fe63          	bgeu	x15,x14,4f4 <parseEXT+0x4dc>
     4dc:	fd442783          	lw	x15,-44(x8)
     4e0:	b7c42703          	lw	x14,-1156(x8)
     4e4:	00f707b3          	add	x15,x14,x15
     4e8:	0007c703          	lbu	x14,0(x15)
     4ec:	03900793          	addi	x15,x0,57
     4f0:	f8e7fae3          	bgeu	x15,x14,484 <parseEXT+0x46c>
                }
                if(PATTERN[i] != '}' || ub < lb || state_no+ub > W) return 0;
     4f4:	fd442783          	lw	x15,-44(x8)
     4f8:	b7c42703          	lw	x14,-1156(x8)
     4fc:	00f707b3          	add	x15,x14,x15
     500:	0007c703          	lbu	x14,0(x15)
     504:	07d00793          	addi	x15,x0,125
     508:	02f71263          	bne	x14,x15,52c <parseEXT+0x514>
     50c:	fb442703          	lw	x14,-76(x8)
     510:	fb842783          	lw	x15,-72(x8)
     514:	00f74c63          	blt	x14,x15,52c <parseEXT+0x514>
     518:	fd842703          	lw	x14,-40(x8)
     51c:	fb442783          	lw	x15,-76(x8)
     520:	00f70733          	add	x14,x14,x15
     524:	02000793          	addi	x15,x0,32
     528:	00e7d663          	bge	x15,x14,534 <parseEXT+0x51c>
     52c:	00000793          	addi	x15,x0,0
     530:	7b40006f          	jal	x0,ce4 <parseEXT+0xccc>
                state_no += (ub-1);
     534:	fb442783          	lw	x15,-76(x8)
     538:	fff78793          	addi	x15,x15,-1
     53c:	fd842703          	lw	x14,-40(x8)
     540:	00f707b3          	add	x15,x14,x15
     544:	fcf42c23          	sw	x15,-40(x8)
                int x = ub-lb, j = 0;
     548:	fb442703          	lw	x14,-76(x8)
     54c:	fb842783          	lw	x15,-72(x8)
     550:	40f707b3          	sub	x15,x14,x15
     554:	f8f42223          	sw	x15,-124(x8)
     558:	fa042823          	sw	x0,-80(x8)
                for(;j < x;j++) {
     55c:	0a00006f          	jal	x0,5fc <parseEXT+0x5e4>
                    (*EpsBLK) |= tmpMask;
     560:	b6842783          	lw	x15,-1176(x8)
     564:	0007a703          	lw	x14,0(x15)
     568:	fd042783          	lw	x15,-48(x8)
     56c:	00f76733          	or	x14,x14,x15
     570:	b6842783          	lw	x15,-1176(x8)
     574:	00e7a023          	sw	x14,0(x15)
                    for(int c = 0;c < 256;c++) {
     578:	fa042623          	sw	x0,-84(x8)
     57c:	05c0006f          	jal	x0,5d8 <parseEXT+0x5c0>
                        if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     580:	fac42783          	lw	x15,-84(x8)
     584:	00279793          	slli	x15,x15,0x2
     588:	ff040713          	addi	x14,x8,-16
     58c:	00f707b3          	add	x15,x14,x15
     590:	b947a783          	lw	x15,-1132(x15)
     594:	fdc42703          	lw	x14,-36(x8)
     598:	02f70a63          	beq	x14,x15,5cc <parseEXT+0x5b4>
     59c:	fac42783          	lw	x15,-84(x8)
     5a0:	00279793          	slli	x15,x15,0x2
     5a4:	b6442703          	lw	x14,-1180(x8)
     5a8:	00f707b3          	add	x15,x14,x15
     5ac:	0007a683          	lw	x13,0(x15)
     5b0:	fd042703          	lw	x14,-48(x8)
     5b4:	fac42783          	lw	x15,-84(x8)
     5b8:	00279793          	slli	x15,x15,0x2
     5bc:	b6442603          	lw	x12,-1180(x8)
     5c0:	00f607b3          	add	x15,x12,x15
     5c4:	00e6e733          	or	x14,x13,x14
     5c8:	00e7a023          	sw	x14,0(x15)
                    for(int c = 0;c < 256;c++) {
     5cc:	fac42783          	lw	x15,-84(x8)
     5d0:	00178793          	addi	x15,x15,1
     5d4:	faf42623          	sw	x15,-84(x8)
     5d8:	fac42703          	lw	x14,-84(x8)
     5dc:	0ff00793          	addi	x15,x0,255
     5e0:	fae7d0e3          	bge	x15,x14,580 <parseEXT+0x568>
                    }
                    tmpMask <<= 1;
     5e4:	fd042783          	lw	x15,-48(x8)
     5e8:	00179793          	slli	x15,x15,0x1
     5ec:	fcf42823          	sw	x15,-48(x8)
                for(;j < x;j++) {
     5f0:	fb042783          	lw	x15,-80(x8)
     5f4:	00178793          	addi	x15,x15,1
     5f8:	faf42823          	sw	x15,-80(x8)
     5fc:	fb042703          	lw	x14,-80(x8)
     600:	f8442783          	lw	x15,-124(x8)
     604:	f4f74ee3          	blt	x14,x15,560 <parseEXT+0x548>
                }
                for(;j < ub;j++) {
     608:	0880006f          	jal	x0,690 <parseEXT+0x678>
                    for(int c = 0;c < 256;c++) {
     60c:	fa042423          	sw	x0,-88(x8)
     610:	05c0006f          	jal	x0,66c <parseEXT+0x654>
                        if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     614:	fa842783          	lw	x15,-88(x8)
     618:	00279793          	slli	x15,x15,0x2
     61c:	ff040713          	addi	x14,x8,-16
     620:	00f707b3          	add	x15,x14,x15
     624:	b947a783          	lw	x15,-1132(x15)
     628:	fdc42703          	lw	x14,-36(x8)
     62c:	02f70a63          	beq	x14,x15,660 <parseEXT+0x648>
     630:	fa842783          	lw	x15,-88(x8)
     634:	00279793          	slli	x15,x15,0x2
     638:	b6442703          	lw	x14,-1180(x8)
     63c:	00f707b3          	add	x15,x14,x15
     640:	0007a683          	lw	x13,0(x15)
     644:	fd042703          	lw	x14,-48(x8)
     648:	fa842783          	lw	x15,-88(x8)
     64c:	00279793          	slli	x15,x15,0x2
     650:	b6442603          	lw	x12,-1180(x8)
     654:	00f607b3          	add	x15,x12,x15
     658:	00e6e733          	or	x14,x13,x14
     65c:	00e7a023          	sw	x14,0(x15)
                    for(int c = 0;c < 256;c++) {
     660:	fa842783          	lw	x15,-88(x8)
     664:	00178793          	addi	x15,x15,1
     668:	faf42423          	sw	x15,-88(x8)
     66c:	fa842703          	lw	x14,-88(x8)
     670:	0ff00793          	addi	x15,x0,255
     674:	fae7d0e3          	bge	x15,x14,614 <parseEXT+0x5fc>
                    }
                    tmpMask <<= 1;
     678:	fd042783          	lw	x15,-48(x8)
     67c:	00179793          	slli	x15,x15,0x1
     680:	fcf42823          	sw	x15,-48(x8)
                for(;j < ub;j++) {
     684:	fb042783          	lw	x15,-80(x8)
     688:	00178793          	addi	x15,x15,1
     68c:	faf42823          	sw	x15,-80(x8)
     690:	fb042703          	lw	x14,-80(x8)
     694:	fb442783          	lw	x15,-76(x8)
     698:	f6f74ae3          	blt	x14,x15,60c <parseEXT+0x5f4>
     69c:	0900006f          	jal	x0,72c <parseEXT+0x714>
                }
            }
            else {
                for(int c = 0;c < 256;c++) {
     6a0:	fa042223          	sw	x0,-92(x8)
     6a4:	05c0006f          	jal	x0,700 <parseEXT+0x6e8>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     6a8:	fa442783          	lw	x15,-92(x8)
     6ac:	00279793          	slli	x15,x15,0x2
     6b0:	ff040713          	addi	x14,x8,-16
     6b4:	00f707b3          	add	x15,x14,x15
     6b8:	b947a783          	lw	x15,-1132(x15)
     6bc:	fdc42703          	lw	x14,-36(x8)
     6c0:	02f70a63          	beq	x14,x15,6f4 <parseEXT+0x6dc>
     6c4:	fa442783          	lw	x15,-92(x8)
     6c8:	00279793          	slli	x15,x15,0x2
     6cc:	b6442703          	lw	x14,-1180(x8)
     6d0:	00f707b3          	add	x15,x14,x15
     6d4:	0007a683          	lw	x13,0(x15)
     6d8:	fd042703          	lw	x14,-48(x8)
     6dc:	fa442783          	lw	x15,-92(x8)
     6e0:	00279793          	slli	x15,x15,0x2
     6e4:	b6442603          	lw	x12,-1180(x8)
     6e8:	00f607b3          	add	x15,x12,x15
     6ec:	00e6e733          	or	x14,x13,x14
     6f0:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     6f4:	fa442783          	lw	x15,-92(x8)
     6f8:	00178793          	addi	x15,x15,1
     6fc:	faf42223          	sw	x15,-92(x8)
     700:	fa442703          	lw	x14,-92(x8)
     704:	0ff00793          	addi	x15,x0,255
     708:	fae7d0e3          	bge	x15,x14,6a8 <parseEXT+0x690>
                }
                if(PATTERN[i] != '\0') i--;
     70c:	fd442783          	lw	x15,-44(x8)
     710:	b7c42703          	lw	x14,-1156(x8)
     714:	00f707b3          	add	x15,x14,x15
     718:	0007c783          	lbu	x15,0(x15)
     71c:	00078863          	beq	x15,x0,72c <parseEXT+0x714>
     720:	fd442783          	lw	x15,-44(x8)
     724:	fff78793          	addi	x15,x15,-1
     728:	fcf42a23          	sw	x15,-44(x8)
            }

            if(state_no >= W) return 0;
     72c:	fd842703          	lw	x14,-40(x8)
     730:	01f00793          	addi	x15,x0,31
     734:	00e7d663          	bge	x15,x14,740 <parseEXT+0x728>
     738:	00000793          	addi	x15,x0,0
     73c:	5a80006f          	jal	x0,ce4 <parseEXT+0xccc>

            char_class = 1;
     740:	00100793          	addi	x15,x0,1
     744:	fef42023          	sw	x15,-32(x8)
     748:	4740006f          	jal	x0,bbc <parseEXT+0xba4>
        }

        else {

            // Resetting all info to process next character class separately
            for(int c = 0;c < 256;c++) char_set[c] = 0;
     74c:	fa042023          	sw	x0,-96(x8)
     750:	0240006f          	jal	x0,774 <parseEXT+0x75c>
     754:	fa042783          	lw	x15,-96(x8)
     758:	00279793          	slli	x15,x15,0x2
     75c:	ff040713          	addi	x14,x8,-16
     760:	00f707b3          	add	x15,x14,x15
     764:	b807aa23          	sw	x0,-1132(x15)
     768:	fa042783          	lw	x15,-96(x8)
     76c:	00178793          	addi	x15,x15,1
     770:	faf42023          	sw	x15,-96(x8)
     774:	fa042703          	lw	x14,-96(x8)
     778:	0ff00793          	addi	x15,x0,255
     77c:	fce7dce3          	bge	x15,x14,754 <parseEXT+0x73c>
            negate = 0;
     780:	fc042e23          	sw	x0,-36(x8)
            escape = 0;
     784:	fe042423          	sw	x0,-24(x8)
            range = 0;
     788:	fe042223          	sw	x0,-28(x8)

            if(PATTERN[i] == '[') {
     78c:	fd442783          	lw	x15,-44(x8)
     790:	b7c42703          	lw	x14,-1156(x8)
     794:	00f707b3          	add	x15,x14,x15
     798:	0007c703          	lbu	x14,0(x15)
     79c:	05b00793          	addi	x15,x0,91
     7a0:	2ef71e63          	bne	x14,x15,a9c <parseEXT+0xa84>
                i++;
     7a4:	fd442783          	lw	x15,-44(x8)
     7a8:	00178793          	addi	x15,x15,1
     7ac:	fcf42a23          	sw	x15,-44(x8)
                int st = i;
     7b0:	fd442783          	lw	x15,-44(x8)
     7b4:	f8f42423          	sw	x15,-120(x8)
                while(PATTERN[i] != '\0') {
     7b8:	2b40006f          	jal	x0,a6c <parseEXT+0xa54>
                    if(escape) {
     7bc:	fe842783          	lw	x15,-24(x8)
     7c0:	0e078063          	beq	x15,x0,8a0 <parseEXT+0x888>
                        switch(PATTERN[i]) {
     7c4:	fd442783          	lw	x15,-44(x8)
     7c8:	b7c42703          	lw	x14,-1156(x8)
     7cc:	00f707b3          	add	x15,x14,x15
     7d0:	0007c783          	lbu	x15,0(x15)
     7d4:	fd078793          	addi	x15,x15,-48
     7d8:	04600713          	addi	x14,x0,70
     7dc:	08f76a63          	bltu	x14,x15,870 <parseEXT+0x858>
     7e0:	00279713          	slli	x14,x15,0x2
     7e4:	000027b7          	lui	x15,0x2
     7e8:	23c78793          	addi	x15,x15,572 # 223c <main+0x570>
     7ec:	00f707b3          	add	x15,x14,x15
     7f0:	0007a783          	lw	x15,0(x15)
     7f4:	00078067          	jalr	x0,0(x15)
                            case 'n' :
                                char_set['\n'] = 1;     // new line
     7f8:	00100793          	addi	x15,x0,1
     7fc:	baf42623          	sw	x15,-1108(x8)
                            break;
     800:	0980006f          	jal	x0,898 <parseEXT+0x880>
                            case 'r' :
                                char_set['\r'] = 1;     // carriage return 
     804:	00100793          	addi	x15,x0,1
     808:	baf42c23          	sw	x15,-1096(x8)
                            break;
     80c:	08c0006f          	jal	x0,898 <parseEXT+0x880>
                            case 'v' :
                                char_set['\v'] = 1;     // vertical tab
     810:	00100793          	addi	x15,x0,1
     814:	baf42823          	sw	x15,-1104(x8)
                            break;
     818:	0800006f          	jal	x0,898 <parseEXT+0x880>
                            case 'a' :
                                char_set['\a'] = 1;     // alert bell
     81c:	00100793          	addi	x15,x0,1
     820:	baf42023          	sw	x15,-1120(x8)
                            break;
     824:	0740006f          	jal	x0,898 <parseEXT+0x880>
                            case 'b' :
                                char_set['\b'] = 1;     // backspace
     828:	00100793          	addi	x15,x0,1
     82c:	baf42223          	sw	x15,-1116(x8)
                            break;
     830:	0680006f          	jal	x0,898 <parseEXT+0x880>
                            case 't' :
                                char_set['\t'] = 1;     // horizontal tab
     834:	00100793          	addi	x15,x0,1
     838:	baf42423          	sw	x15,-1112(x8)
                            break;
     83c:	05c0006f          	jal	x0,898 <parseEXT+0x880>
                            case 'f' :
                                char_set['\f'] = 1;     // form feed
     840:	00100793          	addi	x15,x0,1
     844:	baf42a23          	sw	x15,-1100(x8)
                            break;
     848:	0500006f          	jal	x0,898 <parseEXT+0x880>
                            case '0' :  
                                char_set['\0'] = 1;     // null
     84c:	00100793          	addi	x15,x0,1
     850:	b8f42223          	sw	x15,-1148(x8)
                            break;
     854:	0440006f          	jal	x0,898 <parseEXT+0x880>
                            case 's' :  
                                char_set[' '] = 1;      // single whitespace
     858:	00100793          	addi	x15,x0,1
     85c:	c0f42223          	sw	x15,-1020(x8)
                            break;
     860:	0380006f          	jal	x0,898 <parseEXT+0x880>
                            case '\\' :
                                char_set['\\'] = 1;     // backslash
     864:	00100793          	addi	x15,x0,1
     868:	cef42a23          	sw	x15,-780(x8)
                            break;
     86c:	02c0006f          	jal	x0,898 <parseEXT+0x880>
                            default :
                                char_set[PATTERN[i]] = 1;
     870:	fd442783          	lw	x15,-44(x8)
     874:	b7c42703          	lw	x14,-1156(x8)
     878:	00f707b3          	add	x15,x14,x15
     87c:	0007c783          	lbu	x15,0(x15)
     880:	00279793          	slli	x15,x15,0x2
     884:	ff040713          	addi	x14,x8,-16
     888:	00f707b3          	add	x15,x14,x15
     88c:	00100713          	addi	x14,x0,1
     890:	b8e7aa23          	sw	x14,-1132(x15)
                            break;
     894:	00000013          	addi	x0,x0,0
                        }
                        escape = 0;
     898:	fe042423          	sw	x0,-24(x8)
     89c:	1c40006f          	jal	x0,a60 <parseEXT+0xa48>
                    }
                    else if(range) {
     8a0:	fe442783          	lw	x15,-28(x8)
     8a4:	08078c63          	beq	x15,x0,93c <parseEXT+0x924>
                        if(PATTERN[i] < PATTERN[i-2]) {
     8a8:	fd442783          	lw	x15,-44(x8)
     8ac:	b7c42703          	lw	x14,-1156(x8)
     8b0:	00f707b3          	add	x15,x14,x15
     8b4:	0007c703          	lbu	x14,0(x15)
     8b8:	fd442783          	lw	x15,-44(x8)
     8bc:	ffe78793          	addi	x15,x15,-2
     8c0:	b7c42683          	lw	x13,-1156(x8)
     8c4:	00f687b3          	add	x15,x13,x15
     8c8:	0007c783          	lbu	x15,0(x15)
     8cc:	00f77663          	bgeu	x14,x15,8d8 <parseEXT+0x8c0>
                            return 0;
     8d0:	00000793          	addi	x15,x0,0
     8d4:	4100006f          	jal	x0,ce4 <parseEXT+0xccc>
                        }
                        for(int c = PATTERN[i-2];c <= PATTERN[i];c++) char_set[c] = 1;
     8d8:	fd442783          	lw	x15,-44(x8)
     8dc:	ffe78793          	addi	x15,x15,-2
     8e0:	b7c42703          	lw	x14,-1156(x8)
     8e4:	00f707b3          	add	x15,x14,x15
     8e8:	0007c783          	lbu	x15,0(x15)
     8ec:	f8f42e23          	sw	x15,-100(x8)
     8f0:	0280006f          	jal	x0,918 <parseEXT+0x900>
     8f4:	f9c42783          	lw	x15,-100(x8)
     8f8:	00279793          	slli	x15,x15,0x2
     8fc:	ff040713          	addi	x14,x8,-16
     900:	00f707b3          	add	x15,x14,x15
     904:	00100713          	addi	x14,x0,1
     908:	b8e7aa23          	sw	x14,-1132(x15)
     90c:	f9c42783          	lw	x15,-100(x8)
     910:	00178793          	addi	x15,x15,1
     914:	f8f42e23          	sw	x15,-100(x8)
     918:	fd442783          	lw	x15,-44(x8)
     91c:	b7c42703          	lw	x14,-1156(x8)
     920:	00f707b3          	add	x15,x14,x15
     924:	0007c783          	lbu	x15,0(x15)
     928:	00078713          	addi	x14,x15,0
     92c:	f9c42783          	lw	x15,-100(x8)
     930:	fcf752e3          	bge	x14,x15,8f4 <parseEXT+0x8dc>
                        range = 0;
     934:	fe042223          	sw	x0,-28(x8)
     938:	1280006f          	jal	x0,a60 <parseEXT+0xa48>
                    }
                    else if(PATTERN[i] == '\\') escape = 1;
     93c:	fd442783          	lw	x15,-44(x8)
     940:	b7c42703          	lw	x14,-1156(x8)
     944:	00f707b3          	add	x15,x14,x15
     948:	0007c703          	lbu	x14,0(x15)
     94c:	05c00793          	addi	x15,x0,92
     950:	00f71863          	bne	x14,x15,960 <parseEXT+0x948>
     954:	00100793          	addi	x15,x0,1
     958:	fef42423          	sw	x15,-24(x8)
     95c:	1040006f          	jal	x0,a60 <parseEXT+0xa48>
                    else if(PATTERN[i] == '-') {
     960:	fd442783          	lw	x15,-44(x8)
     964:	b7c42703          	lw	x14,-1156(x8)
     968:	00f707b3          	add	x15,x14,x15
     96c:	0007c703          	lbu	x14,0(x15)
     970:	02d00793          	addi	x15,x0,45
     974:	04f71e63          	bne	x14,x15,9d0 <parseEXT+0x9b8>
                        if(i == st || (i == st+1 && negate) || PATTERN[i+1] == ']') char_set['-'] = 1;
     978:	fd442703          	lw	x14,-44(x8)
     97c:	f8842783          	lw	x15,-120(x8)
     980:	02f70c63          	beq	x14,x15,9b8 <parseEXT+0x9a0>
     984:	f8842783          	lw	x15,-120(x8)
     988:	00178793          	addi	x15,x15,1
     98c:	fd442703          	lw	x14,-44(x8)
     990:	00f71663          	bne	x14,x15,99c <parseEXT+0x984>
     994:	fdc42783          	lw	x15,-36(x8)
     998:	02079063          	bne	x15,x0,9b8 <parseEXT+0x9a0>
     99c:	fd442783          	lw	x15,-44(x8)
     9a0:	00178793          	addi	x15,x15,1
     9a4:	b7c42703          	lw	x14,-1156(x8)
     9a8:	00f707b3          	add	x15,x14,x15
     9ac:	0007c703          	lbu	x14,0(x15)
     9b0:	05d00793          	addi	x15,x0,93
     9b4:	00f71863          	bne	x14,x15,9c4 <parseEXT+0x9ac>
     9b8:	00100793          	addi	x15,x0,1
     9bc:	c2f42c23          	sw	x15,-968(x8)
     9c0:	0a00006f          	jal	x0,a60 <parseEXT+0xa48>
                        else range = 1;
     9c4:	00100793          	addi	x15,x0,1
     9c8:	fef42223          	sw	x15,-28(x8)
     9cc:	0940006f          	jal	x0,a60 <parseEXT+0xa48>
                    }
                    else if(i == st && PATTERN[i] == '^') negate = 1;
     9d0:	fd442703          	lw	x14,-44(x8)
     9d4:	f8842783          	lw	x15,-120(x8)
     9d8:	02f71463          	bne	x14,x15,a00 <parseEXT+0x9e8>
     9dc:	fd442783          	lw	x15,-44(x8)
     9e0:	b7c42703          	lw	x14,-1156(x8)
     9e4:	00f707b3          	add	x15,x14,x15
     9e8:	0007c703          	lbu	x14,0(x15)
     9ec:	05e00793          	addi	x15,x0,94
     9f0:	00f71863          	bne	x14,x15,a00 <parseEXT+0x9e8>
     9f4:	00100793          	addi	x15,x0,1
     9f8:	fcf42e23          	sw	x15,-36(x8)
     9fc:	0640006f          	jal	x0,a60 <parseEXT+0xa48>
                    else if(PATTERN[i] == ']') {
     a00:	fd442783          	lw	x15,-44(x8)
     a04:	b7c42703          	lw	x14,-1156(x8)
     a08:	00f707b3          	add	x15,x14,x15
     a0c:	0007c703          	lbu	x14,0(x15)
     a10:	05d00793          	addi	x15,x0,93
     a14:	02f71463          	bne	x14,x15,a3c <parseEXT+0xa24>
                        if(i == st+1 && negate) char_set[']'] = 1;
     a18:	f8842783          	lw	x15,-120(x8)
     a1c:	00178793          	addi	x15,x15,1
     a20:	fd442703          	lw	x14,-44(x8)
     a24:	04f71e63          	bne	x14,x15,a80 <parseEXT+0xa68>
     a28:	fdc42783          	lw	x15,-36(x8)
     a2c:	04078a63          	beq	x15,x0,a80 <parseEXT+0xa68>
     a30:	00100793          	addi	x15,x0,1
     a34:	cef42c23          	sw	x15,-776(x8)
     a38:	0280006f          	jal	x0,a60 <parseEXT+0xa48>
                        else break;
                    }
                    else char_set[PATTERN[i]] = 1;
     a3c:	fd442783          	lw	x15,-44(x8)
     a40:	b7c42703          	lw	x14,-1156(x8)
     a44:	00f707b3          	add	x15,x14,x15
     a48:	0007c783          	lbu	x15,0(x15)
     a4c:	00279793          	slli	x15,x15,0x2
     a50:	ff040713          	addi	x14,x8,-16
     a54:	00f707b3          	add	x15,x14,x15
     a58:	00100713          	addi	x14,x0,1
     a5c:	b8e7aa23          	sw	x14,-1132(x15)
                    i++;
     a60:	fd442783          	lw	x15,-44(x8)
     a64:	00178793          	addi	x15,x15,1
     a68:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] != '\0') {
     a6c:	fd442783          	lw	x15,-44(x8)
     a70:	b7c42703          	lw	x14,-1156(x8)
     a74:	00f707b3          	add	x15,x14,x15
     a78:	0007c783          	lbu	x15,0(x15)
     a7c:	d40790e3          	bne	x15,x0,7bc <parseEXT+0x7a4>
                }
                if(PATTERN[i] == '\0') return 0;
     a80:	fd442783          	lw	x15,-44(x8)
     a84:	b7c42703          	lw	x14,-1156(x8)
     a88:	00f707b3          	add	x15,x14,x15
     a8c:	0007c783          	lbu	x15,0(x15)
     a90:	12079463          	bne	x15,x0,bb8 <parseEXT+0xba0>
     a94:	00000793          	addi	x15,x0,0
     a98:	24c0006f          	jal	x0,ce4 <parseEXT+0xccc>
            }
            else if(PATTERN[i] == '\\') {
     a9c:	fd442783          	lw	x15,-44(x8)
     aa0:	b7c42703          	lw	x14,-1156(x8)
     aa4:	00f707b3          	add	x15,x14,x15
     aa8:	0007c703          	lbu	x14,0(x15)
     aac:	05c00793          	addi	x15,x0,92
     ab0:	0ef71263          	bne	x14,x15,b94 <parseEXT+0xb7c>
                i++;
     ab4:	fd442783          	lw	x15,-44(x8)
     ab8:	00178793          	addi	x15,x15,1
     abc:	fcf42a23          	sw	x15,-44(x8)
                switch(PATTERN[i]) {
     ac0:	fd442783          	lw	x15,-44(x8)
     ac4:	b7c42703          	lw	x14,-1156(x8)
     ac8:	00f707b3          	add	x15,x14,x15
     acc:	0007c783          	lbu	x15,0(x15)
     ad0:	fd078793          	addi	x15,x15,-48
     ad4:	04600713          	addi	x14,x0,70
     ad8:	08f76a63          	bltu	x14,x15,b6c <parseEXT+0xb54>
     adc:	00279713          	slli	x14,x15,0x2
     ae0:	000027b7          	lui	x15,0x2
     ae4:	35878793          	addi	x15,x15,856 # 2358 <main+0x68c>
     ae8:	00f707b3          	add	x15,x14,x15
     aec:	0007a783          	lw	x15,0(x15)
     af0:	00078067          	jalr	x0,0(x15)
                    case 'n' :
                        char_set['\n'] = 1;
     af4:	00100793          	addi	x15,x0,1
     af8:	baf42623          	sw	x15,-1108(x8)
                    break;
     afc:	0bc0006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case 'r' :
                        char_set['\r'] = 1;
     b00:	00100793          	addi	x15,x0,1
     b04:	baf42c23          	sw	x15,-1096(x8)
                    break;
     b08:	0b00006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case 'v' :
                        char_set['\v'] = 1;
     b0c:	00100793          	addi	x15,x0,1
     b10:	baf42823          	sw	x15,-1104(x8)
                    break;
     b14:	0a40006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case 'a' :
                        char_set['\a'] = 1;
     b18:	00100793          	addi	x15,x0,1
     b1c:	baf42023          	sw	x15,-1120(x8)
                    break;
     b20:	0980006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case 'b' :
                        char_set['\b'] = 1;
     b24:	00100793          	addi	x15,x0,1
     b28:	baf42223          	sw	x15,-1116(x8)
                    break;
     b2c:	08c0006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case 't' :
                        char_set['\t'] = 1;
     b30:	00100793          	addi	x15,x0,1
     b34:	baf42423          	sw	x15,-1112(x8)
                    break;
     b38:	0800006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case 'f' :
                        char_set['\f'] = 1;
     b3c:	00100793          	addi	x15,x0,1
     b40:	baf42a23          	sw	x15,-1100(x8)
                    break;
     b44:	0740006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case '0' :
                        char_set['\0'] = 1;
     b48:	00100793          	addi	x15,x0,1
     b4c:	b8f42223          	sw	x15,-1148(x8)
                    break;
     b50:	0680006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case 's' :  
                        char_set[' '] = 1;
     b54:	00100793          	addi	x15,x0,1
     b58:	c0f42223          	sw	x15,-1020(x8)
                    break;
     b5c:	05c0006f          	jal	x0,bb8 <parseEXT+0xba0>
                    case '\\' :
                        char_set['\\'] = 1;
     b60:	00100793          	addi	x15,x0,1
     b64:	cef42a23          	sw	x15,-780(x8)
                    break;
     b68:	0500006f          	jal	x0,bb8 <parseEXT+0xba0>
                    default :
                        char_set[PATTERN[i]] = 1;
     b6c:	fd442783          	lw	x15,-44(x8)
     b70:	b7c42703          	lw	x14,-1156(x8)
     b74:	00f707b3          	add	x15,x14,x15
     b78:	0007c783          	lbu	x15,0(x15)
     b7c:	00279793          	slli	x15,x15,0x2
     b80:	ff040713          	addi	x14,x8,-16
     b84:	00f707b3          	add	x15,x14,x15
     b88:	00100713          	addi	x14,x0,1
     b8c:	b8e7aa23          	sw	x14,-1132(x15)
                    break;
     b90:	0280006f          	jal	x0,bb8 <parseEXT+0xba0>
                }
            }
            else char_set[PATTERN[i]] = 1;
     b94:	fd442783          	lw	x15,-44(x8)
     b98:	b7c42703          	lw	x14,-1156(x8)
     b9c:	00f707b3          	add	x15,x14,x15
     ba0:	0007c783          	lbu	x15,0(x15)
     ba4:	00279793          	slli	x15,x15,0x2
     ba8:	ff040713          	addi	x14,x8,-16
     bac:	00f707b3          	add	x15,x14,x15
     bb0:	00100713          	addi	x14,x0,1
     bb4:	b8e7aa23          	sw	x14,-1132(x15)

            char_class = 0;
     bb8:	fe042023          	sw	x0,-32(x8)
    for(int i = 0; !char_class || PATTERN[i] != '\0'; i++) {
     bbc:	fd442783          	lw	x15,-44(x8)
     bc0:	00178793          	addi	x15,x15,1
     bc4:	fcf42a23          	sw	x15,-44(x8)
     bc8:	fe042783          	lw	x15,-32(x8)
     bcc:	d2078263          	beq	x15,x0,f0 <parseEXT+0xd8>
     bd0:	fd442783          	lw	x15,-44(x8)
     bd4:	b7c42703          	lw	x14,-1156(x8)
     bd8:	00f707b3          	add	x15,x14,x15
     bdc:	0007c783          	lbu	x15,0(x15)
     be0:	d0079863          	bne	x15,x0,f0 <parseEXT+0xd8>

        }

    }

    *ACCEPT = (1<<state_no);
     be4:	fd842783          	lw	x15,-40(x8)
     be8:	00100713          	addi	x14,x0,1
     bec:	00f717b3          	sll	x15,x14,x15
     bf0:	00078713          	addi	x14,x15,0
     bf4:	b7442783          	lw	x15,-1164(x8)
     bf8:	00e7a023          	sw	x14,0(x15)

    for(int i = 0;i < W-1;i++) {
     bfc:	f8042c23          	sw	x0,-104(x8)
     c00:	0b00006f          	jal	x0,cb0 <parseEXT+0xc98>
        int tmpMask = (1<<i);
     c04:	f9842783          	lw	x15,-104(x8)
     c08:	00100713          	addi	x14,x0,1
     c0c:	00f717b3          	sll	x15,x14,x15
     c10:	f8f42a23          	sw	x15,-108(x8)
        int pres_bit = ( ((*EpsBLK) & tmpMask) != 0 ), nxt_bit = ( ((*EpsBLK) & (tmpMask<<1)) != 0);
     c14:	b6842783          	lw	x15,-1176(x8)
     c18:	0007a703          	lw	x14,0(x15)
     c1c:	f9442783          	lw	x15,-108(x8)
     c20:	00f777b3          	and	x15,x14,x15
     c24:	00f037b3          	sltu	x15,x0,x15
     c28:	0ff7f793          	andi	x15,x15,255
     c2c:	f8f42823          	sw	x15,-112(x8)
     c30:	b6842783          	lw	x15,-1176(x8)
     c34:	0007a783          	lw	x15,0(x15)
     c38:	f9442703          	lw	x14,-108(x8)
     c3c:	00171713          	slli	x14,x14,0x1
     c40:	00e7f7b3          	and	x15,x15,x14
     c44:	00f037b3          	sltu	x15,x0,x15
     c48:	0ff7f793          	andi	x15,x15,255
     c4c:	f8f42623          	sw	x15,-116(x8)
        if(!pres_bit && nxt_bit) (*EpsBEG) |= tmpMask;
     c50:	f9042783          	lw	x15,-112(x8)
     c54:	02079463          	bne	x15,x0,c7c <parseEXT+0xc64>
     c58:	f8c42783          	lw	x15,-116(x8)
     c5c:	02078063          	beq	x15,x0,c7c <parseEXT+0xc64>
     c60:	b7042783          	lw	x15,-1168(x8)
     c64:	0007a703          	lw	x14,0(x15)
     c68:	f9442783          	lw	x15,-108(x8)
     c6c:	00f76733          	or	x14,x14,x15
     c70:	b7042783          	lw	x15,-1168(x8)
     c74:	00e7a023          	sw	x14,0(x15)
     c78:	02c0006f          	jal	x0,ca4 <parseEXT+0xc8c>
        else if(pres_bit && !nxt_bit) (*EpsEND) |= tmpMask;
     c7c:	f9042783          	lw	x15,-112(x8)
     c80:	02078263          	beq	x15,x0,ca4 <parseEXT+0xc8c>
     c84:	f8c42783          	lw	x15,-116(x8)
     c88:	00079e63          	bne	x15,x0,ca4 <parseEXT+0xc8c>
     c8c:	b6c42783          	lw	x15,-1172(x8)
     c90:	0007a703          	lw	x14,0(x15)
     c94:	f9442783          	lw	x15,-108(x8)
     c98:	00f76733          	or	x14,x14,x15
     c9c:	b6c42783          	lw	x15,-1172(x8)
     ca0:	00e7a023          	sw	x14,0(x15)
    for(int i = 0;i < W-1;i++) {
     ca4:	f9842783          	lw	x15,-104(x8)
     ca8:	00178793          	addi	x15,x15,1
     cac:	f8f42c23          	sw	x15,-104(x8)
     cb0:	f9842703          	lw	x14,-104(x8)
     cb4:	01e00793          	addi	x15,x0,30
     cb8:	f4e7d6e3          	bge	x15,x14,c04 <parseEXT+0xbec>
    }
    if((*EpsBLK) & (1<<(W-1))) (*EpsEND) |= (1<<(W-1));
     cbc:	b6842783          	lw	x15,-1176(x8)
     cc0:	0007a783          	lw	x15,0(x15)
     cc4:	0007de63          	bge	x15,x0,ce0 <parseEXT+0xcc8>
     cc8:	b6c42783          	lw	x15,-1172(x8)
     ccc:	0007a703          	lw	x14,0(x15)
     cd0:	800007b7          	lui	x15,0x80000
     cd4:	00f76733          	or	x14,x14,x15
     cd8:	b6c42783          	lw	x15,-1172(x8)
     cdc:	00e7a023          	sw	x14,0(x15) # 80000000 <__stack_top+0x7fc00000>

    return 1;
     ce0:	00100793          	addi	x15,x0,1
}
     ce4:	00078513          	addi	x10,x15,0
     ce8:	49c12403          	lw	x8,1180(x2)
     cec:	4a010113          	addi	x2,x2,1184
     cf0:	00008067          	jalr	x0,0(x1)

00000cf4 <Input1_2>:
#define PMP_READ_DATA_ACCEPTED_OFFSET 0x0C
#define PMP_READ_PATTERN_ACCEPTED_OFFSET 0x10
#define NO_MODULES 4

// Function to write data to Data Buffer (64 bits) in Peripheral Interface. LSB = 1 denotes lower 32 bits, LSB = 0 denotes higher 32 bits
void Input1_2(unsigned int data, int LSB) {
     cf4:	fd010113          	addi	x2,x2,-48
     cf8:	02812623          	sw	x8,44(x2)
     cfc:	03010413          	addi	x8,x2,48
     d00:	fca42e23          	sw	x10,-36(x8)
     d04:	fcb42c23          	sw	x11,-40(x8)
    int *p = (LSB) ? (int*)(PMP_INTERFACE_BASE + PMP_WRITE_LS32B_OFFSET) : (int*)(PMP_INTERFACE_BASE + PMP_WRITE_MS32B_OFFSET);
     d08:	fd842783          	lw	x15,-40(x8)
     d0c:	00078663          	beq	x15,x0,d18 <Input1_2+0x24>
     d10:	004007b7          	lui	x15,0x400
     d14:	00c0006f          	jal	x0,d20 <Input1_2+0x2c>
     d18:	004007b7          	lui	x15,0x400
     d1c:	00478793          	addi	x15,x15,4 # 400004 <__stack_top+0x4>
     d20:	fef42623          	sw	x15,-20(x8)
    *p  = data;
     d24:	fdc42703          	lw	x14,-36(x8)
     d28:	fec42783          	lw	x15,-20(x8)
     d2c:	00e7a023          	sw	x14,0(x15)
}
     d30:	00000013          	addi	x0,x0,0
     d34:	02c12403          	lw	x8,44(x2)
     d38:	03010113          	addi	x2,x2,48
     d3c:	00008067          	jalr	x0,0(x1)

00000d40 <Input1_2LL>:

// The above function overloaded to write long long data to Data Buffer as intended
void Input1_2LL(long long data) {
     d40:	fd010113          	addi	x2,x2,-48
     d44:	02812623          	sw	x8,44(x2)
     d48:	03010413          	addi	x8,x2,48
     d4c:	fca42c23          	sw	x10,-40(x8)
     d50:	fcb42e23          	sw	x11,-36(x8)
    int *p1 = (int*)(PMP_INTERFACE_BASE + PMP_WRITE_LS32B_OFFSET), *p2 = (int*)(PMP_INTERFACE_BASE + PMP_WRITE_MS32B_OFFSET);
     d54:	004006b7          	lui	x13,0x400
     d58:	fed42623          	sw	x13,-20(x8)
     d5c:	004006b7          	lui	x13,0x400
     d60:	00468693          	addi	x13,x13,4 # 400004 <__stack_top+0x4>
     d64:	fed42423          	sw	x13,-24(x8)
    unsigned int LS32B = data & 0xFFFFFFFF, MS32B = data>>32;
     d68:	fd842683          	lw	x13,-40(x8)
     d6c:	fed42223          	sw	x13,-28(x8)
     d70:	fdc42683          	lw	x13,-36(x8)
     d74:	4006d713          	srai	x14,x13,0x0
     d78:	fdc42683          	lw	x13,-36(x8)
     d7c:	41f6d793          	srai	x15,x13,0x1f
     d80:	fee42023          	sw	x14,-32(x8)
    *p1 = LS32B;
     d84:	fe442703          	lw	x14,-28(x8)
     d88:	fec42783          	lw	x15,-20(x8)
     d8c:	00e7a023          	sw	x14,0(x15)
    *p2 = MS32B;
     d90:	fe042703          	lw	x14,-32(x8)
     d94:	fe842783          	lw	x15,-24(x8)
     d98:	00e7a023          	sw	x14,0(x15)
} 
     d9c:	00000013          	addi	x0,x0,0
     da0:	02c12403          	lw	x8,44(x2)
     da4:	03010113          	addi	x2,x2,48
     da8:	00008067          	jalr	x0,0(x1)

00000dac <Input3>:

// Function to pass control data to Periperal Interface
void Input3(int opcode, int address, int module_ID) {
     dac:	fd010113          	addi	x2,x2,-48
     db0:	02812623          	sw	x8,44(x2)
     db4:	03010413          	addi	x8,x2,48
     db8:	fca42e23          	sw	x10,-36(x8)
     dbc:	fcb42c23          	sw	x11,-40(x8)
     dc0:	fcc42a23          	sw	x12,-44(x8)
    int *p = (int *)(PMP_INTERFACE_BASE + PMP_WRITE_CONTROL_OFFSET);
     dc4:	004007b7          	lui	x15,0x400
     dc8:	00878793          	addi	x15,x15,8 # 400008 <__stack_top+0x8>
     dcc:	fef42623          	sw	x15,-20(x8)
    *p = (opcode<<30) | (address<<16) | module_ID;
     dd0:	fdc42783          	lw	x15,-36(x8)
     dd4:	01e79713          	slli	x14,x15,0x1e
     dd8:	fd842783          	lw	x15,-40(x8)
     ddc:	01079793          	slli	x15,x15,0x10
     de0:	00f76733          	or	x14,x14,x15
     de4:	fd442783          	lw	x15,-44(x8)
     de8:	00f76733          	or	x14,x14,x15
     dec:	fec42783          	lw	x15,-20(x8)
     df0:	00e7a023          	sw	x14,0(x15)
}
     df4:	00000013          	addi	x0,x0,0
     df8:	02c12403          	lw	x8,44(x2)
     dfc:	03010113          	addi	x2,x2,48
     e00:	00008067          	jalr	x0,0(x1)

00000e04 <Complete_Handshaking>:

// Function to complete the handshaking with peripheral by waiting till DATA ACCEPTED signal is high, 
// and then sending a No Operation instrucion to make DATA VALID signal low and complete one operation.
// Returns - the PATTERN_ACCEPTED status
unsigned int Complete_Handshaking(unsigned int REQD_DATA_ACCEPTED) {
     e04:	fc010113          	addi	x2,x2,-64
     e08:	02812e23          	sw	x8,60(x2)
     e0c:	04010413          	addi	x8,x2,64
     e10:	fca42623          	sw	x10,-52(x8)
    int *p1 = (int *)(PMP_INTERFACE_BASE + PMP_READ_DATA_ACCEPTED_OFFSET);
     e14:	004007b7          	lui	x15,0x400
     e18:	00c78793          	addi	x15,x15,12 # 40000c <__stack_top+0xc>
     e1c:	fef42423          	sw	x15,-24(x8)
    // Waiting till the operations are completed in the modules (under operation)
    while( ((*p1) & REQD_DATA_ACCEPTED) != REQD_DATA_ACCEPTED );
     e20:	00000013          	addi	x0,x0,0
     e24:	fe842783          	lw	x15,-24(x8)
     e28:	0007a783          	lw	x15,0(x15)
     e2c:	00078713          	addi	x14,x15,0
     e30:	fcc42783          	lw	x15,-52(x8)
     e34:	00f777b3          	and	x15,x14,x15
     e38:	fcc42703          	lw	x14,-52(x8)
     e3c:	fef714e3          	bne	x14,x15,e24 <Complete_Handshaking+0x20>

    int *p = (int *)(PMP_INTERFACE_BASE + PMP_READ_PATTERN_ACCEPTED_OFFSET);
     e40:	004007b7          	lui	x15,0x400
     e44:	01078793          	addi	x15,x15,16 # 400010 <__stack_top+0x10>
     e48:	fef42223          	sw	x15,-28(x8)
    unsigned int PATTERN_ACCEPTED_STATUS = (*p);
     e4c:	fe442783          	lw	x15,-28(x8)
     e50:	0007a783          	lw	x15,0(x15)
     e54:	fef42023          	sw	x15,-32(x8)

    int *p2 = (int *)(PMP_INTERFACE_BASE + PMP_WRITE_CONTROL_OFFSET);
     e58:	004007b7          	lui	x15,0x400
     e5c:	00878793          	addi	x15,x15,8 # 400008 <__stack_top+0x8>
     e60:	fcf42e23          	sw	x15,-36(x8)
    // Sending a No operation to the necessary modules to conclude the handshaking 
    for(int i = 0; i < NO_MODULES; i++) {
     e64:	fe042623          	sw	x0,-20(x8)
     e68:	0380006f          	jal	x0,ea0 <Complete_Handshaking+0x9c>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
     e6c:	fec42783          	lw	x15,-20(x8)
     e70:	00100713          	addi	x14,x0,1
     e74:	00f717b3          	sll	x15,x14,x15
     e78:	00078713          	addi	x14,x15,0
     e7c:	fcc42783          	lw	x15,-52(x8)
     e80:	00f777b3          	and	x15,x14,x15
     e84:	00078863          	beq	x15,x0,e94 <Complete_Handshaking+0x90>
            *p2 = i;    // opcode = 00 -> No Operation ; Only MODULE_ID therefore has to be sent
     e88:	fdc42783          	lw	x15,-36(x8)
     e8c:	fec42703          	lw	x14,-20(x8)
     e90:	00e7a023          	sw	x14,0(x15)
    for(int i = 0; i < NO_MODULES; i++) {
     e94:	fec42783          	lw	x15,-20(x8)
     e98:	00178793          	addi	x15,x15,1
     e9c:	fef42623          	sw	x15,-20(x8)
     ea0:	fec42703          	lw	x14,-20(x8)
     ea4:	00300793          	addi	x15,x0,3
     ea8:	fce7d2e3          	bge	x15,x14,e6c <Complete_Handshaking+0x68>
        }
    }

    // Waiting for the No operation to be reflected in the modules (under operation)
    while( ((*p1) & REQD_DATA_ACCEPTED) != 0 );
     eac:	00000013          	addi	x0,x0,0
     eb0:	fe842783          	lw	x15,-24(x8)
     eb4:	0007a783          	lw	x15,0(x15)
     eb8:	00078713          	addi	x14,x15,0
     ebc:	fcc42783          	lw	x15,-52(x8)
     ec0:	00f777b3          	and	x15,x14,x15
     ec4:	fe0796e3          	bne	x15,x0,eb0 <Complete_Handshaking+0xac>

    return PATTERN_ACCEPTED_STATUS;
     ec8:	fe042783          	lw	x15,-32(x8)
}
     ecc:	00078513          	addi	x10,x15,0
     ed0:	03c12403          	lw	x8,60(x2)
     ed4:	04010113          	addi	x2,x2,64
     ed8:	00008067          	jalr	x0,0(x1)

00000edc <PreProcessAll>:
        patterns[4] - each is a char* string, Ith string is the pattern to be sent to the Ith module. "\0" represents empty pattern (i.e) Ith module need not be used
    Returns :
        An integer which is a bitmask, where Ith place being 1 implies that module was used, 
                                                             0 implies either the module wasn't required or the provided pattern couldn't be processed
 */
int PreProcessAll(char *patterns[NO_MODULES]) {
     edc:	f5010113          	addi	x2,x2,-176
     ee0:	0a112623          	sw	x1,172(x2)
     ee4:	0a812423          	sw	x8,168(x2)
     ee8:	0b010413          	addi	x8,x2,176
     eec:	ffffe337          	lui	x6,0xffffe
     ef0:	00610133          	add	x2,x2,x6
     ef4:	ffffe7b7          	lui	x15,0xffffe
     ef8:	ff040713          	addi	x14,x8,-16
     efc:	00f707b3          	add	x15,x14,x15
     f00:	f6a7a623          	sw	x10,-148(x15) # ffffdf6c <__stack_top+0xffbfdf6c>

    unsigned int INIT[4], ACCEPT[4], EpsBEG[4], EpsEND[4] ,EpsBLK[4];
    unsigned int SELFLOOP[4][256], MOVE[4][256];

    unsigned int REQD_DATA_ACCEPTED = 0;
     f04:	fe042623          	sw	x0,-20(x8)

    for(int i = 0; i < NO_MODULES; i++) {
     f08:	fe042423          	sw	x0,-24(x8)
     f0c:	1180006f          	jal	x0,1024 <PreProcessAll+0x148>
        if(patterns[i][0] != '\0') {
     f10:	fe842783          	lw	x15,-24(x8)
     f14:	00279793          	slli	x15,x15,0x2
     f18:	ffffe737          	lui	x14,0xffffe
     f1c:	ff040693          	addi	x13,x8,-16
     f20:	00e68733          	add	x14,x13,x14
     f24:	f6c72703          	lw	x14,-148(x14) # ffffdf6c <__stack_top+0xffbfdf6c>
     f28:	00f707b3          	add	x15,x14,x15
     f2c:	0007a783          	lw	x15,0(x15)
     f30:	0007c783          	lbu	x15,0(x15)
     f34:	0e078263          	beq	x15,x0,1018 <PreProcessAll+0x13c>
            int ret_code = parseEXT(patterns[i], &INIT[i], &ACCEPT[i], &EpsBEG[i], &EpsEND[i], &EpsBLK[i], MOVE[i], SELFLOOP[i]);
     f38:	fe842783          	lw	x15,-24(x8)
     f3c:	00279793          	slli	x15,x15,0x2
     f40:	ffffe737          	lui	x14,0xffffe
     f44:	ff040693          	addi	x13,x8,-16
     f48:	00e68733          	add	x14,x13,x14
     f4c:	f6c72703          	lw	x14,-148(x14) # ffffdf6c <__stack_top+0xffbfdf6c>
     f50:	00f707b3          	add	x15,x14,x15
     f54:	0007a503          	lw	x10,0(x15)
     f58:	fa840713          	addi	x14,x8,-88
     f5c:	fe842783          	lw	x15,-24(x8)
     f60:	00279793          	slli	x15,x15,0x2
     f64:	00f705b3          	add	x11,x14,x15
     f68:	f9840713          	addi	x14,x8,-104
     f6c:	fe842783          	lw	x15,-24(x8)
     f70:	00279793          	slli	x15,x15,0x2
     f74:	00f70633          	add	x12,x14,x15
     f78:	f8840713          	addi	x14,x8,-120
     f7c:	fe842783          	lw	x15,-24(x8)
     f80:	00279793          	slli	x15,x15,0x2
     f84:	00f706b3          	add	x13,x14,x15
     f88:	f7840713          	addi	x14,x8,-136
     f8c:	fe842783          	lw	x15,-24(x8)
     f90:	00279793          	slli	x15,x15,0x2
     f94:	00f70333          	add	x6,x14,x15
     f98:	f6840713          	addi	x14,x8,-152
     f9c:	fe842783          	lw	x15,-24(x8)
     fa0:	00279793          	slli	x15,x15,0x2
     fa4:	00f70e33          	add	x28,x14,x15
     fa8:	ffffe7b7          	lui	x15,0xffffe
     fac:	f7878793          	addi	x15,x15,-136 # ffffdf78 <__stack_top+0xffbfdf78>
     fb0:	ff040713          	addi	x14,x8,-16
     fb4:	00f70733          	add	x14,x14,x15
     fb8:	fe842783          	lw	x15,-24(x8)
     fbc:	00a79793          	slli	x15,x15,0xa
     fc0:	00f70833          	add	x16,x14,x15
     fc4:	fffff7b7          	lui	x15,0xfffff
     fc8:	f7878793          	addi	x15,x15,-136 # ffffef78 <__stack_top+0xffbfef78>
     fcc:	ff040713          	addi	x14,x8,-16
     fd0:	00f70733          	add	x14,x14,x15
     fd4:	fe842783          	lw	x15,-24(x8)
     fd8:	00a79793          	slli	x15,x15,0xa
     fdc:	00f707b3          	add	x15,x14,x15
     fe0:	00078893          	addi	x17,x15,0
     fe4:	000e0793          	addi	x15,x28,0
     fe8:	00030713          	addi	x14,x6,0 # ffffe000 <__stack_top+0xffbfe000>
     fec:	82cff0ef          	jal	x1,18 <parseEXT>
     ff0:	faa42c23          	sw	x10,-72(x8)
            if(ret_code) {
     ff4:	fb842783          	lw	x15,-72(x8)
     ff8:	02078063          	beq	x15,x0,1018 <PreProcessAll+0x13c>
                REQD_DATA_ACCEPTED |= (1<<i);
     ffc:	fe842783          	lw	x15,-24(x8)
    1000:	00100713          	addi	x14,x0,1
    1004:	00f717b3          	sll	x15,x14,x15
    1008:	00078713          	addi	x14,x15,0
    100c:	fec42783          	lw	x15,-20(x8)
    1010:	00e7e7b3          	or	x15,x15,x14
    1014:	fef42623          	sw	x15,-20(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1018:	fe842783          	lw	x15,-24(x8)
    101c:	00178793          	addi	x15,x15,1
    1020:	fef42423          	sw	x15,-24(x8)
    1024:	fe842703          	lw	x14,-24(x8)
    1028:	00300793          	addi	x15,x0,3
    102c:	eee7d2e3          	bge	x15,x14,f10 <PreProcessAll+0x34>
        }
    }

    // opcode = 1 : Input for preprocessing
    // Writing EpsBEG to peripheral
    int opcode = 1, address = (1<<12);
    1030:	00100793          	addi	x15,x0,1
    1034:	fcf42023          	sw	x15,-64(x8)
    1038:	000017b7          	lui	x15,0x1
    103c:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1040:	fe042223          	sw	x0,-28(x8)
    1044:	05c0006f          	jal	x0,10a0 <PreProcessAll+0x1c4>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    1048:	fe442783          	lw	x15,-28(x8)
    104c:	00100713          	addi	x14,x0,1
    1050:	00f717b3          	sll	x15,x14,x15
    1054:	00078713          	addi	x14,x15,0 # 1000 <PreProcessAll+0x124>
    1058:	fec42783          	lw	x15,-20(x8)
    105c:	00f777b3          	and	x15,x14,x15
    1060:	02078a63          	beq	x15,x0,1094 <PreProcessAll+0x1b8>
            Input1_2(EpsBEG[i], 1);
    1064:	fe442783          	lw	x15,-28(x8)
    1068:	00279793          	slli	x15,x15,0x2
    106c:	ff040713          	addi	x14,x8,-16
    1070:	00f707b3          	add	x15,x14,x15
    1074:	f987a783          	lw	x15,-104(x15)
    1078:	00100593          	addi	x11,x0,1
    107c:	00078513          	addi	x10,x15,0
    1080:	c75ff0ef          	jal	x1,cf4 <Input1_2>
            Input3(opcode, address, i);
    1084:	fe442603          	lw	x12,-28(x8)
    1088:	fbc42583          	lw	x11,-68(x8)
    108c:	fc042503          	lw	x10,-64(x8)
    1090:	d1dff0ef          	jal	x1,dac <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    1094:	fe442783          	lw	x15,-28(x8)
    1098:	00178793          	addi	x15,x15,1
    109c:	fef42223          	sw	x15,-28(x8)
    10a0:	fe442703          	lw	x14,-28(x8)
    10a4:	00300793          	addi	x15,x0,3
    10a8:	fae7d0e3          	bge	x15,x14,1048 <PreProcessAll+0x16c>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    10ac:	fec42503          	lw	x10,-20(x8)
    10b0:	d55ff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing EpsBLK to peripheral
    opcode = 1, address = (1<<12) + 4;
    10b4:	00100793          	addi	x15,x0,1
    10b8:	fcf42023          	sw	x15,-64(x8)
    10bc:	000017b7          	lui	x15,0x1
    10c0:	00478793          	addi	x15,x15,4 # 1004 <PreProcessAll+0x128>
    10c4:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    10c8:	fe042023          	sw	x0,-32(x8)
    10cc:	05c0006f          	jal	x0,1128 <PreProcessAll+0x24c>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    10d0:	fe042783          	lw	x15,-32(x8)
    10d4:	00100713          	addi	x14,x0,1
    10d8:	00f717b3          	sll	x15,x14,x15
    10dc:	00078713          	addi	x14,x15,0
    10e0:	fec42783          	lw	x15,-20(x8)
    10e4:	00f777b3          	and	x15,x14,x15
    10e8:	02078a63          	beq	x15,x0,111c <PreProcessAll+0x240>
            Input1_2(EpsBLK[i], 1);
    10ec:	fe042783          	lw	x15,-32(x8)
    10f0:	00279793          	slli	x15,x15,0x2
    10f4:	ff040713          	addi	x14,x8,-16
    10f8:	00f707b3          	add	x15,x14,x15
    10fc:	f787a783          	lw	x15,-136(x15)
    1100:	00100593          	addi	x11,x0,1
    1104:	00078513          	addi	x10,x15,0
    1108:	bedff0ef          	jal	x1,cf4 <Input1_2>
            Input3(opcode, address, i);
    110c:	fe042603          	lw	x12,-32(x8)
    1110:	fbc42583          	lw	x11,-68(x8)
    1114:	fc042503          	lw	x10,-64(x8)
    1118:	c95ff0ef          	jal	x1,dac <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    111c:	fe042783          	lw	x15,-32(x8)
    1120:	00178793          	addi	x15,x15,1
    1124:	fef42023          	sw	x15,-32(x8)
    1128:	fe042703          	lw	x14,-32(x8)
    112c:	00300793          	addi	x15,x0,3
    1130:	fae7d0e3          	bge	x15,x14,10d0 <PreProcessAll+0x1f4>
        }
    }

    // Writing EpsEND to peripheral
    opcode = 1, address = (1<<12) + 8;
    1134:	00100793          	addi	x15,x0,1
    1138:	fcf42023          	sw	x15,-64(x8)
    113c:	000017b7          	lui	x15,0x1
    1140:	00878793          	addi	x15,x15,8 # 1008 <PreProcessAll+0x12c>
    1144:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1148:	fc042e23          	sw	x0,-36(x8)
    114c:	05c0006f          	jal	x0,11a8 <PreProcessAll+0x2cc>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    1150:	fdc42783          	lw	x15,-36(x8)
    1154:	00100713          	addi	x14,x0,1
    1158:	00f717b3          	sll	x15,x14,x15
    115c:	00078713          	addi	x14,x15,0
    1160:	fec42783          	lw	x15,-20(x8)
    1164:	00f777b3          	and	x15,x14,x15
    1168:	02078a63          	beq	x15,x0,119c <PreProcessAll+0x2c0>
            Input1_2(EpsEND[i], 1);
    116c:	fdc42783          	lw	x15,-36(x8)
    1170:	00279793          	slli	x15,x15,0x2
    1174:	ff040713          	addi	x14,x8,-16
    1178:	00f707b3          	add	x15,x14,x15
    117c:	f887a783          	lw	x15,-120(x15)
    1180:	00100593          	addi	x11,x0,1
    1184:	00078513          	addi	x10,x15,0
    1188:	b6dff0ef          	jal	x1,cf4 <Input1_2>
            Input3(opcode, address, i);
    118c:	fdc42603          	lw	x12,-36(x8)
    1190:	fbc42583          	lw	x11,-68(x8)
    1194:	fc042503          	lw	x10,-64(x8)
    1198:	c15ff0ef          	jal	x1,dac <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    119c:	fdc42783          	lw	x15,-36(x8)
    11a0:	00178793          	addi	x15,x15,1
    11a4:	fcf42e23          	sw	x15,-36(x8)
    11a8:	fdc42703          	lw	x14,-36(x8)
    11ac:	00300793          	addi	x15,x0,3
    11b0:	fae7d0e3          	bge	x15,x14,1150 <PreProcessAll+0x274>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    11b4:	fec42503          	lw	x10,-20(x8)
    11b8:	c4dff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing INIT to peripheral
    opcode = 1, address = (1<<12) + 12;
    11bc:	00100793          	addi	x15,x0,1
    11c0:	fcf42023          	sw	x15,-64(x8)
    11c4:	000017b7          	lui	x15,0x1
    11c8:	00c78793          	addi	x15,x15,12 # 100c <PreProcessAll+0x130>
    11cc:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    11d0:	fc042c23          	sw	x0,-40(x8)
    11d4:	05c0006f          	jal	x0,1230 <PreProcessAll+0x354>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    11d8:	fd842783          	lw	x15,-40(x8)
    11dc:	00100713          	addi	x14,x0,1
    11e0:	00f717b3          	sll	x15,x14,x15
    11e4:	00078713          	addi	x14,x15,0
    11e8:	fec42783          	lw	x15,-20(x8)
    11ec:	00f777b3          	and	x15,x14,x15
    11f0:	02078a63          	beq	x15,x0,1224 <PreProcessAll+0x348>
            Input1_2(INIT[i], 1);
    11f4:	fd842783          	lw	x15,-40(x8)
    11f8:	00279793          	slli	x15,x15,0x2
    11fc:	ff040713          	addi	x14,x8,-16
    1200:	00f707b3          	add	x15,x14,x15
    1204:	fb87a783          	lw	x15,-72(x15)
    1208:	00100593          	addi	x11,x0,1
    120c:	00078513          	addi	x10,x15,0
    1210:	ae5ff0ef          	jal	x1,cf4 <Input1_2>
            Input3(opcode, address, i);
    1214:	fd842603          	lw	x12,-40(x8)
    1218:	fbc42583          	lw	x11,-68(x8)
    121c:	fc042503          	lw	x10,-64(x8)
    1220:	b8dff0ef          	jal	x1,dac <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    1224:	fd842783          	lw	x15,-40(x8)
    1228:	00178793          	addi	x15,x15,1
    122c:	fcf42c23          	sw	x15,-40(x8)
    1230:	fd842703          	lw	x14,-40(x8)
    1234:	00300793          	addi	x15,x0,3
    1238:	fae7d0e3          	bge	x15,x14,11d8 <PreProcessAll+0x2fc>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    123c:	fec42503          	lw	x10,-20(x8)
    1240:	bc5ff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing ACCEPT to peripheral
    opcode = 1, address = (1<<12) + 16;
    1244:	00100793          	addi	x15,x0,1
    1248:	fcf42023          	sw	x15,-64(x8)
    124c:	000017b7          	lui	x15,0x1
    1250:	01078793          	addi	x15,x15,16 # 1010 <PreProcessAll+0x134>
    1254:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1258:	fc042a23          	sw	x0,-44(x8)
    125c:	05c0006f          	jal	x0,12b8 <PreProcessAll+0x3dc>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    1260:	fd442783          	lw	x15,-44(x8)
    1264:	00100713          	addi	x14,x0,1
    1268:	00f717b3          	sll	x15,x14,x15
    126c:	00078713          	addi	x14,x15,0
    1270:	fec42783          	lw	x15,-20(x8)
    1274:	00f777b3          	and	x15,x14,x15
    1278:	02078a63          	beq	x15,x0,12ac <PreProcessAll+0x3d0>
            Input1_2(ACCEPT[i], 1);
    127c:	fd442783          	lw	x15,-44(x8)
    1280:	00279793          	slli	x15,x15,0x2
    1284:	ff040713          	addi	x14,x8,-16
    1288:	00f707b3          	add	x15,x14,x15
    128c:	fa87a783          	lw	x15,-88(x15)
    1290:	00100593          	addi	x11,x0,1
    1294:	00078513          	addi	x10,x15,0
    1298:	a5dff0ef          	jal	x1,cf4 <Input1_2>
            Input3(opcode, address, i);
    129c:	fd442603          	lw	x12,-44(x8)
    12a0:	fbc42583          	lw	x11,-68(x8)
    12a4:	fc042503          	lw	x10,-64(x8)
    12a8:	b05ff0ef          	jal	x1,dac <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    12ac:	fd442783          	lw	x15,-44(x8)
    12b0:	00178793          	addi	x15,x15,1
    12b4:	fcf42a23          	sw	x15,-44(x8)
    12b8:	fd442703          	lw	x14,-44(x8)
    12bc:	00300793          	addi	x15,x0,3
    12c0:	fae7d0e3          	bge	x15,x14,1260 <PreProcessAll+0x384>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    12c4:	fec42503          	lw	x10,-20(x8)
    12c8:	b3dff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing SELFLOOP to peripheral
    opcode = 1;
    12cc:	00100793          	addi	x15,x0,1
    12d0:	fcf42023          	sw	x15,-64(x8)
    for(int j = 0; j < 256; j++) {
    12d4:	fc042823          	sw	x0,-48(x8)
    12d8:	0a40006f          	jal	x0,137c <PreProcessAll+0x4a0>

        address = (j<<2);
    12dc:	fd042783          	lw	x15,-48(x8)
    12e0:	00279793          	slli	x15,x15,0x2
    12e4:	faf42e23          	sw	x15,-68(x8)
        for(int i = 0; i < NO_MODULES; i++) {
    12e8:	fc042623          	sw	x0,-52(x8)
    12ec:	0700006f          	jal	x0,135c <PreProcessAll+0x480>
            if(REQD_DATA_ACCEPTED & (1<<i)) {
    12f0:	fcc42783          	lw	x15,-52(x8)
    12f4:	00100713          	addi	x14,x0,1
    12f8:	00f717b3          	sll	x15,x14,x15
    12fc:	00078713          	addi	x14,x15,0
    1300:	fec42783          	lw	x15,-20(x8)
    1304:	00f777b3          	and	x15,x14,x15
    1308:	04078463          	beq	x15,x0,1350 <PreProcessAll+0x474>
                Input1_2(SELFLOOP[i][j], 1);
    130c:	fffff7b7          	lui	x15,0xfffff
    1310:	ff040713          	addi	x14,x8,-16
    1314:	00f70733          	add	x14,x14,x15
    1318:	fcc42783          	lw	x15,-52(x8)
    131c:	00879693          	slli	x13,x15,0x8
    1320:	fd042783          	lw	x15,-48(x8)
    1324:	00f687b3          	add	x15,x13,x15
    1328:	00279793          	slli	x15,x15,0x2
    132c:	00f707b3          	add	x15,x14,x15
    1330:	f787a783          	lw	x15,-136(x15) # ffffef78 <__stack_top+0xffbfef78>
    1334:	00100593          	addi	x11,x0,1
    1338:	00078513          	addi	x10,x15,0
    133c:	9b9ff0ef          	jal	x1,cf4 <Input1_2>
                Input3(opcode, address, i);
    1340:	fcc42603          	lw	x12,-52(x8)
    1344:	fbc42583          	lw	x11,-68(x8)
    1348:	fc042503          	lw	x10,-64(x8)
    134c:	a61ff0ef          	jal	x1,dac <Input3>
        for(int i = 0; i < NO_MODULES; i++) {
    1350:	fcc42783          	lw	x15,-52(x8)
    1354:	00178793          	addi	x15,x15,1
    1358:	fcf42623          	sw	x15,-52(x8)
    135c:	fcc42703          	lw	x14,-52(x8)
    1360:	00300793          	addi	x15,x0,3
    1364:	f8e7d6e3          	bge	x15,x14,12f0 <PreProcessAll+0x414>
            }
        }

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    1368:	fec42503          	lw	x10,-20(x8)
    136c:	a99ff0ef          	jal	x1,e04 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    1370:	fd042783          	lw	x15,-48(x8)
    1374:	00178793          	addi	x15,x15,1
    1378:	fcf42823          	sw	x15,-48(x8)
    137c:	fd042703          	lw	x14,-48(x8)
    1380:	0ff00793          	addi	x15,x0,255
    1384:	f4e7dce3          	bge	x15,x14,12dc <PreProcessAll+0x400>

    }

    // Writing MOVE to peripheral
    opcode = 1;
    1388:	00100793          	addi	x15,x0,1
    138c:	fcf42023          	sw	x15,-64(x8)
    for(int j = 0; j < 256; j++) {
    1390:	fc042423          	sw	x0,-56(x8)
    1394:	0b00006f          	jal	x0,1444 <PreProcessAll+0x568>

        address = (1<<11) + (j<<2);
    1398:	fc842783          	lw	x15,-56(x8)
    139c:	00279713          	slli	x14,x15,0x2
    13a0:	000017b7          	lui	x15,0x1
    13a4:	80078793          	addi	x15,x15,-2048 # 800 <parseEXT+0x7e8>
    13a8:	00f707b3          	add	x15,x14,x15
    13ac:	faf42e23          	sw	x15,-68(x8)
        for(int i = 0; i < NO_MODULES; i++) {
    13b0:	fc042223          	sw	x0,-60(x8)
    13b4:	0700006f          	jal	x0,1424 <PreProcessAll+0x548>
            if(REQD_DATA_ACCEPTED & (1<<i)) {
    13b8:	fc442783          	lw	x15,-60(x8)
    13bc:	00100713          	addi	x14,x0,1
    13c0:	00f717b3          	sll	x15,x14,x15
    13c4:	00078713          	addi	x14,x15,0
    13c8:	fec42783          	lw	x15,-20(x8)
    13cc:	00f777b3          	and	x15,x14,x15
    13d0:	04078463          	beq	x15,x0,1418 <PreProcessAll+0x53c>
                Input1_2(MOVE[i][j], 1);
    13d4:	ffffe7b7          	lui	x15,0xffffe
    13d8:	ff040713          	addi	x14,x8,-16
    13dc:	00f70733          	add	x14,x14,x15
    13e0:	fc442783          	lw	x15,-60(x8)
    13e4:	00879693          	slli	x13,x15,0x8
    13e8:	fc842783          	lw	x15,-56(x8)
    13ec:	00f687b3          	add	x15,x13,x15
    13f0:	00279793          	slli	x15,x15,0x2
    13f4:	00f707b3          	add	x15,x14,x15
    13f8:	f787a783          	lw	x15,-136(x15) # ffffdf78 <__stack_top+0xffbfdf78>
    13fc:	00100593          	addi	x11,x0,1
    1400:	00078513          	addi	x10,x15,0
    1404:	8f1ff0ef          	jal	x1,cf4 <Input1_2>
                Input3(opcode, address, i);
    1408:	fc442603          	lw	x12,-60(x8)
    140c:	fbc42583          	lw	x11,-68(x8)
    1410:	fc042503          	lw	x10,-64(x8)
    1414:	999ff0ef          	jal	x1,dac <Input3>
        for(int i = 0; i < NO_MODULES; i++) {
    1418:	fc442783          	lw	x15,-60(x8)
    141c:	00178793          	addi	x15,x15,1
    1420:	fcf42223          	sw	x15,-60(x8)
    1424:	fc442703          	lw	x14,-60(x8)
    1428:	00300793          	addi	x15,x0,3
    142c:	f8e7d6e3          	bge	x15,x14,13b8 <PreProcessAll+0x4dc>
            }
        }

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    1430:	fec42503          	lw	x10,-20(x8)
    1434:	9d1ff0ef          	jal	x1,e04 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    1438:	fc842783          	lw	x15,-56(x8)
    143c:	00178793          	addi	x15,x15,1
    1440:	fcf42423          	sw	x15,-56(x8)
    1444:	fc842703          	lw	x14,-56(x8)
    1448:	0ff00793          	addi	x15,x0,255
    144c:	f4e7d6e3          	bge	x15,x14,1398 <PreProcessAll+0x4bc>

    }

    return REQD_DATA_ACCEPTED;
    1450:	fec42783          	lw	x15,-20(x8)
    
}
    1454:	00078513          	addi	x10,x15,0
    1458:	00002337          	lui	x6,0x2
    145c:	00610133          	add	x2,x2,x6
    1460:	0ac12083          	lw	x1,172(x2)
    1464:	0a812403          	lw	x8,168(x2)
    1468:	0b010113          	addi	x2,x2,176
    146c:	00008067          	jalr	x0,0(x1)

00001470 <PreProcess>:
        module - integer representing the module number to be targetted
    Returns :
        An integer - 1 implies that module was used, 
                     0 implies either the module wasn't required or the provided pattern couldn't be processed
*/
int PreProcess(char *pattern, int module) {
    1470:	81010113          	addi	x2,x2,-2032
    1474:	7e112623          	sw	x1,2028(x2)
    1478:	7e812423          	sw	x8,2024(x2)
    147c:	7f010413          	addi	x8,x2,2032
    1480:	fa010113          	addi	x2,x2,-96
    1484:	fffff7b7          	lui	x15,0xfffff
    1488:	ff040713          	addi	x14,x8,-16
    148c:	00f707b3          	add	x15,x14,x15
    1490:	7ca7a623          	sw	x10,1996(x15) # fffff7cc <__stack_top+0xffbff7cc>
    1494:	fffff7b7          	lui	x15,0xfffff
    1498:	ff040713          	addi	x14,x8,-16
    149c:	00f707b3          	add	x15,x14,x15
    14a0:	7cb7a423          	sw	x11,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>

    unsigned int INIT, ACCEPT, EpsBEG, EpsEND ,EpsBLK;
    unsigned int SELFLOOP[256], MOVE[256];

    if(pattern[0] == '\0') return 0;
    14a4:	fffff7b7          	lui	x15,0xfffff
    14a8:	ff040713          	addi	x14,x8,-16
    14ac:	00f707b3          	add	x15,x14,x15
    14b0:	7cc7a783          	lw	x15,1996(x15) # fffff7cc <__stack_top+0xffbff7cc>
    14b4:	0007c783          	lbu	x15,0(x15)
    14b8:	00079663          	bne	x15,x0,14c4 <PreProcess+0x54>
    14bc:	00000793          	addi	x15,x0,0
    14c0:	34c0006f          	jal	x0,180c <PreProcess+0x39c>
    int ret_code = parseEXT(pattern, &INIT, &ACCEPT, &EpsBEG, &EpsEND, &EpsBLK, MOVE, SELFLOOP);
    14c4:	bc840893          	addi	x17,x8,-1080
    14c8:	fffff7b7          	lui	x15,0xfffff
    14cc:	7d878793          	addi	x15,x15,2008 # fffff7d8 <__stack_top+0xffbff7d8>
    14d0:	ff040713          	addi	x14,x8,-16
    14d4:	00f70833          	add	x16,x14,x15
    14d8:	fc840313          	addi	x6,x8,-56
    14dc:	fcc40713          	addi	x14,x8,-52
    14e0:	fd040693          	addi	x13,x8,-48
    14e4:	fd440613          	addi	x12,x8,-44
    14e8:	fd840593          	addi	x11,x8,-40
    14ec:	fffff7b7          	lui	x15,0xfffff
    14f0:	ff040513          	addi	x10,x8,-16
    14f4:	00f50533          	add	x10,x10,x15
    14f8:	00030793          	addi	x15,x6,0 # 2000 <main+0x334>
    14fc:	7cc52503          	lw	x10,1996(x10)
    1500:	b19fe0ef          	jal	x1,18 <parseEXT>
    1504:	fea42223          	sw	x10,-28(x8)
    if(!ret_code) return 0;
    1508:	fe442783          	lw	x15,-28(x8)
    150c:	00079663          	bne	x15,x0,1518 <PreProcess+0xa8>
    1510:	00000793          	addi	x15,x0,0
    1514:	2f80006f          	jal	x0,180c <PreProcess+0x39c>

    // opcode = 1 : Input for preprocessing
    // Writing EpsBEG to peripheral
    int opcode = 1, address = (1<<12);
    1518:	00100793          	addi	x15,x0,1
    151c:	fef42023          	sw	x15,-32(x8)
    1520:	000017b7          	lui	x15,0x1
    1524:	fcf42e23          	sw	x15,-36(x8)
    Input1_2(EpsBEG, 1);
    1528:	fd042783          	lw	x15,-48(x8)
    152c:	00100593          	addi	x11,x0,1
    1530:	00078513          	addi	x10,x15,0 # 1000 <PreProcessAll+0x124>
    1534:	fc0ff0ef          	jal	x1,cf4 <Input1_2>
    Input3(opcode, address, module);
    1538:	fffff7b7          	lui	x15,0xfffff
    153c:	ff040713          	addi	x14,x8,-16
    1540:	00f707b3          	add	x15,x14,x15
    1544:	7c87a603          	lw	x12,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    1548:	fdc42583          	lw	x11,-36(x8)
    154c:	fe042503          	lw	x10,-32(x8)
    1550:	85dff0ef          	jal	x1,dac <Input3>

    Complete_Handshaking(1<<module);
    1554:	fffff7b7          	lui	x15,0xfffff
    1558:	ff040713          	addi	x14,x8,-16
    155c:	00f707b3          	add	x15,x14,x15
    1560:	7c87a783          	lw	x15,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    1564:	00100713          	addi	x14,x0,1
    1568:	00f717b3          	sll	x15,x14,x15
    156c:	00078513          	addi	x10,x15,0
    1570:	895ff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing EpsBLK to peripheral
    opcode = 1, address = (1<<12) + 4;
    1574:	00100793          	addi	x15,x0,1
    1578:	fef42023          	sw	x15,-32(x8)
    157c:	000017b7          	lui	x15,0x1
    1580:	00478793          	addi	x15,x15,4 # 1004 <PreProcessAll+0x128>
    1584:	fcf42e23          	sw	x15,-36(x8)
    Input1_2(EpsBLK, 1);
    1588:	fc842783          	lw	x15,-56(x8)
    158c:	00100593          	addi	x11,x0,1
    1590:	00078513          	addi	x10,x15,0
    1594:	f60ff0ef          	jal	x1,cf4 <Input1_2>
    Input3(opcode, address, module);
    1598:	fffff7b7          	lui	x15,0xfffff
    159c:	ff040713          	addi	x14,x8,-16
    15a0:	00f707b3          	add	x15,x14,x15
    15a4:	7c87a603          	lw	x12,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    15a8:	fdc42583          	lw	x11,-36(x8)
    15ac:	fe042503          	lw	x10,-32(x8)
    15b0:	ffcff0ef          	jal	x1,dac <Input3>

    // Writing EpsEND to peripheral
    opcode = 1, address = (1<<12) + 8;
    15b4:	00100793          	addi	x15,x0,1
    15b8:	fef42023          	sw	x15,-32(x8)
    15bc:	000017b7          	lui	x15,0x1
    15c0:	00878793          	addi	x15,x15,8 # 1008 <PreProcessAll+0x12c>
    15c4:	fcf42e23          	sw	x15,-36(x8)
    Input1_2(EpsEND, 1);
    15c8:	fcc42783          	lw	x15,-52(x8)
    15cc:	00100593          	addi	x11,x0,1
    15d0:	00078513          	addi	x10,x15,0
    15d4:	f20ff0ef          	jal	x1,cf4 <Input1_2>
    Input3(opcode, address, module);
    15d8:	fffff7b7          	lui	x15,0xfffff
    15dc:	ff040713          	addi	x14,x8,-16
    15e0:	00f707b3          	add	x15,x14,x15
    15e4:	7c87a603          	lw	x12,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    15e8:	fdc42583          	lw	x11,-36(x8)
    15ec:	fe042503          	lw	x10,-32(x8)
    15f0:	fbcff0ef          	jal	x1,dac <Input3>

    Complete_Handshaking(1<<module);
    15f4:	fffff7b7          	lui	x15,0xfffff
    15f8:	ff040713          	addi	x14,x8,-16
    15fc:	00f707b3          	add	x15,x14,x15
    1600:	7c87a783          	lw	x15,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    1604:	00100713          	addi	x14,x0,1
    1608:	00f717b3          	sll	x15,x14,x15
    160c:	00078513          	addi	x10,x15,0
    1610:	ff4ff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing INIT to peripheral
    opcode = 1, address = (1<<12) + 12;
    1614:	00100793          	addi	x15,x0,1
    1618:	fef42023          	sw	x15,-32(x8)
    161c:	000017b7          	lui	x15,0x1
    1620:	00c78793          	addi	x15,x15,12 # 100c <PreProcessAll+0x130>
    1624:	fcf42e23          	sw	x15,-36(x8)
    Input1_2(INIT, 1);
    1628:	fd842783          	lw	x15,-40(x8)
    162c:	00100593          	addi	x11,x0,1
    1630:	00078513          	addi	x10,x15,0
    1634:	ec0ff0ef          	jal	x1,cf4 <Input1_2>
    Input3(opcode, address, module);
    1638:	fffff7b7          	lui	x15,0xfffff
    163c:	ff040713          	addi	x14,x8,-16
    1640:	00f707b3          	add	x15,x14,x15
    1644:	7c87a603          	lw	x12,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    1648:	fdc42583          	lw	x11,-36(x8)
    164c:	fe042503          	lw	x10,-32(x8)
    1650:	f5cff0ef          	jal	x1,dac <Input3>

    Complete_Handshaking(1<<module);
    1654:	fffff7b7          	lui	x15,0xfffff
    1658:	ff040713          	addi	x14,x8,-16
    165c:	00f707b3          	add	x15,x14,x15
    1660:	7c87a783          	lw	x15,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    1664:	00100713          	addi	x14,x0,1
    1668:	00f717b3          	sll	x15,x14,x15
    166c:	00078513          	addi	x10,x15,0
    1670:	f94ff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing ACCEPT to peripheral
    opcode = 1, address = (1<<12) + 16;
    1674:	00100793          	addi	x15,x0,1
    1678:	fef42023          	sw	x15,-32(x8)
    167c:	000017b7          	lui	x15,0x1
    1680:	01078793          	addi	x15,x15,16 # 1010 <PreProcessAll+0x134>
    1684:	fcf42e23          	sw	x15,-36(x8)
    Input1_2(ACCEPT, 1);
    1688:	fd442783          	lw	x15,-44(x8)
    168c:	00100593          	addi	x11,x0,1
    1690:	00078513          	addi	x10,x15,0
    1694:	e60ff0ef          	jal	x1,cf4 <Input1_2>
    Input3(opcode, address, module);
    1698:	fffff7b7          	lui	x15,0xfffff
    169c:	ff040713          	addi	x14,x8,-16
    16a0:	00f707b3          	add	x15,x14,x15
    16a4:	7c87a603          	lw	x12,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    16a8:	fdc42583          	lw	x11,-36(x8)
    16ac:	fe042503          	lw	x10,-32(x8)
    16b0:	efcff0ef          	jal	x1,dac <Input3>

    Complete_Handshaking(1<<module);
    16b4:	fffff7b7          	lui	x15,0xfffff
    16b8:	ff040713          	addi	x14,x8,-16
    16bc:	00f707b3          	add	x15,x14,x15
    16c0:	7c87a783          	lw	x15,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    16c4:	00100713          	addi	x14,x0,1
    16c8:	00f717b3          	sll	x15,x14,x15
    16cc:	00078513          	addi	x10,x15,0
    16d0:	f34ff0ef          	jal	x1,e04 <Complete_Handshaking>

    // Writing SELFLOOP to peripheral
    opcode = 1;
    16d4:	00100793          	addi	x15,x0,1
    16d8:	fef42023          	sw	x15,-32(x8)
    for(int j = 0; j < 256; j++) {
    16dc:	fe042623          	sw	x0,-20(x8)
    16e0:	0780006f          	jal	x0,1758 <PreProcess+0x2e8>

        address = (j<<3);
    16e4:	fec42783          	lw	x15,-20(x8)
    16e8:	00379793          	slli	x15,x15,0x3
    16ec:	fcf42e23          	sw	x15,-36(x8)
        Input1_2(SELFLOOP[j], 1);
    16f0:	fec42783          	lw	x15,-20(x8)
    16f4:	00279793          	slli	x15,x15,0x2
    16f8:	ff040713          	addi	x14,x8,-16
    16fc:	00f707b3          	add	x15,x14,x15
    1700:	bd87a783          	lw	x15,-1064(x15)
    1704:	00100593          	addi	x11,x0,1
    1708:	00078513          	addi	x10,x15,0
    170c:	de8ff0ef          	jal	x1,cf4 <Input1_2>
        Input3(opcode, address, module);
    1710:	fffff7b7          	lui	x15,0xfffff
    1714:	ff040713          	addi	x14,x8,-16
    1718:	00f707b3          	add	x15,x14,x15
    171c:	7c87a603          	lw	x12,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    1720:	fdc42583          	lw	x11,-36(x8)
    1724:	fe042503          	lw	x10,-32(x8)
    1728:	e84ff0ef          	jal	x1,dac <Input3>

        Complete_Handshaking(1<<module);
    172c:	fffff7b7          	lui	x15,0xfffff
    1730:	ff040713          	addi	x14,x8,-16
    1734:	00f707b3          	add	x15,x14,x15
    1738:	7c87a783          	lw	x15,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    173c:	00100713          	addi	x14,x0,1
    1740:	00f717b3          	sll	x15,x14,x15
    1744:	00078513          	addi	x10,x15,0
    1748:	ebcff0ef          	jal	x1,e04 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    174c:	fec42783          	lw	x15,-20(x8)
    1750:	00178793          	addi	x15,x15,1
    1754:	fef42623          	sw	x15,-20(x8)
    1758:	fec42703          	lw	x14,-20(x8)
    175c:	0ff00793          	addi	x15,x0,255
    1760:	f8e7d2e3          	bge	x15,x14,16e4 <PreProcess+0x274>

    }

    // Writing MOVE to peripheral
    opcode = 1;
    1764:	00100793          	addi	x15,x0,1
    1768:	fef42023          	sw	x15,-32(x8)
    for(int j = 0; j < 256; j++) {
    176c:	fe042423          	sw	x0,-24(x8)
    1770:	08c0006f          	jal	x0,17fc <PreProcess+0x38c>

        address = (1<<11) + (j<<3);
    1774:	fe842783          	lw	x15,-24(x8)
    1778:	00379713          	slli	x14,x15,0x3
    177c:	000017b7          	lui	x15,0x1
    1780:	80078793          	addi	x15,x15,-2048 # 800 <parseEXT+0x7e8>
    1784:	00f707b3          	add	x15,x14,x15
    1788:	fcf42e23          	sw	x15,-36(x8)
        Input1_2(MOVE[j], 1);
    178c:	fffff7b7          	lui	x15,0xfffff
    1790:	ff040713          	addi	x14,x8,-16
    1794:	00f70733          	add	x14,x14,x15
    1798:	fe842783          	lw	x15,-24(x8)
    179c:	00279793          	slli	x15,x15,0x2
    17a0:	00f707b3          	add	x15,x14,x15
    17a4:	7d87a783          	lw	x15,2008(x15) # fffff7d8 <__stack_top+0xffbff7d8>
    17a8:	00100593          	addi	x11,x0,1
    17ac:	00078513          	addi	x10,x15,0
    17b0:	d44ff0ef          	jal	x1,cf4 <Input1_2>
        Input3(opcode, address, module);
    17b4:	fffff7b7          	lui	x15,0xfffff
    17b8:	ff040713          	addi	x14,x8,-16
    17bc:	00f707b3          	add	x15,x14,x15
    17c0:	7c87a603          	lw	x12,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    17c4:	fdc42583          	lw	x11,-36(x8)
    17c8:	fe042503          	lw	x10,-32(x8)
    17cc:	de0ff0ef          	jal	x1,dac <Input3>

        Complete_Handshaking(1<<module);
    17d0:	fffff7b7          	lui	x15,0xfffff
    17d4:	ff040713          	addi	x14,x8,-16
    17d8:	00f707b3          	add	x15,x14,x15
    17dc:	7c87a783          	lw	x15,1992(x15) # fffff7c8 <__stack_top+0xffbff7c8>
    17e0:	00100713          	addi	x14,x0,1
    17e4:	00f717b3          	sll	x15,x14,x15
    17e8:	00078513          	addi	x10,x15,0
    17ec:	e18ff0ef          	jal	x1,e04 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    17f0:	fe842783          	lw	x15,-24(x8)
    17f4:	00178793          	addi	x15,x15,1
    17f8:	fef42423          	sw	x15,-24(x8)
    17fc:	fe842703          	lw	x14,-24(x8)
    1800:	0ff00793          	addi	x15,x0,255
    1804:	f6e7d8e3          	bge	x15,x14,1774 <PreProcess+0x304>

    }

    return 1;
    1808:	00100793          	addi	x15,x0,1

}
    180c:	00078513          	addi	x10,x15,0
    1810:	06010113          	addi	x2,x2,96
    1814:	7ec12083          	lw	x1,2028(x2)
    1818:	7e812403          	lw	x8,2024(x2)
    181c:	7f010113          	addi	x2,x2,2032
    1820:	00008067          	jalr	x0,0(x1)

00001824 <SimulateNFA_All>:
        text_char - char array where Ith character is the text character to be sent to the Ith module. "\0" represents empty pattern (i.e) Ith module need not be used
    Returns :
        An integer which is a bitmask, where Ith place being 1 implies the text (entered till now) has matched the pattern in that module, 
                                                             0 implies either the module didn't process anything, or the text hasn't matched the pattern yet
*/
int SimulateNFA_All(char text_chars[NO_MODULES]) {
    1824:	fd010113          	addi	x2,x2,-48
    1828:	02112623          	sw	x1,44(x2)
    182c:	02812423          	sw	x8,40(x2)
    1830:	03010413          	addi	x8,x2,48
    1834:	fca42e23          	sw	x10,-36(x8)

    unsigned int TARGET_MODULES = 0;
    1838:	fe042623          	sw	x0,-20(x8)

    for(int i = 0; i < NO_MODULES; i++) {
    183c:	fe042423          	sw	x0,-24(x8)
    1840:	06c0006f          	jal	x0,18ac <SimulateNFA_All+0x88>
        if(text_chars[i] != '\0') {
    1844:	fe842783          	lw	x15,-24(x8)
    1848:	fdc42703          	lw	x14,-36(x8)
    184c:	00f707b3          	add	x15,x14,x15
    1850:	0007c783          	lbu	x15,0(x15)
    1854:	04078663          	beq	x15,x0,18a0 <SimulateNFA_All+0x7c>
            TARGET_MODULES |= (1<<i);
    1858:	fe842783          	lw	x15,-24(x8)
    185c:	00100713          	addi	x14,x0,1
    1860:	00f717b3          	sll	x15,x14,x15
    1864:	00078713          	addi	x14,x15,0
    1868:	fec42783          	lw	x15,-20(x8)
    186c:	00e7e7b3          	or	x15,x15,x14
    1870:	fef42623          	sw	x15,-20(x8)
            Input1_2((int)text_chars[i], 1);
    1874:	fe842783          	lw	x15,-24(x8)
    1878:	fdc42703          	lw	x14,-36(x8)
    187c:	00f707b3          	add	x15,x14,x15
    1880:	0007c783          	lbu	x15,0(x15)
    1884:	00100593          	addi	x11,x0,1
    1888:	00078513          	addi	x10,x15,0
    188c:	c68ff0ef          	jal	x1,cf4 <Input1_2>
            // opcode = 2 : Input for simulating NFA; address : dont care
            Input3(2, 0, i);
    1890:	fe842603          	lw	x12,-24(x8)
    1894:	00000593          	addi	x11,x0,0
    1898:	00200513          	addi	x10,x0,2
    189c:	d10ff0ef          	jal	x1,dac <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    18a0:	fe842783          	lw	x15,-24(x8)
    18a4:	00178793          	addi	x15,x15,1
    18a8:	fef42423          	sw	x15,-24(x8)
    18ac:	fe842703          	lw	x14,-24(x8)
    18b0:	00300793          	addi	x15,x0,3
    18b4:	f8e7d8e3          	bge	x15,x14,1844 <SimulateNFA_All+0x20>
        }
    }

    unsigned int PATTERN_ACCEPTED_STATUS = Complete_Handshaking(TARGET_MODULES);
    18b8:	fec42503          	lw	x10,-20(x8)
    18bc:	d48ff0ef          	jal	x1,e04 <Complete_Handshaking>
    18c0:	fea42223          	sw	x10,-28(x8)

    return PATTERN_ACCEPTED_STATUS;
    18c4:	fe442783          	lw	x15,-28(x8)

}
    18c8:	00078513          	addi	x10,x15,0
    18cc:	02c12083          	lw	x1,44(x2)
    18d0:	02812403          	lw	x8,40(x2)
    18d4:	03010113          	addi	x2,x2,48
    18d8:	00008067          	jalr	x0,0(x1)

000018dc <SimulateNFA>:
        module - integer representing the module number to be targetted
    Returns :
        An integer - 1 implies the text (entered till now) has matched the pattern in the target module, 
                     0 implies either the module didn't process anything, or the text hasn't matched the pattern yet
*/
int SimulateNFA(char text_char, int module) {
    18dc:	fd010113          	addi	x2,x2,-48
    18e0:	02112623          	sw	x1,44(x2)
    18e4:	02812423          	sw	x8,40(x2)
    18e8:	03010413          	addi	x8,x2,48
    18ec:	00050793          	addi	x15,x10,0
    18f0:	fcb42c23          	sw	x11,-40(x8)
    18f4:	fcf40fa3          	sb	x15,-33(x8)

    if(text_char == '\0') return 0;
    18f8:	fdf44783          	lbu	x15,-33(x8)
    18fc:	00079663          	bne	x15,x0,1908 <SimulateNFA+0x2c>
    1900:	00000793          	addi	x15,x0,0
    1904:	05c0006f          	jal	x0,1960 <SimulateNFA+0x84>

    Input1_2((int)text_char, 1);
    1908:	fdf44783          	lbu	x15,-33(x8)
    190c:	00100593          	addi	x11,x0,1
    1910:	00078513          	addi	x10,x15,0
    1914:	be0ff0ef          	jal	x1,cf4 <Input1_2>
    // opcode = 2 : Input for simulating NFA; address : dont care
    Input3(2, 0, module);
    1918:	fd842603          	lw	x12,-40(x8)
    191c:	00000593          	addi	x11,x0,0
    1920:	00200513          	addi	x10,x0,2
    1924:	c88ff0ef          	jal	x1,dac <Input3>

    unsigned int PATTERN_ACCEPTED_STATUS = Complete_Handshaking((1<<module));
    1928:	fd842783          	lw	x15,-40(x8)
    192c:	00100713          	addi	x14,x0,1
    1930:	00f717b3          	sll	x15,x14,x15
    1934:	00078513          	addi	x10,x15,0
    1938:	cccff0ef          	jal	x1,e04 <Complete_Handshaking>
    193c:	fea42623          	sw	x10,-20(x8)

    return (PATTERN_ACCEPTED_STATUS & (1<<module)) != 0;
    1940:	fd842783          	lw	x15,-40(x8)
    1944:	00100713          	addi	x14,x0,1
    1948:	00f717b3          	sll	x15,x14,x15
    194c:	00078713          	addi	x14,x15,0
    1950:	fec42783          	lw	x15,-20(x8)
    1954:	00f777b3          	and	x15,x14,x15
    1958:	00f037b3          	sltu	x15,x0,x15
    195c:	0ff7f793          	andi	x15,x15,255

}
    1960:	00078513          	addi	x10,x15,0
    1964:	02c12083          	lw	x1,44(x2)
    1968:	02812403          	lw	x8,40(x2)
    196c:	03010113          	addi	x2,x2,48
    1970:	00008067          	jalr	x0,0(x1)

00001974 <ResetNFA_All>:
/*
    Function to reset the state of NFA in required modules parallely
    Arguments :
        bitmask - Ith position 1 represents Ith module has to be reset, 0 represents no change
*/
void ResetNFA_All(unsigned int bitmask) {
    1974:	fd010113          	addi	x2,x2,-48
    1978:	02112623          	sw	x1,44(x2)
    197c:	02812423          	sw	x8,40(x2)
    1980:	03010413          	addi	x8,x2,48
    1984:	fca42e23          	sw	x10,-36(x8)

    for(int i = 0; i < NO_MODULES; i++) {
    1988:	fe042623          	sw	x0,-20(x8)
    198c:	03c0006f          	jal	x0,19c8 <ResetNFA_All+0x54>
        if(bitmask & (1<<i)) {
    1990:	fec42783          	lw	x15,-20(x8)
    1994:	00100713          	addi	x14,x0,1
    1998:	00f717b3          	sll	x15,x14,x15
    199c:	00078713          	addi	x14,x15,0
    19a0:	fdc42783          	lw	x15,-36(x8)
    19a4:	00f777b3          	and	x15,x14,x15
    19a8:	00078a63          	beq	x15,x0,19bc <ResetNFA_All+0x48>
            // opcode = 3 : Reset state instruction; address : dont care
            Input3(3, 0, i);
    19ac:	fec42603          	lw	x12,-20(x8)
    19b0:	00000593          	addi	x11,x0,0
    19b4:	00300513          	addi	x10,x0,3
    19b8:	bf4ff0ef          	jal	x1,dac <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    19bc:	fec42783          	lw	x15,-20(x8)
    19c0:	00178793          	addi	x15,x15,1
    19c4:	fef42623          	sw	x15,-20(x8)
    19c8:	fec42703          	lw	x14,-20(x8)
    19cc:	00300793          	addi	x15,x0,3
    19d0:	fce7d0e3          	bge	x15,x14,1990 <ResetNFA_All+0x1c>
        }
    }

    Complete_Handshaking(bitmask);
    19d4:	fdc42503          	lw	x10,-36(x8)
    19d8:	c2cff0ef          	jal	x1,e04 <Complete_Handshaking>

}
    19dc:	00000013          	addi	x0,x0,0
    19e0:	02c12083          	lw	x1,44(x2)
    19e4:	02812403          	lw	x8,40(x2)
    19e8:	03010113          	addi	x2,x2,48
    19ec:	00008067          	jalr	x0,0(x1)

000019f0 <ResetNFA>:
/*
    Function to reset the state of NFA in target module
    Arguments :
        module - MODULE_ID of target module where state has to be reset
*/
void ResetNFA(int module) {
    19f0:	fe010113          	addi	x2,x2,-32
    19f4:	00112e23          	sw	x1,28(x2)
    19f8:	00812c23          	sw	x8,24(x2)
    19fc:	02010413          	addi	x8,x2,32
    1a00:	fea42623          	sw	x10,-20(x8)

    // opcode = 3 : Reset state instruction; address : dont care
    Input3(3, 0, module);
    1a04:	fec42603          	lw	x12,-20(x8)
    1a08:	00000593          	addi	x11,x0,0
    1a0c:	00300513          	addi	x10,x0,3
    1a10:	b9cff0ef          	jal	x1,dac <Input3>

    Complete_Handshaking((1<<module));
    1a14:	fec42783          	lw	x15,-20(x8)
    1a18:	00100713          	addi	x14,x0,1
    1a1c:	00f717b3          	sll	x15,x14,x15
    1a20:	00078513          	addi	x10,x15,0
    1a24:	be0ff0ef          	jal	x1,e04 <Complete_Handshaking>

}
    1a28:	00000013          	addi	x0,x0,0
    1a2c:	01c12083          	lw	x1,28(x2)
    1a30:	01812403          	lw	x8,24(x2)
    1a34:	02010113          	addi	x2,x2,32
    1a38:	00008067          	jalr	x0,0(x1)

00001a3c <_outbyte>:
// change later if needed
#define OUTPERIPH_BASE 0x800000
#define OUTPERIPH_WRITE_OFFSET 0x00
#define OUTPERIPH_READSTATUS_OFFSET 0x04
void _outbyte(int c)
{
    1a3c:	fd010113          	addi	x2,x2,-48
    1a40:	02812623          	sw	x8,44(x2)
    1a44:	03010413          	addi	x8,x2,48
    1a48:	fca42e23          	sw	x10,-36(x8)
        // Fill in the code here
        // What you need is to write to the address of the peripheral (as defined in th BIU)
        // Example code here:
        int *p;  // Pointer to integer
        p = (int *)(OUTPERIPH_BASE + OUTPERIPH_WRITE_OFFSET); // Set pointer value directly
    1a4c:	008007b7          	lui	x15,0x800
    1a50:	fef42623          	sw	x15,-20(x8)
        (*p) = c; // Write the value to the address
    1a54:	fec42783          	lw	x15,-20(x8)
    1a58:	fdc42703          	lw	x14,-36(x8)
    1a5c:	00e7a023          	sw	x14,0(x15) # 800000 <__stack_top+0x400000>
}
    1a60:	00000013          	addi	x0,x0,0
    1a64:	02c12403          	lw	x8,44(x2)
    1a68:	03010113          	addi	x2,x2,48
    1a6c:	00008067          	jalr	x0,0(x1)

00001a70 <outbyte>:

void outbyte(int c)
{
    1a70:	fe010113          	addi	x2,x2,-32
    1a74:	00112e23          	sw	x1,28(x2)
    1a78:	00812c23          	sw	x8,24(x2)
    1a7c:	02010413          	addi	x8,x2,32
    1a80:	fea42623          	sw	x10,-20(x8)
        static char prev = 0;
        if (c < ' ' && c != '\r' && c != '\n' && c != '\t' && c != '\b')
    1a84:	fec42703          	lw	x14,-20(x8)
    1a88:	01f00793          	addi	x15,x0,31
    1a8c:	02e7ca63          	blt	x15,x14,1ac0 <outbyte+0x50>
    1a90:	fec42703          	lw	x14,-20(x8)
    1a94:	00d00793          	addi	x15,x0,13
    1a98:	02f70463          	beq	x14,x15,1ac0 <outbyte+0x50>
    1a9c:	fec42703          	lw	x14,-20(x8)
    1aa0:	00a00793          	addi	x15,x0,10
    1aa4:	00f70e63          	beq	x14,x15,1ac0 <outbyte+0x50>
    1aa8:	fec42703          	lw	x14,-20(x8)
    1aac:	00900793          	addi	x15,x0,9
    1ab0:	00f70863          	beq	x14,x15,1ac0 <outbyte+0x50>
    1ab4:	fec42703          	lw	x14,-20(x8)
    1ab8:	00800793          	addi	x15,x0,8
    1abc:	02f71e63          	bne	x14,x15,1af8 <outbyte+0x88>
                return;
        if (c == '\n' && prev != '\r') _outbyte('\r');
    1ac0:	fec42703          	lw	x14,-20(x8)
    1ac4:	00a00793          	addi	x15,x0,10
    1ac8:	00f71c63          	bne	x14,x15,1ae0 <outbyte+0x70>
    1acc:	8141c703          	lbu	x14,-2028(x3) # 2528 <prev.2>
    1ad0:	00d00793          	addi	x15,x0,13
    1ad4:	00f70663          	beq	x14,x15,1ae0 <outbyte+0x70>
    1ad8:	00d00513          	addi	x10,x0,13
    1adc:	f61ff0ef          	jal	x1,1a3c <_outbyte>
        _outbyte(c);
    1ae0:	fec42503          	lw	x10,-20(x8)
    1ae4:	f59ff0ef          	jal	x1,1a3c <_outbyte>
        prev = c;
    1ae8:	fec42783          	lw	x15,-20(x8)
    1aec:	0ff7f713          	andi	x14,x15,255
    1af0:	80e18a23          	sb	x14,-2028(x3) # 2528 <prev.2>
    1af4:	0080006f          	jal	x0,1afc <outbyte+0x8c>
                return;
    1af8:	00000013          	addi	x0,x0,0
}
    1afc:	01c12083          	lw	x1,28(x2)
    1b00:	01812403          	lw	x8,24(x2)
    1b04:	02010113          	addi	x2,x2,32
    1b08:	00008067          	jalr	x0,0(x1)

00001b0c <readstatus>:
// The following function should read back the number of bytes that 
// have gone through the peripheral since system startup.  Again, the
// address of the status readout register is your choice, and can be
// hardcoded here or declared as a #define
int readstatus() 
{
    1b0c:	fe010113          	addi	x2,x2,-32
    1b10:	00812e23          	sw	x8,28(x2)
    1b14:	02010413          	addi	x8,x2,32
        // Fill in code here
        // Note how the _outbyte function was written, and adapt it to read back the status register
		int *p;  // Pointer to integer
        p = (int *)(OUTPERIPH_BASE + OUTPERIPH_READSTATUS_OFFSET); // Read value in location pointed by pointer to get no of bytes written
    1b18:	008007b7          	lui	x15,0x800
    1b1c:	00478793          	addi	x15,x15,4 # 800004 <__stack_top+0x400004>
    1b20:	fef42623          	sw	x15,-20(x8)
        return (*p);
    1b24:	fec42783          	lw	x15,-20(x8)
    1b28:	0007a783          	lw	x15,0(x15)
}
    1b2c:	00078513          	addi	x10,x15,0
    1b30:	01c12403          	lw	x8,28(x2)
    1b34:	02010113          	addi	x2,x2,32
    1b38:	00008067          	jalr	x0,0(x1)

00001b3c <mydiv>:
// These funcs have not been checked - they may fail for large
// or negative values.
// We could also have had a single function computing both, but would
// need pointers or assembly to return two values.
static int mydiv(int u, int b)
{
    1b3c:	fe010113          	addi	x2,x2,-32
    1b40:	00812e23          	sw	x8,28(x2)
    1b44:	00912c23          	sw	x9,24(x2)
    1b48:	01212a23          	sw	x18,20(x2)
    1b4c:	02010413          	addi	x8,x2,32
    1b50:	fea42623          	sw	x10,-20(x8)
    1b54:	feb42423          	sw	x11,-24(x8)
	register unsigned int q = 0;
    1b58:	00000913          	addi	x18,x0,0
	register unsigned int m = u;
    1b5c:	fec42483          	lw	x9,-20(x8)
	while (m >= b) {
    1b60:	0100006f          	jal	x0,1b70 <mydiv+0x34>
		m -= b;
    1b64:	fe842783          	lw	x15,-24(x8)
    1b68:	40f484b3          	sub	x9,x9,x15
		q++;
    1b6c:	00190913          	addi	x18,x18,1
	while (m >= b) {
    1b70:	fe842783          	lw	x15,-24(x8)
    1b74:	fef4f8e3          	bgeu	x9,x15,1b64 <mydiv+0x28>
	}
	return q;
    1b78:	00090793          	addi	x15,x18,0
}
    1b7c:	00078513          	addi	x10,x15,0
    1b80:	01c12403          	lw	x8,28(x2)
    1b84:	01812483          	lw	x9,24(x2)
    1b88:	01412903          	lw	x18,20(x2)
    1b8c:	02010113          	addi	x2,x2,32
    1b90:	00008067          	jalr	x0,0(x1)

00001b94 <mymod>:

static int mymod(int u, int b)
{
    1b94:	fe010113          	addi	x2,x2,-32
    1b98:	00812e23          	sw	x8,28(x2)
    1b9c:	00912c23          	sw	x9,24(x2)
    1ba0:	02010413          	addi	x8,x2,32
    1ba4:	fea42623          	sw	x10,-20(x8)
    1ba8:	feb42423          	sw	x11,-24(x8)
	register unsigned int m = u;
    1bac:	fec42483          	lw	x9,-20(x8)
	while (m >= b) m -= b;
    1bb0:	00c0006f          	jal	x0,1bbc <mymod+0x28>
    1bb4:	fe842783          	lw	x15,-24(x8)
    1bb8:	40f484b3          	sub	x9,x9,x15
    1bbc:	fe842783          	lw	x15,-24(x8)
    1bc0:	fef4fae3          	bgeu	x9,x15,1bb4 <mymod+0x20>
	return m;
    1bc4:	00048793          	addi	x15,x9,0
}
    1bc8:	00078513          	addi	x10,x15,0
    1bcc:	01c12403          	lw	x8,28(x2)
    1bd0:	01812483          	lw	x9,24(x2)
    1bd4:	02010113          	addi	x2,x2,32
    1bd8:	00008067          	jalr	x0,0(x1)

00001bdc <convert>:

char *convert(unsigned int num, int base) 
{ 
    1bdc:	fd010113          	addi	x2,x2,-48
    1be0:	02112623          	sw	x1,44(x2)
    1be4:	02812423          	sw	x8,40(x2)
    1be8:	03010413          	addi	x8,x2,48
    1bec:	fca42e23          	sw	x10,-36(x8)
    1bf0:	fcb42c23          	sw	x11,-40(x8)
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
    1bf4:	84918793          	addi	x15,x3,-1975 # 255d <buffer.1+0x31>
    1bf8:	fef42623          	sw	x15,-20(x8)
	*ptr = '\0'; 
    1bfc:	fec42783          	lw	x15,-20(x8)
    1c00:	00078023          	sb	x0,0(x15)
	
	do 
	{ 
                int x = mymod(num, base);
    1c04:	fdc42783          	lw	x15,-36(x8)
    1c08:	fd842583          	lw	x11,-40(x8)
    1c0c:	00078513          	addi	x10,x15,0
    1c10:	f85ff0ef          	jal	x1,1b94 <mymod>
    1c14:	fea42423          	sw	x10,-24(x8)
		*--ptr = Representation[x]; 
    1c18:	fec42783          	lw	x15,-20(x8)
    1c1c:	fff78793          	addi	x15,x15,-1
    1c20:	fef42623          	sw	x15,-20(x8)
    1c24:	000027b7          	lui	x15,0x2
    1c28:	51478713          	addi	x14,x15,1300 # 2514 <Representation.0>
    1c2c:	fe842783          	lw	x15,-24(x8)
    1c30:	00f707b3          	add	x15,x14,x15
    1c34:	0007c703          	lbu	x14,0(x15)
    1c38:	fec42783          	lw	x15,-20(x8)
    1c3c:	00e78023          	sb	x14,0(x15)
		num = mydiv(num, base); 
    1c40:	fdc42783          	lw	x15,-36(x8)
    1c44:	fd842583          	lw	x11,-40(x8)
    1c48:	00078513          	addi	x10,x15,0
    1c4c:	ef1ff0ef          	jal	x1,1b3c <mydiv>
    1c50:	00050793          	addi	x15,x10,0
    1c54:	fcf42e23          	sw	x15,-36(x8)
	}while(num != 0); 
    1c58:	fdc42783          	lw	x15,-36(x8)
    1c5c:	fa0794e3          	bne	x15,x0,1c04 <convert+0x28>
	
	return(ptr); 
    1c60:	fec42783          	lw	x15,-20(x8)
}
    1c64:	00078513          	addi	x10,x15,0
    1c68:	02c12083          	lw	x1,44(x2)
    1c6c:	02812403          	lw	x8,40(x2)
    1c70:	03010113          	addi	x2,x2,48
    1c74:	00008067          	jalr	x0,0(x1)

00001c78 <myputs>:

// void myputs(const char *a, int len)
void myputs(const char *a)
{
    1c78:	fe010113          	addi	x2,x2,-32
    1c7c:	00112e23          	sw	x1,28(x2)
    1c80:	00812c23          	sw	x8,24(x2)
    1c84:	00912a23          	sw	x9,20(x2)
    1c88:	02010413          	addi	x8,x2,32
    1c8c:	fea42623          	sw	x10,-20(x8)
        register char* p;
	for(p=(char *)a; (*p)!=0; p++) {
    1c90:	fec42483          	lw	x9,-20(x8)
    1c94:	0140006f          	jal	x0,1ca8 <myputs+0x30>
		outbyte(*p);
    1c98:	0004c783          	lbu	x15,0(x9)
    1c9c:	00078513          	addi	x10,x15,0
    1ca0:	dd1ff0ef          	jal	x1,1a70 <outbyte>
	for(p=(char *)a; (*p)!=0; p++) {
    1ca4:	00148493          	addi	x9,x9,1
    1ca8:	0004c783          	lbu	x15,0(x9)
    1cac:	fe0796e3          	bne	x15,x0,1c98 <myputs+0x20>
	}
}
    1cb0:	00000013          	addi	x0,x0,0
    1cb4:	00000013          	addi	x0,x0,0
    1cb8:	01c12083          	lw	x1,28(x2)
    1cbc:	01812403          	lw	x8,24(x2)
    1cc0:	01412483          	lw	x9,20(x2)
    1cc4:	02010113          	addi	x2,x2,32
    1cc8:	00008067          	jalr	x0,0(x1)

00001ccc <main>:

    return 0;
}
*/

int main() {
    1ccc:	fa010113          	addi	x2,x2,-96
    1cd0:	04112e23          	sw	x1,92(x2)
    1cd4:	04812c23          	sw	x8,88(x2)
    1cd8:	06010413          	addi	x8,x2,96

    char* patterns[4] = {"abc+","[abc]{0,2}d[e,f]?","\0","[a-zA-Z][0-9]hello"};
    1cdc:	000027b7          	lui	x15,0x2
    1ce0:	4c878793          	addi	x15,x15,1224 # 24c8 <main+0x7fc>
    1ce4:	0007a603          	lw	x12,0(x15)
    1ce8:	0047a683          	lw	x13,4(x15)
    1cec:	0087a703          	lw	x14,8(x15)
    1cf0:	00c7a783          	lw	x15,12(x15)
    1cf4:	fcc42423          	sw	x12,-56(x8)
    1cf8:	fcd42623          	sw	x13,-52(x8)
    1cfc:	fce42823          	sw	x14,-48(x8)
    1d00:	fcf42a23          	sw	x15,-44(x8)
    char* pattern2 = "computers?";
    1d04:	000027b7          	lui	x15,0x2
    1d08:	47478793          	addi	x15,x15,1140 # 2474 <main+0x7a8>
    1d0c:	fef42023          	sw	x15,-32(x8)

    PreProcessAll(patterns);
    1d10:	fc840793          	addi	x15,x8,-56
    1d14:	00078513          	addi	x10,x15,0
    1d18:	9c4ff0ef          	jal	x1,edc <PreProcessAll>
    PreProcess(pattern2, 2);
    1d1c:	00200593          	addi	x11,x0,2
    1d20:	fe042503          	lw	x10,-32(x8)
    1d24:	f4cff0ef          	jal	x1,1470 <PreProcess>

    char* text[4] = {"abbadfcabcc","dafabdef","computterscomputer","cc00G9hello0hell"};
    1d28:	000027b7          	lui	x15,0x2
    1d2c:	4d878793          	addi	x15,x15,1240 # 24d8 <main+0x80c>
    1d30:	0007a603          	lw	x12,0(x15)
    1d34:	0047a683          	lw	x13,4(x15)
    1d38:	0087a703          	lw	x14,8(x15)
    1d3c:	00c7a783          	lw	x15,12(x15)
    1d40:	fac42c23          	sw	x12,-72(x8)
    1d44:	fad42e23          	sw	x13,-68(x8)
    1d48:	fce42023          	sw	x14,-64(x8)
    1d4c:	fcf42223          	sw	x15,-60(x8)
    int index[4] = {0,0,0,0};
    1d50:	fa042423          	sw	x0,-88(x8)
    1d54:	fa042623          	sw	x0,-84(x8)
    1d58:	fa042823          	sw	x0,-80(x8)
    1d5c:	fa042a23          	sw	x0,-76(x8)
    while(1) {
        int OK = (1<<4)-1;
    1d60:	00f00793          	addi	x15,x0,15
    1d64:	fef42623          	sw	x15,-20(x8)
        char text_chars[4];
        for(int i = 0; i < 4; i++) {
    1d68:	fe042423          	sw	x0,-24(x8)
    1d6c:	0cc0006f          	jal	x0,1e38 <main+0x16c>
            if(text[i][index[i]] == '\0') OK ^= (1<<i);
    1d70:	fe842783          	lw	x15,-24(x8)
    1d74:	00279793          	slli	x15,x15,0x2
    1d78:	ff040713          	addi	x14,x8,-16
    1d7c:	00f707b3          	add	x15,x14,x15
    1d80:	fc87a703          	lw	x14,-56(x15)
    1d84:	fe842783          	lw	x15,-24(x8)
    1d88:	00279793          	slli	x15,x15,0x2
    1d8c:	ff040693          	addi	x13,x8,-16
    1d90:	00f687b3          	add	x15,x13,x15
    1d94:	fb87a783          	lw	x15,-72(x15)
    1d98:	00f707b3          	add	x15,x14,x15
    1d9c:	0007c783          	lbu	x15,0(x15)
    1da0:	02079063          	bne	x15,x0,1dc0 <main+0xf4>
    1da4:	fe842783          	lw	x15,-24(x8)
    1da8:	00100713          	addi	x14,x0,1
    1dac:	00f717b3          	sll	x15,x14,x15
    1db0:	fec42703          	lw	x14,-20(x8)
    1db4:	00f747b3          	xor	x15,x14,x15
    1db8:	fef42623          	sw	x15,-20(x8)
    1dbc:	0700006f          	jal	x0,1e2c <main+0x160>
            else {
               text_chars[i] = text[i][index[i]];
    1dc0:	fe842783          	lw	x15,-24(x8)
    1dc4:	00279793          	slli	x15,x15,0x2
    1dc8:	ff040713          	addi	x14,x8,-16
    1dcc:	00f707b3          	add	x15,x14,x15
    1dd0:	fc87a703          	lw	x14,-56(x15)
    1dd4:	fe842783          	lw	x15,-24(x8)
    1dd8:	00279793          	slli	x15,x15,0x2
    1ddc:	ff040693          	addi	x13,x8,-16
    1de0:	00f687b3          	add	x15,x13,x15
    1de4:	fb87a783          	lw	x15,-72(x15)
    1de8:	00f707b3          	add	x15,x14,x15
    1dec:	0007c703          	lbu	x14,0(x15)
    1df0:	fe842783          	lw	x15,-24(x8)
    1df4:	ff040693          	addi	x13,x8,-16
    1df8:	00f687b3          	add	x15,x13,x15
    1dfc:	fae78a23          	sb	x14,-76(x15)
               index[i]++; 
    1e00:	fe842783          	lw	x15,-24(x8)
    1e04:	00279793          	slli	x15,x15,0x2
    1e08:	ff040713          	addi	x14,x8,-16
    1e0c:	00f707b3          	add	x15,x14,x15
    1e10:	fb87a783          	lw	x15,-72(x15)
    1e14:	00178713          	addi	x14,x15,1
    1e18:	fe842783          	lw	x15,-24(x8)
    1e1c:	00279793          	slli	x15,x15,0x2
    1e20:	ff040693          	addi	x13,x8,-16
    1e24:	00f687b3          	add	x15,x13,x15
    1e28:	fae7ac23          	sw	x14,-72(x15)
        for(int i = 0; i < 4; i++) {
    1e2c:	fe842783          	lw	x15,-24(x8)
    1e30:	00178793          	addi	x15,x15,1
    1e34:	fef42423          	sw	x15,-24(x8)
    1e38:	fe842703          	lw	x14,-24(x8)
    1e3c:	00300793          	addi	x15,x0,3
    1e40:	f2e7d8e3          	bge	x15,x14,1d70 <main+0xa4>
            }
        }
        if(!OK) break;
    1e44:	fec42783          	lw	x15,-20(x8)
    1e48:	02079063          	bne	x15,x0,1e68 <main+0x19c>
                myputs(" character\n");
            }
        }
    }

    int pattern_status = SimulateNFA('o', 3);
    1e4c:	00300593          	addi	x11,x0,3
    1e50:	06f00513          	addi	x10,x0,111
    1e54:	a89ff0ef          	jal	x1,18dc <SimulateNFA>
    1e58:	fca42c23          	sw	x10,-40(x8)
    if(pattern_status)  {
    1e5c:	fd842783          	lw	x15,-40(x8)
    1e60:	18079063          	bne	x15,x0,1fe0 <main+0x314>
    1e64:	2600006f          	jal	x0,20c4 <main+0x3f8>
        unsigned int pattern_status = SimulateNFA_All(text_chars);
    1e68:	fa440793          	addi	x15,x8,-92
    1e6c:	00078513          	addi	x10,x15,0
    1e70:	9b5ff0ef          	jal	x1,1824 <SimulateNFA_All>
    1e74:	00050793          	addi	x15,x10,0
    1e78:	fcf42e23          	sw	x15,-36(x8)
        for(int i = 0; i < 4; i++) {
    1e7c:	fe042223          	sw	x0,-28(x8)
    1e80:	1500006f          	jal	x0,1fd0 <main+0x304>
            if(pattern_status & (1<<i))  {
    1e84:	fe442783          	lw	x15,-28(x8)
    1e88:	00100713          	addi	x14,x0,1
    1e8c:	00f717b3          	sll	x15,x14,x15
    1e90:	00078713          	addi	x14,x15,0
    1e94:	fdc42783          	lw	x15,-36(x8)
    1e98:	00f777b3          	and	x15,x14,x15
    1e9c:	12078463          	beq	x15,x0,1fc4 <main+0x2f8>
                myputs("Text : ");
    1ea0:	000027b7          	lui	x15,0x2
    1ea4:	48078513          	addi	x10,x15,1152 # 2480 <main+0x7b4>
    1ea8:	dd1ff0ef          	jal	x1,1c78 <myputs>
                myputs(text[i]);
    1eac:	fe442783          	lw	x15,-28(x8)
    1eb0:	00279793          	slli	x15,x15,0x2
    1eb4:	ff040713          	addi	x14,x8,-16
    1eb8:	00f707b3          	add	x15,x14,x15
    1ebc:	fc87a783          	lw	x15,-56(x15)
    1ec0:	00078513          	addi	x10,x15,0
    1ec4:	db5ff0ef          	jal	x1,1c78 <myputs>
                myputs(" - Matched Pattern : ");
    1ec8:	000027b7          	lui	x15,0x2
    1ecc:	48878513          	addi	x10,x15,1160 # 2488 <main+0x7bc>
    1ed0:	da9ff0ef          	jal	x1,1c78 <myputs>
                if(i == 2) myputs(pattern2);
    1ed4:	fe442703          	lw	x14,-28(x8)
    1ed8:	00200793          	addi	x15,x0,2
    1edc:	00f71863          	bne	x14,x15,1eec <main+0x220>
    1ee0:	fe042503          	lw	x10,-32(x8)
    1ee4:	d95ff0ef          	jal	x1,1c78 <myputs>
    1ee8:	0200006f          	jal	x0,1f08 <main+0x23c>
                else myputs(patterns[i]);
    1eec:	fe442783          	lw	x15,-28(x8)
    1ef0:	00279793          	slli	x15,x15,0x2
    1ef4:	ff040713          	addi	x14,x8,-16
    1ef8:	00f707b3          	add	x15,x14,x15
    1efc:	fd87a783          	lw	x15,-40(x15)
    1f00:	00078513          	addi	x10,x15,0
    1f04:	d75ff0ef          	jal	x1,1c78 <myputs>
                myputs(" @ ");
    1f08:	000027b7          	lui	x15,0x2
    1f0c:	4a078513          	addi	x10,x15,1184 # 24a0 <main+0x7d4>
    1f10:	d69ff0ef          	jal	x1,1c78 <myputs>
                myputs(convert(index[i], 10));
    1f14:	fe442783          	lw	x15,-28(x8)
    1f18:	00279793          	slli	x15,x15,0x2
    1f1c:	ff040713          	addi	x14,x8,-16
    1f20:	00f707b3          	add	x15,x14,x15
    1f24:	fb87a783          	lw	x15,-72(x15)
    1f28:	00a00593          	addi	x11,x0,10
    1f2c:	00078513          	addi	x10,x15,0
    1f30:	cadff0ef          	jal	x1,1bdc <convert>
    1f34:	00050793          	addi	x15,x10,0
    1f38:	00078513          	addi	x10,x15,0
    1f3c:	d3dff0ef          	jal	x1,1c78 <myputs>
                switch(index[i]) {
    1f40:	fe442783          	lw	x15,-28(x8)
    1f44:	00279793          	slli	x15,x15,0x2
    1f48:	ff040713          	addi	x14,x8,-16
    1f4c:	00f707b3          	add	x15,x14,x15
    1f50:	fb87a783          	lw	x15,-72(x15)
    1f54:	00300713          	addi	x14,x0,3
    1f58:	04e78063          	beq	x15,x14,1f98 <main+0x2cc>
    1f5c:	00300713          	addi	x14,x0,3
    1f60:	04f74463          	blt	x14,x15,1fa8 <main+0x2dc>
    1f64:	00100713          	addi	x14,x0,1
    1f68:	00e78863          	beq	x15,x14,1f78 <main+0x2ac>
    1f6c:	00200713          	addi	x14,x0,2
    1f70:	00e78c63          	beq	x15,x14,1f88 <main+0x2bc>
    1f74:	0340006f          	jal	x0,1fa8 <main+0x2dc>
                        myputs("st");
    1f78:	000027b7          	lui	x15,0x2
    1f7c:	4a478513          	addi	x10,x15,1188 # 24a4 <main+0x7d8>
    1f80:	cf9ff0ef          	jal	x1,1c78 <myputs>
                    break;
    1f84:	0340006f          	jal	x0,1fb8 <main+0x2ec>
                        myputs("nd");
    1f88:	000027b7          	lui	x15,0x2
    1f8c:	4a878513          	addi	x10,x15,1192 # 24a8 <main+0x7dc>
    1f90:	ce9ff0ef          	jal	x1,1c78 <myputs>
                    break;
    1f94:	0240006f          	jal	x0,1fb8 <main+0x2ec>
                        myputs("rd");
    1f98:	000027b7          	lui	x15,0x2
    1f9c:	4ac78513          	addi	x10,x15,1196 # 24ac <main+0x7e0>
    1fa0:	cd9ff0ef          	jal	x1,1c78 <myputs>
                    break;
    1fa4:	0140006f          	jal	x0,1fb8 <main+0x2ec>
                        myputs("th");
    1fa8:	000027b7          	lui	x15,0x2
    1fac:	4b078513          	addi	x10,x15,1200 # 24b0 <main+0x7e4>
    1fb0:	cc9ff0ef          	jal	x1,1c78 <myputs>
                    break;
    1fb4:	00000013          	addi	x0,x0,0
                myputs(" character\n");
    1fb8:	000027b7          	lui	x15,0x2
    1fbc:	4b478513          	addi	x10,x15,1204 # 24b4 <main+0x7e8>
    1fc0:	cb9ff0ef          	jal	x1,1c78 <myputs>
        for(int i = 0; i < 4; i++) {
    1fc4:	fe442783          	lw	x15,-28(x8)
    1fc8:	00178793          	addi	x15,x15,1
    1fcc:	fef42223          	sw	x15,-28(x8)
    1fd0:	fe442703          	lw	x14,-28(x8)
    1fd4:	00300793          	addi	x15,x0,3
    1fd8:	eae7d6e3          	bge	x15,x14,1e84 <main+0x1b8>
    while(1) {
    1fdc:	d85ff06f          	jal	x0,1d60 <main+0x94>
        myputs("Text : ");
    1fe0:	000027b7          	lui	x15,0x2
    1fe4:	48078513          	addi	x10,x15,1152 # 2480 <main+0x7b4>
    1fe8:	c91ff0ef          	jal	x1,1c78 <myputs>
        myputs(text[3]);
    1fec:	fc442783          	lw	x15,-60(x8)
    1ff0:	00078513          	addi	x10,x15,0
    1ff4:	c85ff0ef          	jal	x1,1c78 <myputs>
        myputs(" - Matched Pattern : ");
    1ff8:	000027b7          	lui	x15,0x2
    1ffc:	48878513          	addi	x10,x15,1160 # 2488 <main+0x7bc>
    2000:	c79ff0ef          	jal	x1,1c78 <myputs>
        myputs(patterns[3]);
    2004:	fd442783          	lw	x15,-44(x8)
    2008:	00078513          	addi	x10,x15,0
    200c:	c6dff0ef          	jal	x1,1c78 <myputs>
        myputs("o");
    2010:	000027b7          	lui	x15,0x2
    2014:	4c078513          	addi	x10,x15,1216 # 24c0 <main+0x7f4>
    2018:	c61ff0ef          	jal	x1,1c78 <myputs>
        myputs(" @ ");
    201c:	000027b7          	lui	x15,0x2
    2020:	4a078513          	addi	x10,x15,1184 # 24a0 <main+0x7d4>
    2024:	c55ff0ef          	jal	x1,1c78 <myputs>
        myputs(convert(index[3], 10));
    2028:	fb442783          	lw	x15,-76(x8)
    202c:	00a00593          	addi	x11,x0,10
    2030:	00078513          	addi	x10,x15,0
    2034:	ba9ff0ef          	jal	x1,1bdc <convert>
    2038:	00050793          	addi	x15,x10,0
    203c:	00078513          	addi	x10,x15,0
    2040:	c39ff0ef          	jal	x1,1c78 <myputs>
        switch(index[3]) {
    2044:	fb442783          	lw	x15,-76(x8)
    2048:	00300713          	addi	x14,x0,3
    204c:	04e78063          	beq	x15,x14,208c <main+0x3c0>
    2050:	00300713          	addi	x14,x0,3
    2054:	04f74463          	blt	x14,x15,209c <main+0x3d0>
    2058:	00100713          	addi	x14,x0,1
    205c:	00e78863          	beq	x15,x14,206c <main+0x3a0>
    2060:	00200713          	addi	x14,x0,2
    2064:	00e78c63          	beq	x15,x14,207c <main+0x3b0>
    2068:	0340006f          	jal	x0,209c <main+0x3d0>
            case 1 : 
                myputs("st");
    206c:	000027b7          	lui	x15,0x2
    2070:	4a478513          	addi	x10,x15,1188 # 24a4 <main+0x7d8>
    2074:	c05ff0ef          	jal	x1,1c78 <myputs>
            break;
    2078:	0340006f          	jal	x0,20ac <main+0x3e0>
            case 2 :
                myputs("nd");
    207c:	000027b7          	lui	x15,0x2
    2080:	4a878513          	addi	x10,x15,1192 # 24a8 <main+0x7dc>
    2084:	bf5ff0ef          	jal	x1,1c78 <myputs>
            break;
    2088:	0240006f          	jal	x0,20ac <main+0x3e0>
            case 3 :
                myputs("rd");
    208c:	000027b7          	lui	x15,0x2
    2090:	4ac78513          	addi	x10,x15,1196 # 24ac <main+0x7e0>
    2094:	be5ff0ef          	jal	x1,1c78 <myputs>
            break;
    2098:	0140006f          	jal	x0,20ac <main+0x3e0>
            default :
                myputs("th");
    209c:	000027b7          	lui	x15,0x2
    20a0:	4b078513          	addi	x10,x15,1200 # 24b0 <main+0x7e4>
    20a4:	bd5ff0ef          	jal	x1,1c78 <myputs>
            break;
    20a8:	00000013          	addi	x0,x0,0
        }
        myputs(" character\n");
    20ac:	000027b7          	lui	x15,0x2
    20b0:	4b478513          	addi	x10,x15,1204 # 24b4 <main+0x7e8>
    20b4:	bc5ff0ef          	jal	x1,1c78 <myputs>
        index[3]++;
    20b8:	fb442783          	lw	x15,-76(x8)
    20bc:	00178793          	addi	x15,x15,1
    20c0:	faf42a23          	sw	x15,-76(x8)
    }

    ResetNFA(2);
    20c4:	00200513          	addi	x10,x0,2
    20c8:	929ff0ef          	jal	x1,19f0 <ResetNFA>
    pattern_status = SimulateNFA('s', 2);
    20cc:	00200593          	addi	x11,x0,2
    20d0:	07300513          	addi	x10,x0,115
    20d4:	809ff0ef          	jal	x1,18dc <SimulateNFA>
    20d8:	fca42c23          	sw	x10,-40(x8)
    if(pattern_status)  {
    20dc:	fd842783          	lw	x15,-40(x8)
    20e0:	0e078263          	beq	x15,x0,21c4 <main+0x4f8>
        myputs("Text : ");
    20e4:	000027b7          	lui	x15,0x2
    20e8:	48078513          	addi	x10,x15,1152 # 2480 <main+0x7b4>
    20ec:	b8dff0ef          	jal	x1,1c78 <myputs>
        myputs(text[2]);
    20f0:	fc042783          	lw	x15,-64(x8)
    20f4:	00078513          	addi	x10,x15,0
    20f8:	b81ff0ef          	jal	x1,1c78 <myputs>
        myputs(" - Matched Pattern : ");
    20fc:	000027b7          	lui	x15,0x2
    2100:	48878513          	addi	x10,x15,1160 # 2488 <main+0x7bc>
    2104:	b75ff0ef          	jal	x1,1c78 <myputs>
        myputs(pattern2);
    2108:	fe042503          	lw	x10,-32(x8)
    210c:	b6dff0ef          	jal	x1,1c78 <myputs>
        myputs("s");
    2110:	000027b7          	lui	x15,0x2
    2114:	4c478513          	addi	x10,x15,1220 # 24c4 <main+0x7f8>
    2118:	b61ff0ef          	jal	x1,1c78 <myputs>
        myputs(" @ ");
    211c:	000027b7          	lui	x15,0x2
    2120:	4a078513          	addi	x10,x15,1184 # 24a0 <main+0x7d4>
    2124:	b55ff0ef          	jal	x1,1c78 <myputs>
        myputs(convert(index[2], 10));
    2128:	fb042783          	lw	x15,-80(x8)
    212c:	00a00593          	addi	x11,x0,10
    2130:	00078513          	addi	x10,x15,0
    2134:	aa9ff0ef          	jal	x1,1bdc <convert>
    2138:	00050793          	addi	x15,x10,0
    213c:	00078513          	addi	x10,x15,0
    2140:	b39ff0ef          	jal	x1,1c78 <myputs>
        switch(index[2]) {
    2144:	fb042783          	lw	x15,-80(x8)
    2148:	00300713          	addi	x14,x0,3
    214c:	04e78063          	beq	x15,x14,218c <main+0x4c0>
    2150:	00300713          	addi	x14,x0,3
    2154:	04f74463          	blt	x14,x15,219c <main+0x4d0>
    2158:	00100713          	addi	x14,x0,1
    215c:	00e78863          	beq	x15,x14,216c <main+0x4a0>
    2160:	00200713          	addi	x14,x0,2
    2164:	00e78c63          	beq	x15,x14,217c <main+0x4b0>
    2168:	0340006f          	jal	x0,219c <main+0x4d0>
            case 1 : 
                myputs("st");
    216c:	000027b7          	lui	x15,0x2
    2170:	4a478513          	addi	x10,x15,1188 # 24a4 <main+0x7d8>
    2174:	b05ff0ef          	jal	x1,1c78 <myputs>
            break;
    2178:	0340006f          	jal	x0,21ac <main+0x4e0>
            case 2 :
                myputs("nd");
    217c:	000027b7          	lui	x15,0x2
    2180:	4a878513          	addi	x10,x15,1192 # 24a8 <main+0x7dc>
    2184:	af5ff0ef          	jal	x1,1c78 <myputs>
            break;
    2188:	0240006f          	jal	x0,21ac <main+0x4e0>
            case 3 :
                myputs("rd");
    218c:	000027b7          	lui	x15,0x2
    2190:	4ac78513          	addi	x10,x15,1196 # 24ac <main+0x7e0>
    2194:	ae5ff0ef          	jal	x1,1c78 <myputs>
            break;
    2198:	0140006f          	jal	x0,21ac <main+0x4e0>
            default :
                myputs("th");
    219c:	000027b7          	lui	x15,0x2
    21a0:	4b078513          	addi	x10,x15,1200 # 24b0 <main+0x7e4>
    21a4:	ad5ff0ef          	jal	x1,1c78 <myputs>
            break;
    21a8:	00000013          	addi	x0,x0,0
        }
        myputs(" character\n");
    21ac:	000027b7          	lui	x15,0x2
    21b0:	4b478513          	addi	x10,x15,1204 # 24b4 <main+0x7e8>
    21b4:	ac5ff0ef          	jal	x1,1c78 <myputs>
        index[2]++;
    21b8:	fb042783          	lw	x15,-80(x8)
    21bc:	00178793          	addi	x15,x15,1
    21c0:	faf42823          	sw	x15,-80(x8)
    }


    // Infinite loop to avoid repitition of program
    for(;;);
    21c4:	0000006f          	jal	x0,21c4 <main+0x4f8>
