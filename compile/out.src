
out.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <_start>:
_start:
    .cfi_startproc
    .cfi_undefined ra
    .option push
    .option norelax
    la gp, __global_pointer$
   0:	00003197          	auipc	x3,0x3
   4:	ed418193          	addi	x3,x3,-300 # 2ed4 <__global_pointer$>
    .option pop
    la sp, __stack_top
   8:	00040117          	auipc	x2,0x40
   c:	ff810113          	addi	x2,x2,-8 # 40000 <__stack_top>
    add s0, sp, zero
  10:	00010433          	add	x8,x2,x0
    jal zero, main
  14:	0400206f          	jal	x0,2054 <main>

Disassembly of section .text:

00000018 <parseEXT>:
    
    The function returns :
        0 if given pattern not a valid EXT type regex or if the pattern results in a NFA with greater than W length, 1 otherwise
*/

int parseEXT (char *PATTERN, unsigned int *INIT, unsigned int *ACCEPT, unsigned int *EpsBEG, unsigned int *EpsEND, unsigned int *EpsBLK, unsigned int MOVE[], unsigned int SELFLOOP[]) {
      18:	b6010113          	addi	x2,x2,-1184
      1c:	48812e23          	sw	x8,1180(x2)
      20:	4a010413          	addi	x8,x2,1184
      24:	b6a42e23          	sw	x10,-1156(x8)
      28:	b6b42c23          	sw	x11,-1160(x8)
      2c:	b6c42a23          	sw	x12,-1164(x8)
      30:	b6d42823          	sw	x13,-1168(x8)
      34:	b6e42623          	sw	x14,-1172(x8)
      38:	b6f42423          	sw	x15,-1176(x8)
      3c:	b7042223          	sw	x16,-1180(x8)
      40:	b7142023          	sw	x17,-1184(x8)
    
    *INIT = 1;
      44:	b7842783          	lw	x15,-1160(x8)
      48:	00100713          	addi	x14,x0,1
      4c:	00e7a023          	sw	x14,0(x15)
    *EpsBEG = *EpsEND = *EpsBLK = 0;
      50:	b6842783          	lw	x15,-1176(x8)
      54:	0007a023          	sw	x0,0(x15)
      58:	b6842783          	lw	x15,-1176(x8)
      5c:	0007a703          	lw	x14,0(x15)
      60:	b6c42783          	lw	x15,-1172(x8)
      64:	00e7a023          	sw	x14,0(x15)
      68:	b6c42783          	lw	x15,-1172(x8)
      6c:	0007a703          	lw	x14,0(x15)
      70:	b7042783          	lw	x15,-1168(x8)
      74:	00e7a023          	sw	x14,0(x15)
    for(int i = 0;i < 256;i++) {
      78:	fe042623          	sw	x0,-20(x8)
      7c:	0380006f          	jal	x0,b4 <parseEXT+0x9c>
        MOVE[i] = 0;
      80:	fec42783          	lw	x15,-20(x8)
      84:	00279793          	slli	x15,x15,0x2
      88:	b6442703          	lw	x14,-1180(x8)
      8c:	00f707b3          	add	x15,x14,x15
      90:	0007a023          	sw	x0,0(x15)
        SELFLOOP[i] = 0;
      94:	fec42783          	lw	x15,-20(x8)
      98:	00279793          	slli	x15,x15,0x2
      9c:	b6042703          	lw	x14,-1184(x8)
      a0:	00f707b3          	add	x15,x14,x15
      a4:	0007a023          	sw	x0,0(x15)
    for(int i = 0;i < 256;i++) {
      a8:	fec42783          	lw	x15,-20(x8)
      ac:	00178793          	addi	x15,x15,1
      b0:	fef42623          	sw	x15,-20(x8)
      b4:	fec42703          	lw	x14,-20(x8)
      b8:	0ff00793          	addi	x15,x0,255
      bc:	fce7d2e3          	bge	x15,x14,80 <parseEXT+0x68>

    // escape : 1 if a backslash (\) is encountered which denotes a escape sequence
    // range : 1 if a hiphen (-) is encountered which denotes a range
    // char_class : 1 if we are decoding the character class from the regex provided
    // negate : 1 if ^ is encountered in character class when characters other than those given must be included
    int escape = 0,range = 0,char_class = 1,negate = 0;
      c0:	fe042423          	sw	x0,-24(x8)
      c4:	fe042223          	sw	x0,-28(x8)
      c8:	00100793          	addi	x15,x0,1
      cc:	fef42023          	sw	x15,-32(x8)
      d0:	fc042e23          	sw	x0,-36(x8)

    // state_no : deontes the number of states in the NFA minus 1
    int state_no = -1;
      d4:	fff00793          	addi	x15,x0,-1
      d8:	fcf42c23          	sw	x15,-40(x8)

    // char_set : sets the characters provided in the character class HIGH
    int char_set[256];

    for(int i = 0; !char_class || PATTERN[i] != '\0'; i++) {
      dc:	fc042a23          	sw	x0,-44(x8)
      e0:	2dd0006f          	jal	x0,bbc <parseEXT+0xba4>
        if(!char_class) {
      e4:	fe042783          	lw	x15,-32(x8)
      e8:	64079c63          	bne	x15,x0,740 <parseEXT+0x728>
            
            state_no++;
      ec:	fd842783          	lw	x15,-40(x8)
      f0:	00178793          	addi	x15,x15,1
      f4:	fcf42c23          	sw	x15,-40(x8)
            int tmpMask = (1<<state_no);
      f8:	fd842783          	lw	x15,-40(x8)
      fc:	00100713          	addi	x14,x0,1
     100:	00f717b3          	sll	x15,x14,x15
     104:	fcf42823          	sw	x15,-48(x8)

            if(PATTERN[i] == '+') {
     108:	fd442783          	lw	x15,-44(x8)
     10c:	b7c42703          	lw	x14,-1156(x8)
     110:	00f707b3          	add	x15,x14,x15
     114:	0007c703          	lbu	x14,0(x15)
     118:	02b00793          	addi	x15,x0,43
     11c:	0ef71063          	bne	x14,x15,1fc <parseEXT+0x1e4>
                for(int c = 0;c < 256;c++) {
     120:	fc042623          	sw	x0,-52(x8)
     124:	05c0006f          	jal	x0,180 <parseEXT+0x168>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     128:	fcc42783          	lw	x15,-52(x8)
     12c:	00279793          	slli	x15,x15,0x2
     130:	ff040713          	addi	x14,x8,-16
     134:	00f707b3          	add	x15,x14,x15
     138:	b947a783          	lw	x15,-1132(x15)
     13c:	fdc42703          	lw	x14,-36(x8)
     140:	02f70a63          	beq	x14,x15,174 <parseEXT+0x15c>
     144:	fcc42783          	lw	x15,-52(x8)
     148:	00279793          	slli	x15,x15,0x2
     14c:	b6442703          	lw	x14,-1180(x8)
     150:	00f707b3          	add	x15,x14,x15
     154:	0007a683          	lw	x13,0(x15)
     158:	fd042703          	lw	x14,-48(x8)
     15c:	fcc42783          	lw	x15,-52(x8)
     160:	00279793          	slli	x15,x15,0x2
     164:	b6442603          	lw	x12,-1180(x8)
     168:	00f607b3          	add	x15,x12,x15
     16c:	00e6e733          	or	x14,x13,x14
     170:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     174:	fcc42783          	lw	x15,-52(x8)
     178:	00178793          	addi	x15,x15,1
     17c:	fcf42623          	sw	x15,-52(x8)
     180:	fcc42703          	lw	x14,-52(x8)
     184:	0ff00793          	addi	x15,x0,255
     188:	fae7d0e3          	bge	x15,x14,128 <parseEXT+0x110>
                }
                for(int c = 0;c < 256;c++) {
     18c:	fc042423          	sw	x0,-56(x8)
     190:	05c0006f          	jal	x0,1ec <parseEXT+0x1d4>
                    if(negate ^ char_set[c]) SELFLOOP[c] |= tmpMask;
     194:	fc842783          	lw	x15,-56(x8)
     198:	00279793          	slli	x15,x15,0x2
     19c:	ff040713          	addi	x14,x8,-16
     1a0:	00f707b3          	add	x15,x14,x15
     1a4:	b947a783          	lw	x15,-1132(x15)
     1a8:	fdc42703          	lw	x14,-36(x8)
     1ac:	02f70a63          	beq	x14,x15,1e0 <parseEXT+0x1c8>
     1b0:	fc842783          	lw	x15,-56(x8)
     1b4:	00279793          	slli	x15,x15,0x2
     1b8:	b6042703          	lw	x14,-1184(x8)
     1bc:	00f707b3          	add	x15,x14,x15
     1c0:	0007a683          	lw	x13,0(x15)
     1c4:	fd042703          	lw	x14,-48(x8)
     1c8:	fc842783          	lw	x15,-56(x8)
     1cc:	00279793          	slli	x15,x15,0x2
     1d0:	b6042603          	lw	x12,-1184(x8)
     1d4:	00f607b3          	add	x15,x12,x15
     1d8:	00e6e733          	or	x14,x13,x14
     1dc:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     1e0:	fc842783          	lw	x15,-56(x8)
     1e4:	00178793          	addi	x15,x15,1
     1e8:	fcf42423          	sw	x15,-56(x8)
     1ec:	fc842703          	lw	x14,-56(x8)
     1f0:	0ff00793          	addi	x15,x0,255
     1f4:	fae7d0e3          	bge	x15,x14,194 <parseEXT+0x17c>
     1f8:	5280006f          	jal	x0,720 <parseEXT+0x708>
                }
            }
            else if(PATTERN[i] == '?') {
     1fc:	fd442783          	lw	x15,-44(x8)
     200:	b7c42703          	lw	x14,-1156(x8)
     204:	00f707b3          	add	x15,x14,x15
     208:	0007c703          	lbu	x14,0(x15)
     20c:	03f00793          	addi	x15,x0,63
     210:	08f71663          	bne	x14,x15,29c <parseEXT+0x284>
                for(int c = 0;c < 256;c++) {
     214:	fc042223          	sw	x0,-60(x8)
     218:	05c0006f          	jal	x0,274 <parseEXT+0x25c>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     21c:	fc442783          	lw	x15,-60(x8)
     220:	00279793          	slli	x15,x15,0x2
     224:	ff040713          	addi	x14,x8,-16
     228:	00f707b3          	add	x15,x14,x15
     22c:	b947a783          	lw	x15,-1132(x15)
     230:	fdc42703          	lw	x14,-36(x8)
     234:	02f70a63          	beq	x14,x15,268 <parseEXT+0x250>
     238:	fc442783          	lw	x15,-60(x8)
     23c:	00279793          	slli	x15,x15,0x2
     240:	b6442703          	lw	x14,-1180(x8)
     244:	00f707b3          	add	x15,x14,x15
     248:	0007a683          	lw	x13,0(x15)
     24c:	fd042703          	lw	x14,-48(x8)
     250:	fc442783          	lw	x15,-60(x8)
     254:	00279793          	slli	x15,x15,0x2
     258:	b6442603          	lw	x12,-1180(x8)
     25c:	00f607b3          	add	x15,x12,x15
     260:	00e6e733          	or	x14,x13,x14
     264:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     268:	fc442783          	lw	x15,-60(x8)
     26c:	00178793          	addi	x15,x15,1
     270:	fcf42223          	sw	x15,-60(x8)
     274:	fc442703          	lw	x14,-60(x8)
     278:	0ff00793          	addi	x15,x0,255
     27c:	fae7d0e3          	bge	x15,x14,21c <parseEXT+0x204>
                }
                (*EpsBLK) |= tmpMask;
     280:	b6842783          	lw	x15,-1176(x8)
     284:	0007a703          	lw	x14,0(x15)
     288:	fd042783          	lw	x15,-48(x8)
     28c:	00f76733          	or	x14,x14,x15
     290:	b6842783          	lw	x15,-1176(x8)
     294:	00e7a023          	sw	x14,0(x15)
     298:	4880006f          	jal	x0,720 <parseEXT+0x708>
            }
            else if(PATTERN[i] == '*') {
     29c:	fd442783          	lw	x15,-44(x8)
     2a0:	b7c42703          	lw	x14,-1156(x8)
     2a4:	00f707b3          	add	x15,x14,x15
     2a8:	0007c703          	lbu	x14,0(x15)
     2ac:	02a00793          	addi	x15,x0,42
     2b0:	0ef71c63          	bne	x14,x15,3a8 <parseEXT+0x390>
                for(int c = 0;c < 256;c++) {
     2b4:	fc042023          	sw	x0,-64(x8)
     2b8:	05c0006f          	jal	x0,314 <parseEXT+0x2fc>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     2bc:	fc042783          	lw	x15,-64(x8)
     2c0:	00279793          	slli	x15,x15,0x2
     2c4:	ff040713          	addi	x14,x8,-16
     2c8:	00f707b3          	add	x15,x14,x15
     2cc:	b947a783          	lw	x15,-1132(x15)
     2d0:	fdc42703          	lw	x14,-36(x8)
     2d4:	02f70a63          	beq	x14,x15,308 <parseEXT+0x2f0>
     2d8:	fc042783          	lw	x15,-64(x8)
     2dc:	00279793          	slli	x15,x15,0x2
     2e0:	b6442703          	lw	x14,-1180(x8)
     2e4:	00f707b3          	add	x15,x14,x15
     2e8:	0007a683          	lw	x13,0(x15)
     2ec:	fd042703          	lw	x14,-48(x8)
     2f0:	fc042783          	lw	x15,-64(x8)
     2f4:	00279793          	slli	x15,x15,0x2
     2f8:	b6442603          	lw	x12,-1180(x8)
     2fc:	00f607b3          	add	x15,x12,x15
     300:	00e6e733          	or	x14,x13,x14
     304:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     308:	fc042783          	lw	x15,-64(x8)
     30c:	00178793          	addi	x15,x15,1
     310:	fcf42023          	sw	x15,-64(x8)
     314:	fc042703          	lw	x14,-64(x8)
     318:	0ff00793          	addi	x15,x0,255
     31c:	fae7d0e3          	bge	x15,x14,2bc <parseEXT+0x2a4>
                }
                for(int c = 0;c < 256;c++) {
     320:	fa042e23          	sw	x0,-68(x8)
     324:	05c0006f          	jal	x0,380 <parseEXT+0x368>
                    if(negate ^ char_set[c]) SELFLOOP[c] |= tmpMask;
     328:	fbc42783          	lw	x15,-68(x8)
     32c:	00279793          	slli	x15,x15,0x2
     330:	ff040713          	addi	x14,x8,-16
     334:	00f707b3          	add	x15,x14,x15
     338:	b947a783          	lw	x15,-1132(x15)
     33c:	fdc42703          	lw	x14,-36(x8)
     340:	02f70a63          	beq	x14,x15,374 <parseEXT+0x35c>
     344:	fbc42783          	lw	x15,-68(x8)
     348:	00279793          	slli	x15,x15,0x2
     34c:	b6042703          	lw	x14,-1184(x8)
     350:	00f707b3          	add	x15,x14,x15
     354:	0007a683          	lw	x13,0(x15)
     358:	fd042703          	lw	x14,-48(x8)
     35c:	fbc42783          	lw	x15,-68(x8)
     360:	00279793          	slli	x15,x15,0x2
     364:	b6042603          	lw	x12,-1184(x8)
     368:	00f607b3          	add	x15,x12,x15
     36c:	00e6e733          	or	x14,x13,x14
     370:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     374:	fbc42783          	lw	x15,-68(x8)
     378:	00178793          	addi	x15,x15,1
     37c:	faf42e23          	sw	x15,-68(x8)
     380:	fbc42703          	lw	x14,-68(x8)
     384:	0ff00793          	addi	x15,x0,255
     388:	fae7d0e3          	bge	x15,x14,328 <parseEXT+0x310>
                }
                (*EpsBLK) |= tmpMask;
     38c:	b6842783          	lw	x15,-1176(x8)
     390:	0007a703          	lw	x14,0(x15)
     394:	fd042783          	lw	x15,-48(x8)
     398:	00f76733          	or	x14,x14,x15
     39c:	b6842783          	lw	x15,-1176(x8)
     3a0:	00e7a023          	sw	x14,0(x15)
     3a4:	37c0006f          	jal	x0,720 <parseEXT+0x708>
            }
            else if(PATTERN[i] == '{') {
     3a8:	fd442783          	lw	x15,-44(x8)
     3ac:	b7c42703          	lw	x14,-1156(x8)
     3b0:	00f707b3          	add	x15,x14,x15
     3b4:	0007c703          	lbu	x14,0(x15)
     3b8:	07b00793          	addi	x15,x0,123
     3bc:	2cf71c63          	bne	x14,x15,694 <parseEXT+0x67c>
                int lb = 0, ub = 0;
     3c0:	fa042c23          	sw	x0,-72(x8)
     3c4:	fa042a23          	sw	x0,-76(x8)
                i++;
     3c8:	fd442783          	lw	x15,-44(x8)
     3cc:	00178793          	addi	x15,x15,1
     3d0:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     3d4:	0440006f          	jal	x0,418 <parseEXT+0x400>
                    lb = lb*10 + (PATTERN[i]-'0');
     3d8:	fb842703          	lw	x14,-72(x8)
     3dc:	00070793          	addi	x15,x14,0
     3e0:	00279793          	slli	x15,x15,0x2
     3e4:	00e787b3          	add	x15,x15,x14
     3e8:	00179793          	slli	x15,x15,0x1
     3ec:	00078693          	addi	x13,x15,0
     3f0:	fd442783          	lw	x15,-44(x8)
     3f4:	b7c42703          	lw	x14,-1156(x8)
     3f8:	00f707b3          	add	x15,x14,x15
     3fc:	0007c783          	lbu	x15,0(x15)
     400:	fd078793          	addi	x15,x15,-48
     404:	00f687b3          	add	x15,x13,x15
     408:	faf42c23          	sw	x15,-72(x8)
                    i++;
     40c:	fd442783          	lw	x15,-44(x8)
     410:	00178793          	addi	x15,x15,1
     414:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     418:	fd442783          	lw	x15,-44(x8)
     41c:	b7c42703          	lw	x14,-1156(x8)
     420:	00f707b3          	add	x15,x14,x15
     424:	0007c703          	lbu	x14,0(x15)
     428:	02f00793          	addi	x15,x0,47
     42c:	00e7fe63          	bgeu	x15,x14,448 <parseEXT+0x430>
     430:	fd442783          	lw	x15,-44(x8)
     434:	b7c42703          	lw	x14,-1156(x8)
     438:	00f707b3          	add	x15,x14,x15
     43c:	0007c703          	lbu	x14,0(x15)
     440:	03900793          	addi	x15,x0,57
     444:	f8e7fae3          	bgeu	x15,x14,3d8 <parseEXT+0x3c0>
                }
                if(PATTERN[i] != ',') return 0;
     448:	fd442783          	lw	x15,-44(x8)
     44c:	b7c42703          	lw	x14,-1156(x8)
     450:	00f707b3          	add	x15,x14,x15
     454:	0007c703          	lbu	x14,0(x15)
     458:	02c00793          	addi	x15,x0,44
     45c:	00f70663          	beq	x14,x15,468 <parseEXT+0x450>
     460:	00000793          	addi	x15,x0,0
     464:	0750006f          	jal	x0,cd8 <parseEXT+0xcc0>
                i++;
     468:	fd442783          	lw	x15,-44(x8)
     46c:	00178793          	addi	x15,x15,1
     470:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     474:	0440006f          	jal	x0,4b8 <parseEXT+0x4a0>
                    ub = ub*10 + (PATTERN[i]-'0');
     478:	fb442703          	lw	x14,-76(x8)
     47c:	00070793          	addi	x15,x14,0
     480:	00279793          	slli	x15,x15,0x2
     484:	00e787b3          	add	x15,x15,x14
     488:	00179793          	slli	x15,x15,0x1
     48c:	00078693          	addi	x13,x15,0
     490:	fd442783          	lw	x15,-44(x8)
     494:	b7c42703          	lw	x14,-1156(x8)
     498:	00f707b3          	add	x15,x14,x15
     49c:	0007c783          	lbu	x15,0(x15)
     4a0:	fd078793          	addi	x15,x15,-48
     4a4:	00f687b3          	add	x15,x13,x15
     4a8:	faf42a23          	sw	x15,-76(x8)
                    i++;
     4ac:	fd442783          	lw	x15,-44(x8)
     4b0:	00178793          	addi	x15,x15,1
     4b4:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] >= '0' && PATTERN[i] <= '9') {
     4b8:	fd442783          	lw	x15,-44(x8)
     4bc:	b7c42703          	lw	x14,-1156(x8)
     4c0:	00f707b3          	add	x15,x14,x15
     4c4:	0007c703          	lbu	x14,0(x15)
     4c8:	02f00793          	addi	x15,x0,47
     4cc:	00e7fe63          	bgeu	x15,x14,4e8 <parseEXT+0x4d0>
     4d0:	fd442783          	lw	x15,-44(x8)
     4d4:	b7c42703          	lw	x14,-1156(x8)
     4d8:	00f707b3          	add	x15,x14,x15
     4dc:	0007c703          	lbu	x14,0(x15)
     4e0:	03900793          	addi	x15,x0,57
     4e4:	f8e7fae3          	bgeu	x15,x14,478 <parseEXT+0x460>
                }
                if(PATTERN[i] != '}' || ub < lb || state_no+ub > W) return 0;
     4e8:	fd442783          	lw	x15,-44(x8)
     4ec:	b7c42703          	lw	x14,-1156(x8)
     4f0:	00f707b3          	add	x15,x14,x15
     4f4:	0007c703          	lbu	x14,0(x15)
     4f8:	07d00793          	addi	x15,x0,125
     4fc:	02f71263          	bne	x14,x15,520 <parseEXT+0x508>
     500:	fb442703          	lw	x14,-76(x8)
     504:	fb842783          	lw	x15,-72(x8)
     508:	00f74c63          	blt	x14,x15,520 <parseEXT+0x508>
     50c:	fd842703          	lw	x14,-40(x8)
     510:	fb442783          	lw	x15,-76(x8)
     514:	00f70733          	add	x14,x14,x15
     518:	02000793          	addi	x15,x0,32
     51c:	00e7d663          	bge	x15,x14,528 <parseEXT+0x510>
     520:	00000793          	addi	x15,x0,0
     524:	7b40006f          	jal	x0,cd8 <parseEXT+0xcc0>
                state_no += (ub-1);
     528:	fb442783          	lw	x15,-76(x8)
     52c:	fff78793          	addi	x15,x15,-1
     530:	fd842703          	lw	x14,-40(x8)
     534:	00f707b3          	add	x15,x14,x15
     538:	fcf42c23          	sw	x15,-40(x8)
                int x = ub-lb, j = 0;
     53c:	fb442703          	lw	x14,-76(x8)
     540:	fb842783          	lw	x15,-72(x8)
     544:	40f707b3          	sub	x15,x14,x15
     548:	f8f42223          	sw	x15,-124(x8)
     54c:	fa042823          	sw	x0,-80(x8)
                for(;j < x;j++) {
     550:	0a00006f          	jal	x0,5f0 <parseEXT+0x5d8>
                    (*EpsBLK) |= tmpMask;
     554:	b6842783          	lw	x15,-1176(x8)
     558:	0007a703          	lw	x14,0(x15)
     55c:	fd042783          	lw	x15,-48(x8)
     560:	00f76733          	or	x14,x14,x15
     564:	b6842783          	lw	x15,-1176(x8)
     568:	00e7a023          	sw	x14,0(x15)
                    for(int c = 0;c < 256;c++) {
     56c:	fa042623          	sw	x0,-84(x8)
     570:	05c0006f          	jal	x0,5cc <parseEXT+0x5b4>
                        if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     574:	fac42783          	lw	x15,-84(x8)
     578:	00279793          	slli	x15,x15,0x2
     57c:	ff040713          	addi	x14,x8,-16
     580:	00f707b3          	add	x15,x14,x15
     584:	b947a783          	lw	x15,-1132(x15)
     588:	fdc42703          	lw	x14,-36(x8)
     58c:	02f70a63          	beq	x14,x15,5c0 <parseEXT+0x5a8>
     590:	fac42783          	lw	x15,-84(x8)
     594:	00279793          	slli	x15,x15,0x2
     598:	b6442703          	lw	x14,-1180(x8)
     59c:	00f707b3          	add	x15,x14,x15
     5a0:	0007a683          	lw	x13,0(x15)
     5a4:	fd042703          	lw	x14,-48(x8)
     5a8:	fac42783          	lw	x15,-84(x8)
     5ac:	00279793          	slli	x15,x15,0x2
     5b0:	b6442603          	lw	x12,-1180(x8)
     5b4:	00f607b3          	add	x15,x12,x15
     5b8:	00e6e733          	or	x14,x13,x14
     5bc:	00e7a023          	sw	x14,0(x15)
                    for(int c = 0;c < 256;c++) {
     5c0:	fac42783          	lw	x15,-84(x8)
     5c4:	00178793          	addi	x15,x15,1
     5c8:	faf42623          	sw	x15,-84(x8)
     5cc:	fac42703          	lw	x14,-84(x8)
     5d0:	0ff00793          	addi	x15,x0,255
     5d4:	fae7d0e3          	bge	x15,x14,574 <parseEXT+0x55c>
                    }
                    tmpMask <<= 1;
     5d8:	fd042783          	lw	x15,-48(x8)
     5dc:	00179793          	slli	x15,x15,0x1
     5e0:	fcf42823          	sw	x15,-48(x8)
                for(;j < x;j++) {
     5e4:	fb042783          	lw	x15,-80(x8)
     5e8:	00178793          	addi	x15,x15,1
     5ec:	faf42823          	sw	x15,-80(x8)
     5f0:	fb042703          	lw	x14,-80(x8)
     5f4:	f8442783          	lw	x15,-124(x8)
     5f8:	f4f74ee3          	blt	x14,x15,554 <parseEXT+0x53c>
                }
                for(;j < ub;j++) {
     5fc:	0880006f          	jal	x0,684 <parseEXT+0x66c>
                    for(int c = 0;c < 256;c++) {
     600:	fa042423          	sw	x0,-88(x8)
     604:	05c0006f          	jal	x0,660 <parseEXT+0x648>
                        if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     608:	fa842783          	lw	x15,-88(x8)
     60c:	00279793          	slli	x15,x15,0x2
     610:	ff040713          	addi	x14,x8,-16
     614:	00f707b3          	add	x15,x14,x15
     618:	b947a783          	lw	x15,-1132(x15)
     61c:	fdc42703          	lw	x14,-36(x8)
     620:	02f70a63          	beq	x14,x15,654 <parseEXT+0x63c>
     624:	fa842783          	lw	x15,-88(x8)
     628:	00279793          	slli	x15,x15,0x2
     62c:	b6442703          	lw	x14,-1180(x8)
     630:	00f707b3          	add	x15,x14,x15
     634:	0007a683          	lw	x13,0(x15)
     638:	fd042703          	lw	x14,-48(x8)
     63c:	fa842783          	lw	x15,-88(x8)
     640:	00279793          	slli	x15,x15,0x2
     644:	b6442603          	lw	x12,-1180(x8)
     648:	00f607b3          	add	x15,x12,x15
     64c:	00e6e733          	or	x14,x13,x14
     650:	00e7a023          	sw	x14,0(x15)
                    for(int c = 0;c < 256;c++) {
     654:	fa842783          	lw	x15,-88(x8)
     658:	00178793          	addi	x15,x15,1
     65c:	faf42423          	sw	x15,-88(x8)
     660:	fa842703          	lw	x14,-88(x8)
     664:	0ff00793          	addi	x15,x0,255
     668:	fae7d0e3          	bge	x15,x14,608 <parseEXT+0x5f0>
                    }
                    tmpMask <<= 1;
     66c:	fd042783          	lw	x15,-48(x8)
     670:	00179793          	slli	x15,x15,0x1
     674:	fcf42823          	sw	x15,-48(x8)
                for(;j < ub;j++) {
     678:	fb042783          	lw	x15,-80(x8)
     67c:	00178793          	addi	x15,x15,1
     680:	faf42823          	sw	x15,-80(x8)
     684:	fb042703          	lw	x14,-80(x8)
     688:	fb442783          	lw	x15,-76(x8)
     68c:	f6f74ae3          	blt	x14,x15,600 <parseEXT+0x5e8>
     690:	0900006f          	jal	x0,720 <parseEXT+0x708>
                }
            }
            else {
                for(int c = 0;c < 256;c++) {
     694:	fa042223          	sw	x0,-92(x8)
     698:	05c0006f          	jal	x0,6f4 <parseEXT+0x6dc>
                    if(negate ^ char_set[c]) MOVE[c] |= tmpMask;
     69c:	fa442783          	lw	x15,-92(x8)
     6a0:	00279793          	slli	x15,x15,0x2
     6a4:	ff040713          	addi	x14,x8,-16
     6a8:	00f707b3          	add	x15,x14,x15
     6ac:	b947a783          	lw	x15,-1132(x15)
     6b0:	fdc42703          	lw	x14,-36(x8)
     6b4:	02f70a63          	beq	x14,x15,6e8 <parseEXT+0x6d0>
     6b8:	fa442783          	lw	x15,-92(x8)
     6bc:	00279793          	slli	x15,x15,0x2
     6c0:	b6442703          	lw	x14,-1180(x8)
     6c4:	00f707b3          	add	x15,x14,x15
     6c8:	0007a683          	lw	x13,0(x15)
     6cc:	fd042703          	lw	x14,-48(x8)
     6d0:	fa442783          	lw	x15,-92(x8)
     6d4:	00279793          	slli	x15,x15,0x2
     6d8:	b6442603          	lw	x12,-1180(x8)
     6dc:	00f607b3          	add	x15,x12,x15
     6e0:	00e6e733          	or	x14,x13,x14
     6e4:	00e7a023          	sw	x14,0(x15)
                for(int c = 0;c < 256;c++) {
     6e8:	fa442783          	lw	x15,-92(x8)
     6ec:	00178793          	addi	x15,x15,1
     6f0:	faf42223          	sw	x15,-92(x8)
     6f4:	fa442703          	lw	x14,-92(x8)
     6f8:	0ff00793          	addi	x15,x0,255
     6fc:	fae7d0e3          	bge	x15,x14,69c <parseEXT+0x684>
                }
                if(PATTERN[i] != '\0') i--;
     700:	fd442783          	lw	x15,-44(x8)
     704:	b7c42703          	lw	x14,-1156(x8)
     708:	00f707b3          	add	x15,x14,x15
     70c:	0007c783          	lbu	x15,0(x15)
     710:	00078863          	beq	x15,x0,720 <parseEXT+0x708>
     714:	fd442783          	lw	x15,-44(x8)
     718:	fff78793          	addi	x15,x15,-1
     71c:	fcf42a23          	sw	x15,-44(x8)
            }

            if(state_no >= W) return 0;
     720:	fd842703          	lw	x14,-40(x8)
     724:	01f00793          	addi	x15,x0,31
     728:	00e7d663          	bge	x15,x14,734 <parseEXT+0x71c>
     72c:	00000793          	addi	x15,x0,0
     730:	5a80006f          	jal	x0,cd8 <parseEXT+0xcc0>

            char_class = 1;
     734:	00100793          	addi	x15,x0,1
     738:	fef42023          	sw	x15,-32(x8)
     73c:	4740006f          	jal	x0,bb0 <parseEXT+0xb98>
        }

        else {

            // Resetting all info to process next character class separately
            for(int c = 0;c < 256;c++) char_set[c] = 0;
     740:	fa042023          	sw	x0,-96(x8)
     744:	0240006f          	jal	x0,768 <parseEXT+0x750>
     748:	fa042783          	lw	x15,-96(x8)
     74c:	00279793          	slli	x15,x15,0x2
     750:	ff040713          	addi	x14,x8,-16
     754:	00f707b3          	add	x15,x14,x15
     758:	b807aa23          	sw	x0,-1132(x15)
     75c:	fa042783          	lw	x15,-96(x8)
     760:	00178793          	addi	x15,x15,1
     764:	faf42023          	sw	x15,-96(x8)
     768:	fa042703          	lw	x14,-96(x8)
     76c:	0ff00793          	addi	x15,x0,255
     770:	fce7dce3          	bge	x15,x14,748 <parseEXT+0x730>
            negate = 0;
     774:	fc042e23          	sw	x0,-36(x8)
            escape = 0;
     778:	fe042423          	sw	x0,-24(x8)
            range = 0;
     77c:	fe042223          	sw	x0,-28(x8)

            if(PATTERN[i] == '[') {
     780:	fd442783          	lw	x15,-44(x8)
     784:	b7c42703          	lw	x14,-1156(x8)
     788:	00f707b3          	add	x15,x14,x15
     78c:	0007c703          	lbu	x14,0(x15)
     790:	05b00793          	addi	x15,x0,91
     794:	2ef71e63          	bne	x14,x15,a90 <parseEXT+0xa78>
                i++;
     798:	fd442783          	lw	x15,-44(x8)
     79c:	00178793          	addi	x15,x15,1
     7a0:	fcf42a23          	sw	x15,-44(x8)
                int st = i;
     7a4:	fd442783          	lw	x15,-44(x8)
     7a8:	f8f42423          	sw	x15,-120(x8)
                while(PATTERN[i] != '\0') {
     7ac:	2b40006f          	jal	x0,a60 <parseEXT+0xa48>
                    if(escape) {
     7b0:	fe842783          	lw	x15,-24(x8)
     7b4:	0e078063          	beq	x15,x0,894 <parseEXT+0x87c>
                        switch(PATTERN[i]) {
     7b8:	fd442783          	lw	x15,-44(x8)
     7bc:	b7c42703          	lw	x14,-1156(x8)
     7c0:	00f707b3          	add	x15,x14,x15
     7c4:	0007c783          	lbu	x15,0(x15)
     7c8:	fd078793          	addi	x15,x15,-48
     7cc:	04600713          	addi	x14,x0,70
     7d0:	08f76a63          	bltu	x14,x15,864 <parseEXT+0x84c>
     7d4:	00279713          	slli	x14,x15,0x2
     7d8:	000027b7          	lui	x15,0x2
     7dc:	31c78793          	addi	x15,x15,796 # 231c <main+0x2c8>
     7e0:	00f707b3          	add	x15,x14,x15
     7e4:	0007a783          	lw	x15,0(x15)
     7e8:	00078067          	jalr	x0,0(x15)
                            case 'n' :
                                char_set['\n'] = 1;     // new line
     7ec:	00100793          	addi	x15,x0,1
     7f0:	baf42623          	sw	x15,-1108(x8)
                            break;
     7f4:	0980006f          	jal	x0,88c <parseEXT+0x874>
                            case 'r' :
                                char_set['\r'] = 1;     // carriage return 
     7f8:	00100793          	addi	x15,x0,1
     7fc:	baf42c23          	sw	x15,-1096(x8)
                            break;
     800:	08c0006f          	jal	x0,88c <parseEXT+0x874>
                            case 'v' :
                                char_set['\v'] = 1;     // vertical tab
     804:	00100793          	addi	x15,x0,1
     808:	baf42823          	sw	x15,-1104(x8)
                            break;
     80c:	0800006f          	jal	x0,88c <parseEXT+0x874>
                            case 'a' :
                                char_set['\a'] = 1;     // alert bell
     810:	00100793          	addi	x15,x0,1
     814:	baf42023          	sw	x15,-1120(x8)
                            break;
     818:	0740006f          	jal	x0,88c <parseEXT+0x874>
                            case 'b' :
                                char_set['\b'] = 1;     // backspace
     81c:	00100793          	addi	x15,x0,1
     820:	baf42223          	sw	x15,-1116(x8)
                            break;
     824:	0680006f          	jal	x0,88c <parseEXT+0x874>
                            case 't' :
                                char_set['\t'] = 1;     // horizontal tab
     828:	00100793          	addi	x15,x0,1
     82c:	baf42423          	sw	x15,-1112(x8)
                            break;
     830:	05c0006f          	jal	x0,88c <parseEXT+0x874>
                            case 'f' :
                                char_set['\f'] = 1;     // form feed
     834:	00100793          	addi	x15,x0,1
     838:	baf42a23          	sw	x15,-1100(x8)
                            break;
     83c:	0500006f          	jal	x0,88c <parseEXT+0x874>
                            case '0' :  
                                char_set['\0'] = 1;     // null
     840:	00100793          	addi	x15,x0,1
     844:	b8f42223          	sw	x15,-1148(x8)
                            break;
     848:	0440006f          	jal	x0,88c <parseEXT+0x874>
                            case 's' :  
                                char_set[' '] = 1;      // single whitespace
     84c:	00100793          	addi	x15,x0,1
     850:	c0f42223          	sw	x15,-1020(x8)
                            break;
     854:	0380006f          	jal	x0,88c <parseEXT+0x874>
                            case '\\' :
                                char_set['\\'] = 1;     // backslash
     858:	00100793          	addi	x15,x0,1
     85c:	cef42a23          	sw	x15,-780(x8)
                            break;
     860:	02c0006f          	jal	x0,88c <parseEXT+0x874>
                            default :
                                char_set[PATTERN[i]] = 1;
     864:	fd442783          	lw	x15,-44(x8)
     868:	b7c42703          	lw	x14,-1156(x8)
     86c:	00f707b3          	add	x15,x14,x15
     870:	0007c783          	lbu	x15,0(x15)
     874:	00279793          	slli	x15,x15,0x2
     878:	ff040713          	addi	x14,x8,-16
     87c:	00f707b3          	add	x15,x14,x15
     880:	00100713          	addi	x14,x0,1
     884:	b8e7aa23          	sw	x14,-1132(x15)
                            break;
     888:	00000013          	addi	x0,x0,0
                        }
                        escape = 0;
     88c:	fe042423          	sw	x0,-24(x8)
     890:	1c40006f          	jal	x0,a54 <parseEXT+0xa3c>
                    }
                    else if(range) {
     894:	fe442783          	lw	x15,-28(x8)
     898:	08078c63          	beq	x15,x0,930 <parseEXT+0x918>
                        if(PATTERN[i] < PATTERN[i-2]) {
     89c:	fd442783          	lw	x15,-44(x8)
     8a0:	b7c42703          	lw	x14,-1156(x8)
     8a4:	00f707b3          	add	x15,x14,x15
     8a8:	0007c703          	lbu	x14,0(x15)
     8ac:	fd442783          	lw	x15,-44(x8)
     8b0:	ffe78793          	addi	x15,x15,-2
     8b4:	b7c42683          	lw	x13,-1156(x8)
     8b8:	00f687b3          	add	x15,x13,x15
     8bc:	0007c783          	lbu	x15,0(x15)
     8c0:	00f77663          	bgeu	x14,x15,8cc <parseEXT+0x8b4>
                            return 0;
     8c4:	00000793          	addi	x15,x0,0
     8c8:	4100006f          	jal	x0,cd8 <parseEXT+0xcc0>
                        }
                        for(int c = PATTERN[i-2];c <= PATTERN[i];c++) char_set[c] = 1;
     8cc:	fd442783          	lw	x15,-44(x8)
     8d0:	ffe78793          	addi	x15,x15,-2
     8d4:	b7c42703          	lw	x14,-1156(x8)
     8d8:	00f707b3          	add	x15,x14,x15
     8dc:	0007c783          	lbu	x15,0(x15)
     8e0:	f8f42e23          	sw	x15,-100(x8)
     8e4:	0280006f          	jal	x0,90c <parseEXT+0x8f4>
     8e8:	f9c42783          	lw	x15,-100(x8)
     8ec:	00279793          	slli	x15,x15,0x2
     8f0:	ff040713          	addi	x14,x8,-16
     8f4:	00f707b3          	add	x15,x14,x15
     8f8:	00100713          	addi	x14,x0,1
     8fc:	b8e7aa23          	sw	x14,-1132(x15)
     900:	f9c42783          	lw	x15,-100(x8)
     904:	00178793          	addi	x15,x15,1
     908:	f8f42e23          	sw	x15,-100(x8)
     90c:	fd442783          	lw	x15,-44(x8)
     910:	b7c42703          	lw	x14,-1156(x8)
     914:	00f707b3          	add	x15,x14,x15
     918:	0007c783          	lbu	x15,0(x15)
     91c:	00078713          	addi	x14,x15,0
     920:	f9c42783          	lw	x15,-100(x8)
     924:	fcf752e3          	bge	x14,x15,8e8 <parseEXT+0x8d0>
                        range = 0;
     928:	fe042223          	sw	x0,-28(x8)
     92c:	1280006f          	jal	x0,a54 <parseEXT+0xa3c>
                    }
                    else if(PATTERN[i] == '\\') escape = 1;
     930:	fd442783          	lw	x15,-44(x8)
     934:	b7c42703          	lw	x14,-1156(x8)
     938:	00f707b3          	add	x15,x14,x15
     93c:	0007c703          	lbu	x14,0(x15)
     940:	05c00793          	addi	x15,x0,92
     944:	00f71863          	bne	x14,x15,954 <parseEXT+0x93c>
     948:	00100793          	addi	x15,x0,1
     94c:	fef42423          	sw	x15,-24(x8)
     950:	1040006f          	jal	x0,a54 <parseEXT+0xa3c>
                    else if(PATTERN[i] == '-') {
     954:	fd442783          	lw	x15,-44(x8)
     958:	b7c42703          	lw	x14,-1156(x8)
     95c:	00f707b3          	add	x15,x14,x15
     960:	0007c703          	lbu	x14,0(x15)
     964:	02d00793          	addi	x15,x0,45
     968:	04f71e63          	bne	x14,x15,9c4 <parseEXT+0x9ac>
                        if(i == st || (i == st+1 && negate) || PATTERN[i+1] == ']') char_set['-'] = 1;
     96c:	fd442703          	lw	x14,-44(x8)
     970:	f8842783          	lw	x15,-120(x8)
     974:	02f70c63          	beq	x14,x15,9ac <parseEXT+0x994>
     978:	f8842783          	lw	x15,-120(x8)
     97c:	00178793          	addi	x15,x15,1
     980:	fd442703          	lw	x14,-44(x8)
     984:	00f71663          	bne	x14,x15,990 <parseEXT+0x978>
     988:	fdc42783          	lw	x15,-36(x8)
     98c:	02079063          	bne	x15,x0,9ac <parseEXT+0x994>
     990:	fd442783          	lw	x15,-44(x8)
     994:	00178793          	addi	x15,x15,1
     998:	b7c42703          	lw	x14,-1156(x8)
     99c:	00f707b3          	add	x15,x14,x15
     9a0:	0007c703          	lbu	x14,0(x15)
     9a4:	05d00793          	addi	x15,x0,93
     9a8:	00f71863          	bne	x14,x15,9b8 <parseEXT+0x9a0>
     9ac:	00100793          	addi	x15,x0,1
     9b0:	c2f42c23          	sw	x15,-968(x8)
     9b4:	0a00006f          	jal	x0,a54 <parseEXT+0xa3c>
                        else range = 1;
     9b8:	00100793          	addi	x15,x0,1
     9bc:	fef42223          	sw	x15,-28(x8)
     9c0:	0940006f          	jal	x0,a54 <parseEXT+0xa3c>
                    }
                    else if(i == st && PATTERN[i] == '^') negate = 1;
     9c4:	fd442703          	lw	x14,-44(x8)
     9c8:	f8842783          	lw	x15,-120(x8)
     9cc:	02f71463          	bne	x14,x15,9f4 <parseEXT+0x9dc>
     9d0:	fd442783          	lw	x15,-44(x8)
     9d4:	b7c42703          	lw	x14,-1156(x8)
     9d8:	00f707b3          	add	x15,x14,x15
     9dc:	0007c703          	lbu	x14,0(x15)
     9e0:	05e00793          	addi	x15,x0,94
     9e4:	00f71863          	bne	x14,x15,9f4 <parseEXT+0x9dc>
     9e8:	00100793          	addi	x15,x0,1
     9ec:	fcf42e23          	sw	x15,-36(x8)
     9f0:	0640006f          	jal	x0,a54 <parseEXT+0xa3c>
                    else if(PATTERN[i] == ']') {
     9f4:	fd442783          	lw	x15,-44(x8)
     9f8:	b7c42703          	lw	x14,-1156(x8)
     9fc:	00f707b3          	add	x15,x14,x15
     a00:	0007c703          	lbu	x14,0(x15)
     a04:	05d00793          	addi	x15,x0,93
     a08:	02f71463          	bne	x14,x15,a30 <parseEXT+0xa18>
                        if(i == st+1 && negate) char_set[']'] = 1;
     a0c:	f8842783          	lw	x15,-120(x8)
     a10:	00178793          	addi	x15,x15,1
     a14:	fd442703          	lw	x14,-44(x8)
     a18:	04f71e63          	bne	x14,x15,a74 <parseEXT+0xa5c>
     a1c:	fdc42783          	lw	x15,-36(x8)
     a20:	04078a63          	beq	x15,x0,a74 <parseEXT+0xa5c>
     a24:	00100793          	addi	x15,x0,1
     a28:	cef42c23          	sw	x15,-776(x8)
     a2c:	0280006f          	jal	x0,a54 <parseEXT+0xa3c>
                        else break;
                    }
                    else char_set[PATTERN[i]] = 1;
     a30:	fd442783          	lw	x15,-44(x8)
     a34:	b7c42703          	lw	x14,-1156(x8)
     a38:	00f707b3          	add	x15,x14,x15
     a3c:	0007c783          	lbu	x15,0(x15)
     a40:	00279793          	slli	x15,x15,0x2
     a44:	ff040713          	addi	x14,x8,-16
     a48:	00f707b3          	add	x15,x14,x15
     a4c:	00100713          	addi	x14,x0,1
     a50:	b8e7aa23          	sw	x14,-1132(x15)
                    i++;
     a54:	fd442783          	lw	x15,-44(x8)
     a58:	00178793          	addi	x15,x15,1
     a5c:	fcf42a23          	sw	x15,-44(x8)
                while(PATTERN[i] != '\0') {
     a60:	fd442783          	lw	x15,-44(x8)
     a64:	b7c42703          	lw	x14,-1156(x8)
     a68:	00f707b3          	add	x15,x14,x15
     a6c:	0007c783          	lbu	x15,0(x15)
     a70:	d40790e3          	bne	x15,x0,7b0 <parseEXT+0x798>
                }
                if(PATTERN[i] == '\0') return 0;
     a74:	fd442783          	lw	x15,-44(x8)
     a78:	b7c42703          	lw	x14,-1156(x8)
     a7c:	00f707b3          	add	x15,x14,x15
     a80:	0007c783          	lbu	x15,0(x15)
     a84:	12079463          	bne	x15,x0,bac <parseEXT+0xb94>
     a88:	00000793          	addi	x15,x0,0
     a8c:	24c0006f          	jal	x0,cd8 <parseEXT+0xcc0>
            }
            else if(PATTERN[i] == '\\') {
     a90:	fd442783          	lw	x15,-44(x8)
     a94:	b7c42703          	lw	x14,-1156(x8)
     a98:	00f707b3          	add	x15,x14,x15
     a9c:	0007c703          	lbu	x14,0(x15)
     aa0:	05c00793          	addi	x15,x0,92
     aa4:	0ef71263          	bne	x14,x15,b88 <parseEXT+0xb70>
                i++;
     aa8:	fd442783          	lw	x15,-44(x8)
     aac:	00178793          	addi	x15,x15,1
     ab0:	fcf42a23          	sw	x15,-44(x8)
                switch(PATTERN[i]) {
     ab4:	fd442783          	lw	x15,-44(x8)
     ab8:	b7c42703          	lw	x14,-1156(x8)
     abc:	00f707b3          	add	x15,x14,x15
     ac0:	0007c783          	lbu	x15,0(x15)
     ac4:	fd078793          	addi	x15,x15,-48
     ac8:	04600713          	addi	x14,x0,70
     acc:	08f76a63          	bltu	x14,x15,b60 <parseEXT+0xb48>
     ad0:	00279713          	slli	x14,x15,0x2
     ad4:	000027b7          	lui	x15,0x2
     ad8:	43878793          	addi	x15,x15,1080 # 2438 <main+0x3e4>
     adc:	00f707b3          	add	x15,x14,x15
     ae0:	0007a783          	lw	x15,0(x15)
     ae4:	00078067          	jalr	x0,0(x15)
                    case 'n' :
                        char_set['\n'] = 1;
     ae8:	00100793          	addi	x15,x0,1
     aec:	baf42623          	sw	x15,-1108(x8)
                    break;
     af0:	0bc0006f          	jal	x0,bac <parseEXT+0xb94>
                    case 'r' :
                        char_set['\r'] = 1;
     af4:	00100793          	addi	x15,x0,1
     af8:	baf42c23          	sw	x15,-1096(x8)
                    break;
     afc:	0b00006f          	jal	x0,bac <parseEXT+0xb94>
                    case 'v' :
                        char_set['\v'] = 1;
     b00:	00100793          	addi	x15,x0,1
     b04:	baf42823          	sw	x15,-1104(x8)
                    break;
     b08:	0a40006f          	jal	x0,bac <parseEXT+0xb94>
                    case 'a' :
                        char_set['\a'] = 1;
     b0c:	00100793          	addi	x15,x0,1
     b10:	baf42023          	sw	x15,-1120(x8)
                    break;
     b14:	0980006f          	jal	x0,bac <parseEXT+0xb94>
                    case 'b' :
                        char_set['\b'] = 1;
     b18:	00100793          	addi	x15,x0,1
     b1c:	baf42223          	sw	x15,-1116(x8)
                    break;
     b20:	08c0006f          	jal	x0,bac <parseEXT+0xb94>
                    case 't' :
                        char_set['\t'] = 1;
     b24:	00100793          	addi	x15,x0,1
     b28:	baf42423          	sw	x15,-1112(x8)
                    break;
     b2c:	0800006f          	jal	x0,bac <parseEXT+0xb94>
                    case 'f' :
                        char_set['\f'] = 1;
     b30:	00100793          	addi	x15,x0,1
     b34:	baf42a23          	sw	x15,-1100(x8)
                    break;
     b38:	0740006f          	jal	x0,bac <parseEXT+0xb94>
                    case '0' :
                        char_set['\0'] = 1;
     b3c:	00100793          	addi	x15,x0,1
     b40:	b8f42223          	sw	x15,-1148(x8)
                    break;
     b44:	0680006f          	jal	x0,bac <parseEXT+0xb94>
                    case 's' :  
                        char_set[' '] = 1;
     b48:	00100793          	addi	x15,x0,1
     b4c:	c0f42223          	sw	x15,-1020(x8)
                    break;
     b50:	05c0006f          	jal	x0,bac <parseEXT+0xb94>
                    case '\\' :
                        char_set['\\'] = 1;
     b54:	00100793          	addi	x15,x0,1
     b58:	cef42a23          	sw	x15,-780(x8)
                    break;
     b5c:	0500006f          	jal	x0,bac <parseEXT+0xb94>
                    default :
                        char_set[PATTERN[i]] = 1;
     b60:	fd442783          	lw	x15,-44(x8)
     b64:	b7c42703          	lw	x14,-1156(x8)
     b68:	00f707b3          	add	x15,x14,x15
     b6c:	0007c783          	lbu	x15,0(x15)
     b70:	00279793          	slli	x15,x15,0x2
     b74:	ff040713          	addi	x14,x8,-16
     b78:	00f707b3          	add	x15,x14,x15
     b7c:	00100713          	addi	x14,x0,1
     b80:	b8e7aa23          	sw	x14,-1132(x15)
                    break;
     b84:	0280006f          	jal	x0,bac <parseEXT+0xb94>
                }
            }
            else char_set[PATTERN[i]] = 1;
     b88:	fd442783          	lw	x15,-44(x8)
     b8c:	b7c42703          	lw	x14,-1156(x8)
     b90:	00f707b3          	add	x15,x14,x15
     b94:	0007c783          	lbu	x15,0(x15)
     b98:	00279793          	slli	x15,x15,0x2
     b9c:	ff040713          	addi	x14,x8,-16
     ba0:	00f707b3          	add	x15,x14,x15
     ba4:	00100713          	addi	x14,x0,1
     ba8:	b8e7aa23          	sw	x14,-1132(x15)

            char_class = 0;
     bac:	fe042023          	sw	x0,-32(x8)
    for(int i = 0; !char_class || PATTERN[i] != '\0'; i++) {
     bb0:	fd442783          	lw	x15,-44(x8)
     bb4:	00178793          	addi	x15,x15,1
     bb8:	fcf42a23          	sw	x15,-44(x8)
     bbc:	fe042783          	lw	x15,-32(x8)
     bc0:	d2078263          	beq	x15,x0,e4 <parseEXT+0xcc>
     bc4:	fd442783          	lw	x15,-44(x8)
     bc8:	b7c42703          	lw	x14,-1156(x8)
     bcc:	00f707b3          	add	x15,x14,x15
     bd0:	0007c783          	lbu	x15,0(x15)
     bd4:	d0079863          	bne	x15,x0,e4 <parseEXT+0xcc>

        }

    }

    *ACCEPT = (1<<state_no);
     bd8:	fd842783          	lw	x15,-40(x8)
     bdc:	00100713          	addi	x14,x0,1
     be0:	00f717b3          	sll	x15,x14,x15
     be4:	00078713          	addi	x14,x15,0
     be8:	b7442783          	lw	x15,-1164(x8)
     bec:	00e7a023          	sw	x14,0(x15)

    for(int i = 0;i < W-1;i++) {
     bf0:	f8042c23          	sw	x0,-104(x8)
     bf4:	0b00006f          	jal	x0,ca4 <parseEXT+0xc8c>
        int tmpMask = (1<<i);
     bf8:	f9842783          	lw	x15,-104(x8)
     bfc:	00100713          	addi	x14,x0,1
     c00:	00f717b3          	sll	x15,x14,x15
     c04:	f8f42a23          	sw	x15,-108(x8)
        int pres_bit = ( ((*EpsBLK) & tmpMask) != 0 ), nxt_bit = ( ((*EpsBLK) & (tmpMask<<1)) != 0);
     c08:	b6842783          	lw	x15,-1176(x8)
     c0c:	0007a703          	lw	x14,0(x15)
     c10:	f9442783          	lw	x15,-108(x8)
     c14:	00f777b3          	and	x15,x14,x15
     c18:	00f037b3          	sltu	x15,x0,x15
     c1c:	0ff7f793          	andi	x15,x15,255
     c20:	f8f42823          	sw	x15,-112(x8)
     c24:	b6842783          	lw	x15,-1176(x8)
     c28:	0007a783          	lw	x15,0(x15)
     c2c:	f9442703          	lw	x14,-108(x8)
     c30:	00171713          	slli	x14,x14,0x1
     c34:	00e7f7b3          	and	x15,x15,x14
     c38:	00f037b3          	sltu	x15,x0,x15
     c3c:	0ff7f793          	andi	x15,x15,255
     c40:	f8f42623          	sw	x15,-116(x8)
        if(!pres_bit && nxt_bit) (*EpsBEG) |= tmpMask;
     c44:	f9042783          	lw	x15,-112(x8)
     c48:	02079463          	bne	x15,x0,c70 <parseEXT+0xc58>
     c4c:	f8c42783          	lw	x15,-116(x8)
     c50:	02078063          	beq	x15,x0,c70 <parseEXT+0xc58>
     c54:	b7042783          	lw	x15,-1168(x8)
     c58:	0007a703          	lw	x14,0(x15)
     c5c:	f9442783          	lw	x15,-108(x8)
     c60:	00f76733          	or	x14,x14,x15
     c64:	b7042783          	lw	x15,-1168(x8)
     c68:	00e7a023          	sw	x14,0(x15)
     c6c:	02c0006f          	jal	x0,c98 <parseEXT+0xc80>
        else if(pres_bit && !nxt_bit) (*EpsEND) |= tmpMask;
     c70:	f9042783          	lw	x15,-112(x8)
     c74:	02078263          	beq	x15,x0,c98 <parseEXT+0xc80>
     c78:	f8c42783          	lw	x15,-116(x8)
     c7c:	00079e63          	bne	x15,x0,c98 <parseEXT+0xc80>
     c80:	b6c42783          	lw	x15,-1172(x8)
     c84:	0007a703          	lw	x14,0(x15)
     c88:	f9442783          	lw	x15,-108(x8)
     c8c:	00f76733          	or	x14,x14,x15
     c90:	b6c42783          	lw	x15,-1172(x8)
     c94:	00e7a023          	sw	x14,0(x15)
    for(int i = 0;i < W-1;i++) {
     c98:	f9842783          	lw	x15,-104(x8)
     c9c:	00178793          	addi	x15,x15,1
     ca0:	f8f42c23          	sw	x15,-104(x8)
     ca4:	f9842703          	lw	x14,-104(x8)
     ca8:	01e00793          	addi	x15,x0,30
     cac:	f4e7d6e3          	bge	x15,x14,bf8 <parseEXT+0xbe0>
    }
    if((*EpsBLK) & (1<<(W-1))) (*EpsEND) |= (1<<(W-1));
     cb0:	b6842783          	lw	x15,-1176(x8)
     cb4:	0007a783          	lw	x15,0(x15)
     cb8:	0007de63          	bge	x15,x0,cd4 <parseEXT+0xcbc>
     cbc:	b6c42783          	lw	x15,-1172(x8)
     cc0:	0007a703          	lw	x14,0(x15)
     cc4:	800007b7          	lui	x15,0x80000
     cc8:	00f76733          	or	x14,x14,x15
     ccc:	b6c42783          	lw	x15,-1172(x8)
     cd0:	00e7a023          	sw	x14,0(x15) # 80000000 <__stack_top+0x7ffc0000>

    return 1;
     cd4:	00100793          	addi	x15,x0,1
}
     cd8:	00078513          	addi	x10,x15,0
     cdc:	49c12403          	lw	x8,1180(x2)
     ce0:	4a010113          	addi	x2,x2,1184
     ce4:	00008067          	jalr	x0,0(x1)

00000ce8 <Input1_2>:
#define EpsEND_ADDR 4112            // (1<<12) + 16
#define INIT_ADDR 4120              // (1<<12) + 24
#define ACCEPT_ADDR 4128            // (1<<12) + 32

// Function to write data to Data Buffer (64 bits) in Peripheral Interface. LSB = 1 denotes lower 32 bits, LSB = 0 denotes higher 32 bits
void Input1_2(unsigned int data, int LSB) {
     ce8:	fd010113          	addi	x2,x2,-48
     cec:	02812623          	sw	x8,44(x2)
     cf0:	03010413          	addi	x8,x2,48
     cf4:	fca42e23          	sw	x10,-36(x8)
     cf8:	fcb42c23          	sw	x11,-40(x8)
    int *p = (LSB) ? (int*)(PMP_INTERFACE_BASE + PMP_WRITE_LS32B_OFFSET) : (int*)(PMP_INTERFACE_BASE + PMP_WRITE_MS32B_OFFSET);
     cfc:	fd842783          	lw	x15,-40(x8)
     d00:	00078663          	beq	x15,x0,d0c <Input1_2+0x24>
     d04:	004007b7          	lui	x15,0x400
     d08:	00c0006f          	jal	x0,d14 <Input1_2+0x2c>
     d0c:	004007b7          	lui	x15,0x400
     d10:	00478793          	addi	x15,x15,4 # 400004 <__stack_top+0x3c0004>
     d14:	fef42623          	sw	x15,-20(x8)
    *p  = data;
     d18:	fdc42703          	lw	x14,-36(x8)
     d1c:	fec42783          	lw	x15,-20(x8)
     d20:	00e7a023          	sw	x14,0(x15)
}
     d24:	00000013          	addi	x0,x0,0
     d28:	02c12403          	lw	x8,44(x2)
     d2c:	03010113          	addi	x2,x2,48
     d30:	00008067          	jalr	x0,0(x1)

00000d34 <Input1_2LL>:

// The above function overloaded to write long long data to Data Buffer as intended
void Input1_2LL(long long data) {
     d34:	fd010113          	addi	x2,x2,-48
     d38:	02812623          	sw	x8,44(x2)
     d3c:	03010413          	addi	x8,x2,48
     d40:	fca42c23          	sw	x10,-40(x8)
     d44:	fcb42e23          	sw	x11,-36(x8)
    int *p1 = (int*)(PMP_INTERFACE_BASE + PMP_WRITE_LS32B_OFFSET), *p2 = (int*)(PMP_INTERFACE_BASE + PMP_WRITE_MS32B_OFFSET);
     d48:	004006b7          	lui	x13,0x400
     d4c:	fed42623          	sw	x13,-20(x8)
     d50:	004006b7          	lui	x13,0x400
     d54:	00468693          	addi	x13,x13,4 # 400004 <__stack_top+0x3c0004>
     d58:	fed42423          	sw	x13,-24(x8)
    unsigned int LS32B = data & 0xFFFFFFFF, MS32B = data>>32;
     d5c:	fd842683          	lw	x13,-40(x8)
     d60:	fed42223          	sw	x13,-28(x8)
     d64:	fdc42683          	lw	x13,-36(x8)
     d68:	4006d713          	srai	x14,x13,0x0
     d6c:	fdc42683          	lw	x13,-36(x8)
     d70:	41f6d793          	srai	x15,x13,0x1f
     d74:	fee42023          	sw	x14,-32(x8)
    *p1 = LS32B;
     d78:	fe442703          	lw	x14,-28(x8)
     d7c:	fec42783          	lw	x15,-20(x8)
     d80:	00e7a023          	sw	x14,0(x15)
    *p2 = MS32B;
     d84:	fe042703          	lw	x14,-32(x8)
     d88:	fe842783          	lw	x15,-24(x8)
     d8c:	00e7a023          	sw	x14,0(x15)
} 
     d90:	00000013          	addi	x0,x0,0
     d94:	02c12403          	lw	x8,44(x2)
     d98:	03010113          	addi	x2,x2,48
     d9c:	00008067          	jalr	x0,0(x1)

00000da0 <Input3>:

// Function to pass control data to Periperal Interface
// Instruction Format -  MODE |  OPCODE  |   ADDRESS    |     TARGET_MODULE_ID
//                      1 bit |  2 bits  |   14 bits    |         15 bits
void Input3(int mode, int opcode, int address, int module_ID) {
     da0:	fd010113          	addi	x2,x2,-48
     da4:	02812623          	sw	x8,44(x2)
     da8:	03010413          	addi	x8,x2,48
     dac:	fca42e23          	sw	x10,-36(x8)
     db0:	fcb42c23          	sw	x11,-40(x8)
     db4:	fcc42a23          	sw	x12,-44(x8)
     db8:	fcd42823          	sw	x13,-48(x8)
    int *p = (int *)(PMP_INTERFACE_BASE + PMP_WRITE_CONTROL_OFFSET);
     dbc:	004007b7          	lui	x15,0x400
     dc0:	00878793          	addi	x15,x15,8 # 400008 <__stack_top+0x3c0008>
     dc4:	fef42623          	sw	x15,-20(x8)
    *p = (mode<<31) | (opcode<<29) | (address<<15) | (module_ID & 0x7FFF);
     dc8:	fdc42783          	lw	x15,-36(x8)
     dcc:	01f79713          	slli	x14,x15,0x1f
     dd0:	fd842783          	lw	x15,-40(x8)
     dd4:	01d79793          	slli	x15,x15,0x1d
     dd8:	00f76733          	or	x14,x14,x15
     ddc:	fd442783          	lw	x15,-44(x8)
     de0:	00f79793          	slli	x15,x15,0xf
     de4:	00f76733          	or	x14,x14,x15
     de8:	fd042683          	lw	x13,-48(x8)
     dec:	000087b7          	lui	x15,0x8
     df0:	fff78793          	addi	x15,x15,-1 # 7fff <__SDATA_BEGIN__+0x492b>
     df4:	00f6f7b3          	and	x15,x13,x15
     df8:	00f76733          	or	x14,x14,x15
     dfc:	fec42783          	lw	x15,-20(x8)
     e00:	00e7a023          	sw	x14,0(x15)
}
     e04:	00000013          	addi	x0,x0,0
     e08:	02c12403          	lw	x8,44(x2)
     e0c:	03010113          	addi	x2,x2,48
     e10:	00008067          	jalr	x0,0(x1)

00000e14 <Complete_Handshaking>:

// Function to complete the handshaking with peripheral by waiting till DATA ACCEPTED signal is high, 
// and then sending a No Operation instrucion to make DATA VALID signal low and complete one operation.
// Returns - the PATTERN_ACCEPTED status
unsigned int Complete_Handshaking(unsigned int REQD_DATA_ACCEPTED) {
     e14:	fc010113          	addi	x2,x2,-64
     e18:	02812e23          	sw	x8,60(x2)
     e1c:	04010413          	addi	x8,x2,64
     e20:	fca42623          	sw	x10,-52(x8)
    int *p1 = (int *)(PMP_INTERFACE_BASE + PMP_READ_DATA_ACCEPTED_OFFSET);
     e24:	004007b7          	lui	x15,0x400
     e28:	00c78793          	addi	x15,x15,12 # 40000c <__stack_top+0x3c000c>
     e2c:	fef42423          	sw	x15,-24(x8)
    // Waiting till the operations are completed in the modules (under operation)
    while( ((*p1) & 0xF) != REQD_DATA_ACCEPTED );
     e30:	00000013          	addi	x0,x0,0
     e34:	fe842783          	lw	x15,-24(x8)
     e38:	0007a783          	lw	x15,0(x15)
     e3c:	00f7f793          	andi	x15,x15,15
     e40:	fcc42703          	lw	x14,-52(x8)
     e44:	fef718e3          	bne	x14,x15,e34 <Complete_Handshaking+0x20>

    int *p = (int *)(PMP_INTERFACE_BASE + PMP_READ_PATTERN_ACCEPTED_OFFSET);
     e48:	004007b7          	lui	x15,0x400
     e4c:	01078793          	addi	x15,x15,16 # 400010 <__stack_top+0x3c0010>
     e50:	fef42223          	sw	x15,-28(x8)
    unsigned int PATTERN_ACCEPTED_STATUS = (*p);
     e54:	fe442783          	lw	x15,-28(x8)
     e58:	0007a783          	lw	x15,0(x15)
     e5c:	fef42023          	sw	x15,-32(x8)

    int *p2 = (int *)(PMP_INTERFACE_BASE + PMP_WRITE_CONTROL_OFFSET);
     e60:	004007b7          	lui	x15,0x400
     e64:	00878793          	addi	x15,x15,8 # 400008 <__stack_top+0x3c0008>
     e68:	fcf42e23          	sw	x15,-36(x8)
    // Sending a No operation to the necessary modules to conclude the handshaking 
    for(int i = 0; i < NO_MODULES; i++) {
     e6c:	fe042623          	sw	x0,-20(x8)
     e70:	0380006f          	jal	x0,ea8 <Complete_Handshaking+0x94>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
     e74:	fec42783          	lw	x15,-20(x8)
     e78:	00100713          	addi	x14,x0,1
     e7c:	00f717b3          	sll	x15,x14,x15
     e80:	00078713          	addi	x14,x15,0
     e84:	fcc42783          	lw	x15,-52(x8)
     e88:	00f777b3          	and	x15,x14,x15
     e8c:	00078863          	beq	x15,x0,e9c <Complete_Handshaking+0x88>
            *p2 = i;    // opcode = 00 -> No Operation ; Only MODULE_ID therefore has to be sent
     e90:	fdc42783          	lw	x15,-36(x8)
     e94:	fec42703          	lw	x14,-20(x8)
     e98:	00e7a023          	sw	x14,0(x15)
    for(int i = 0; i < NO_MODULES; i++) {
     e9c:	fec42783          	lw	x15,-20(x8)
     ea0:	00178793          	addi	x15,x15,1
     ea4:	fef42623          	sw	x15,-20(x8)
     ea8:	fec42703          	lw	x14,-20(x8)
     eac:	00300793          	addi	x15,x0,3
     eb0:	fce7d2e3          	bge	x15,x14,e74 <Complete_Handshaking+0x60>
        }
    }

    // Waiting for the No operation to be reflected in the modules (under operation)
    while( ((*p1) & REQD_DATA_ACCEPTED) != 0 );
     eb4:	00000013          	addi	x0,x0,0
     eb8:	fe842783          	lw	x15,-24(x8)
     ebc:	0007a783          	lw	x15,0(x15)
     ec0:	00078713          	addi	x14,x15,0
     ec4:	fcc42783          	lw	x15,-52(x8)
     ec8:	00f777b3          	and	x15,x14,x15
     ecc:	fe0796e3          	bne	x15,x0,eb8 <Complete_Handshaking+0xa4>

    return PATTERN_ACCEPTED_STATUS;
     ed0:	fe042783          	lw	x15,-32(x8)
}
     ed4:	00078513          	addi	x10,x15,0
     ed8:	03c12403          	lw	x8,60(x2)
     edc:	04010113          	addi	x2,x2,64
     ee0:	00008067          	jalr	x0,0(x1)

00000ee4 <PreProcessAll_M0>:
        patterns[4] - each is a char* string, Ith string is the pattern to be sent to the Ith module. "\0" represents empty pattern (i.e) Ith module need not be used
    Returns :
        An integer which is a bitmask, where Ith place being 1 implies that module was used, 
                                                             0 implies either the module wasn't required or the provided pattern couldn't be processed
 */
int PreProcessAll_M0(char *patterns[NO_MODULES]) {
     ee4:	f5010113          	addi	x2,x2,-176
     ee8:	0a112623          	sw	x1,172(x2)
     eec:	0a812423          	sw	x8,168(x2)
     ef0:	0b010413          	addi	x8,x2,176
     ef4:	ffffe337          	lui	x6,0xffffe
     ef8:	00610133          	add	x2,x2,x6
     efc:	ffffe7b7          	lui	x15,0xffffe
     f00:	ff040713          	addi	x14,x8,-16
     f04:	00f707b3          	add	x15,x14,x15
     f08:	f6a7a623          	sw	x10,-148(x15) # ffffdf6c <__stack_top+0xfffbdf6c>

    unsigned int INIT[4], ACCEPT[4], EpsBEG[4], EpsEND[4] ,EpsBLK[4];
    unsigned int SELFLOOP[4][256], MOVE[4][256];

    unsigned int REQD_DATA_ACCEPTED = 0;
     f0c:	fe042623          	sw	x0,-20(x8)

    for(int i = 0; i < NO_MODULES; i++) {
     f10:	fe042423          	sw	x0,-24(x8)
     f14:	1180006f          	jal	x0,102c <PreProcessAll_M0+0x148>
        if(patterns[i][0] != '\0') {
     f18:	fe842783          	lw	x15,-24(x8)
     f1c:	00279793          	slli	x15,x15,0x2
     f20:	ffffe737          	lui	x14,0xffffe
     f24:	ff040693          	addi	x13,x8,-16
     f28:	00e68733          	add	x14,x13,x14
     f2c:	f6c72703          	lw	x14,-148(x14) # ffffdf6c <__stack_top+0xfffbdf6c>
     f30:	00f707b3          	add	x15,x14,x15
     f34:	0007a783          	lw	x15,0(x15)
     f38:	0007c783          	lbu	x15,0(x15)
     f3c:	0e078263          	beq	x15,x0,1020 <PreProcessAll_M0+0x13c>
            int ret_code = parseEXT(patterns[i], &INIT[i], &ACCEPT[i], &EpsBEG[i], &EpsEND[i], &EpsBLK[i], MOVE[i], SELFLOOP[i]);
     f40:	fe842783          	lw	x15,-24(x8)
     f44:	00279793          	slli	x15,x15,0x2
     f48:	ffffe737          	lui	x14,0xffffe
     f4c:	ff040693          	addi	x13,x8,-16
     f50:	00e68733          	add	x14,x13,x14
     f54:	f6c72703          	lw	x14,-148(x14) # ffffdf6c <__stack_top+0xfffbdf6c>
     f58:	00f707b3          	add	x15,x14,x15
     f5c:	0007a503          	lw	x10,0(x15)
     f60:	fa840713          	addi	x14,x8,-88
     f64:	fe842783          	lw	x15,-24(x8)
     f68:	00279793          	slli	x15,x15,0x2
     f6c:	00f705b3          	add	x11,x14,x15
     f70:	f9840713          	addi	x14,x8,-104
     f74:	fe842783          	lw	x15,-24(x8)
     f78:	00279793          	slli	x15,x15,0x2
     f7c:	00f70633          	add	x12,x14,x15
     f80:	f8840713          	addi	x14,x8,-120
     f84:	fe842783          	lw	x15,-24(x8)
     f88:	00279793          	slli	x15,x15,0x2
     f8c:	00f706b3          	add	x13,x14,x15
     f90:	f7840713          	addi	x14,x8,-136
     f94:	fe842783          	lw	x15,-24(x8)
     f98:	00279793          	slli	x15,x15,0x2
     f9c:	00f70333          	add	x6,x14,x15
     fa0:	f6840713          	addi	x14,x8,-152
     fa4:	fe842783          	lw	x15,-24(x8)
     fa8:	00279793          	slli	x15,x15,0x2
     fac:	00f70e33          	add	x28,x14,x15
     fb0:	ffffe7b7          	lui	x15,0xffffe
     fb4:	f7878793          	addi	x15,x15,-136 # ffffdf78 <__stack_top+0xfffbdf78>
     fb8:	ff040713          	addi	x14,x8,-16
     fbc:	00f70733          	add	x14,x14,x15
     fc0:	fe842783          	lw	x15,-24(x8)
     fc4:	00a79793          	slli	x15,x15,0xa
     fc8:	00f70833          	add	x16,x14,x15
     fcc:	fffff7b7          	lui	x15,0xfffff
     fd0:	f7878793          	addi	x15,x15,-136 # ffffef78 <__stack_top+0xfffbef78>
     fd4:	ff040713          	addi	x14,x8,-16
     fd8:	00f70733          	add	x14,x14,x15
     fdc:	fe842783          	lw	x15,-24(x8)
     fe0:	00a79793          	slli	x15,x15,0xa
     fe4:	00f707b3          	add	x15,x14,x15
     fe8:	00078893          	addi	x17,x15,0
     fec:	000e0793          	addi	x15,x28,0
     ff0:	00030713          	addi	x14,x6,0 # ffffe000 <__stack_top+0xfffbe000>
     ff4:	824ff0ef          	jal	x1,18 <parseEXT>
     ff8:	faa42c23          	sw	x10,-72(x8)
            if(ret_code) {
     ffc:	fb842783          	lw	x15,-72(x8)
    1000:	02078063          	beq	x15,x0,1020 <PreProcessAll_M0+0x13c>
                REQD_DATA_ACCEPTED |= (1<<i);
    1004:	fe842783          	lw	x15,-24(x8)
    1008:	00100713          	addi	x14,x0,1
    100c:	00f717b3          	sll	x15,x14,x15
    1010:	00078713          	addi	x14,x15,0
    1014:	fec42783          	lw	x15,-20(x8)
    1018:	00e7e7b3          	or	x15,x15,x14
    101c:	fef42623          	sw	x15,-20(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1020:	fe842783          	lw	x15,-24(x8)
    1024:	00178793          	addi	x15,x15,1
    1028:	fef42423          	sw	x15,-24(x8)
    102c:	fe842703          	lw	x14,-24(x8)
    1030:	00300793          	addi	x15,x0,3
    1034:	eee7d2e3          	bge	x15,x14,f18 <PreProcessAll_M0+0x34>
        }
    }

    // opcode = 1 : Input for preprocessing
    // Writing EpsBEG to peripheral
    int opcode = 1, address = EpsBEG_ADDR;
    1038:	00100793          	addi	x15,x0,1
    103c:	fcf42023          	sw	x15,-64(x8)
    1040:	000017b7          	lui	x15,0x1
    1044:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1048:	fe042223          	sw	x0,-28(x8)
    104c:	0600006f          	jal	x0,10ac <PreProcessAll_M0+0x1c8>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    1050:	fe442783          	lw	x15,-28(x8)
    1054:	00100713          	addi	x14,x0,1
    1058:	00f717b3          	sll	x15,x14,x15
    105c:	00078713          	addi	x14,x15,0 # 1000 <PreProcessAll_M0+0x11c>
    1060:	fec42783          	lw	x15,-20(x8)
    1064:	00f777b3          	and	x15,x14,x15
    1068:	02078c63          	beq	x15,x0,10a0 <PreProcessAll_M0+0x1bc>
            Input1_2(EpsBEG[i], 1);
    106c:	fe442783          	lw	x15,-28(x8)
    1070:	00279793          	slli	x15,x15,0x2
    1074:	ff040713          	addi	x14,x8,-16
    1078:	00f707b3          	add	x15,x14,x15
    107c:	f987a783          	lw	x15,-104(x15)
    1080:	00100593          	addi	x11,x0,1
    1084:	00078513          	addi	x10,x15,0
    1088:	c61ff0ef          	jal	x1,ce8 <Input1_2>
            Input3(0, opcode, address, i);      // Mode = 0
    108c:	fe442683          	lw	x13,-28(x8)
    1090:	fbc42603          	lw	x12,-68(x8)
    1094:	fc042583          	lw	x11,-64(x8)
    1098:	00000513          	addi	x10,x0,0
    109c:	d05ff0ef          	jal	x1,da0 <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    10a0:	fe442783          	lw	x15,-28(x8)
    10a4:	00178793          	addi	x15,x15,1
    10a8:	fef42223          	sw	x15,-28(x8)
    10ac:	fe442703          	lw	x14,-28(x8)
    10b0:	00300793          	addi	x15,x0,3
    10b4:	f8e7dee3          	bge	x15,x14,1050 <PreProcessAll_M0+0x16c>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    10b8:	fec42503          	lw	x10,-20(x8)
    10bc:	d59ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing EpsBLK to peripheral
    opcode = 1, address = EpsBLK_ADDR;
    10c0:	00100793          	addi	x15,x0,1
    10c4:	fcf42023          	sw	x15,-64(x8)
    10c8:	000017b7          	lui	x15,0x1
    10cc:	00878793          	addi	x15,x15,8 # 1008 <PreProcessAll_M0+0x124>
    10d0:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    10d4:	fe042023          	sw	x0,-32(x8)
    10d8:	0600006f          	jal	x0,1138 <PreProcessAll_M0+0x254>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    10dc:	fe042783          	lw	x15,-32(x8)
    10e0:	00100713          	addi	x14,x0,1
    10e4:	00f717b3          	sll	x15,x14,x15
    10e8:	00078713          	addi	x14,x15,0
    10ec:	fec42783          	lw	x15,-20(x8)
    10f0:	00f777b3          	and	x15,x14,x15
    10f4:	02078c63          	beq	x15,x0,112c <PreProcessAll_M0+0x248>
            Input1_2(EpsBLK[i], 1);
    10f8:	fe042783          	lw	x15,-32(x8)
    10fc:	00279793          	slli	x15,x15,0x2
    1100:	ff040713          	addi	x14,x8,-16
    1104:	00f707b3          	add	x15,x14,x15
    1108:	f787a783          	lw	x15,-136(x15)
    110c:	00100593          	addi	x11,x0,1
    1110:	00078513          	addi	x10,x15,0
    1114:	bd5ff0ef          	jal	x1,ce8 <Input1_2>
            Input3(0, opcode, address, i);      // Mode = 0
    1118:	fe042683          	lw	x13,-32(x8)
    111c:	fbc42603          	lw	x12,-68(x8)
    1120:	fc042583          	lw	x11,-64(x8)
    1124:	00000513          	addi	x10,x0,0
    1128:	c79ff0ef          	jal	x1,da0 <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    112c:	fe042783          	lw	x15,-32(x8)
    1130:	00178793          	addi	x15,x15,1
    1134:	fef42023          	sw	x15,-32(x8)
    1138:	fe042703          	lw	x14,-32(x8)
    113c:	00300793          	addi	x15,x0,3
    1140:	f8e7dee3          	bge	x15,x14,10dc <PreProcessAll_M0+0x1f8>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    1144:	fec42503          	lw	x10,-20(x8)
    1148:	ccdff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing EpsEND to peripheral
    opcode = 1, address = EpsEND_ADDR;
    114c:	00100793          	addi	x15,x0,1
    1150:	fcf42023          	sw	x15,-64(x8)
    1154:	000017b7          	lui	x15,0x1
    1158:	01078793          	addi	x15,x15,16 # 1010 <PreProcessAll_M0+0x12c>
    115c:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1160:	fc042e23          	sw	x0,-36(x8)
    1164:	0600006f          	jal	x0,11c4 <PreProcessAll_M0+0x2e0>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    1168:	fdc42783          	lw	x15,-36(x8)
    116c:	00100713          	addi	x14,x0,1
    1170:	00f717b3          	sll	x15,x14,x15
    1174:	00078713          	addi	x14,x15,0
    1178:	fec42783          	lw	x15,-20(x8)
    117c:	00f777b3          	and	x15,x14,x15
    1180:	02078c63          	beq	x15,x0,11b8 <PreProcessAll_M0+0x2d4>
            Input1_2(EpsEND[i], 1);
    1184:	fdc42783          	lw	x15,-36(x8)
    1188:	00279793          	slli	x15,x15,0x2
    118c:	ff040713          	addi	x14,x8,-16
    1190:	00f707b3          	add	x15,x14,x15
    1194:	f887a783          	lw	x15,-120(x15)
    1198:	00100593          	addi	x11,x0,1
    119c:	00078513          	addi	x10,x15,0
    11a0:	b49ff0ef          	jal	x1,ce8 <Input1_2>
            Input3(0, opcode, address, i);      // Mode = 0
    11a4:	fdc42683          	lw	x13,-36(x8)
    11a8:	fbc42603          	lw	x12,-68(x8)
    11ac:	fc042583          	lw	x11,-64(x8)
    11b0:	00000513          	addi	x10,x0,0
    11b4:	bedff0ef          	jal	x1,da0 <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    11b8:	fdc42783          	lw	x15,-36(x8)
    11bc:	00178793          	addi	x15,x15,1
    11c0:	fcf42e23          	sw	x15,-36(x8)
    11c4:	fdc42703          	lw	x14,-36(x8)
    11c8:	00300793          	addi	x15,x0,3
    11cc:	f8e7dee3          	bge	x15,x14,1168 <PreProcessAll_M0+0x284>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    11d0:	fec42503          	lw	x10,-20(x8)
    11d4:	c41ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing INIT to peripheral
    opcode = 1, address = INIT_ADDR;
    11d8:	00100793          	addi	x15,x0,1
    11dc:	fcf42023          	sw	x15,-64(x8)
    11e0:	000017b7          	lui	x15,0x1
    11e4:	01878793          	addi	x15,x15,24 # 1018 <PreProcessAll_M0+0x134>
    11e8:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    11ec:	fc042c23          	sw	x0,-40(x8)
    11f0:	0600006f          	jal	x0,1250 <PreProcessAll_M0+0x36c>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    11f4:	fd842783          	lw	x15,-40(x8)
    11f8:	00100713          	addi	x14,x0,1
    11fc:	00f717b3          	sll	x15,x14,x15
    1200:	00078713          	addi	x14,x15,0
    1204:	fec42783          	lw	x15,-20(x8)
    1208:	00f777b3          	and	x15,x14,x15
    120c:	02078c63          	beq	x15,x0,1244 <PreProcessAll_M0+0x360>
            Input1_2(INIT[i], 1);
    1210:	fd842783          	lw	x15,-40(x8)
    1214:	00279793          	slli	x15,x15,0x2
    1218:	ff040713          	addi	x14,x8,-16
    121c:	00f707b3          	add	x15,x14,x15
    1220:	fb87a783          	lw	x15,-72(x15)
    1224:	00100593          	addi	x11,x0,1
    1228:	00078513          	addi	x10,x15,0
    122c:	abdff0ef          	jal	x1,ce8 <Input1_2>
            Input3(0, opcode, address, i);      // Mode = 0
    1230:	fd842683          	lw	x13,-40(x8)
    1234:	fbc42603          	lw	x12,-68(x8)
    1238:	fc042583          	lw	x11,-64(x8)
    123c:	00000513          	addi	x10,x0,0
    1240:	b61ff0ef          	jal	x1,da0 <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    1244:	fd842783          	lw	x15,-40(x8)
    1248:	00178793          	addi	x15,x15,1
    124c:	fcf42c23          	sw	x15,-40(x8)
    1250:	fd842703          	lw	x14,-40(x8)
    1254:	00300793          	addi	x15,x0,3
    1258:	f8e7dee3          	bge	x15,x14,11f4 <PreProcessAll_M0+0x310>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    125c:	fec42503          	lw	x10,-20(x8)
    1260:	bb5ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing ACCEPT to peripheral
    opcode = 1, address = ACCEPT_ADDR;
    1264:	00100793          	addi	x15,x0,1
    1268:	fcf42023          	sw	x15,-64(x8)
    126c:	000017b7          	lui	x15,0x1
    1270:	02078793          	addi	x15,x15,32 # 1020 <PreProcessAll_M0+0x13c>
    1274:	faf42e23          	sw	x15,-68(x8)
    for(int i = 0; i < NO_MODULES; i++) {
    1278:	fc042a23          	sw	x0,-44(x8)
    127c:	0600006f          	jal	x0,12dc <PreProcessAll_M0+0x3f8>
        if(REQD_DATA_ACCEPTED & (1<<i)) {
    1280:	fd442783          	lw	x15,-44(x8)
    1284:	00100713          	addi	x14,x0,1
    1288:	00f717b3          	sll	x15,x14,x15
    128c:	00078713          	addi	x14,x15,0
    1290:	fec42783          	lw	x15,-20(x8)
    1294:	00f777b3          	and	x15,x14,x15
    1298:	02078c63          	beq	x15,x0,12d0 <PreProcessAll_M0+0x3ec>
            Input1_2(ACCEPT[i], 1);
    129c:	fd442783          	lw	x15,-44(x8)
    12a0:	00279793          	slli	x15,x15,0x2
    12a4:	ff040713          	addi	x14,x8,-16
    12a8:	00f707b3          	add	x15,x14,x15
    12ac:	fa87a783          	lw	x15,-88(x15)
    12b0:	00100593          	addi	x11,x0,1
    12b4:	00078513          	addi	x10,x15,0
    12b8:	a31ff0ef          	jal	x1,ce8 <Input1_2>
            Input3(0, opcode, address, i);      // Mode = 0
    12bc:	fd442683          	lw	x13,-44(x8)
    12c0:	fbc42603          	lw	x12,-68(x8)
    12c4:	fc042583          	lw	x11,-64(x8)
    12c8:	00000513          	addi	x10,x0,0
    12cc:	ad5ff0ef          	jal	x1,da0 <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    12d0:	fd442783          	lw	x15,-44(x8)
    12d4:	00178793          	addi	x15,x15,1
    12d8:	fcf42a23          	sw	x15,-44(x8)
    12dc:	fd442703          	lw	x14,-44(x8)
    12e0:	00300793          	addi	x15,x0,3
    12e4:	f8e7dee3          	bge	x15,x14,1280 <PreProcessAll_M0+0x39c>
        }
    }

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    12e8:	fec42503          	lw	x10,-20(x8)
    12ec:	b29ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing SELFLOOP to peripheral
    opcode = 1;
    12f0:	00100793          	addi	x15,x0,1
    12f4:	fcf42023          	sw	x15,-64(x8)
    for(int j = 0; j < 256; j++) {
    12f8:	fc042823          	sw	x0,-48(x8)
    12fc:	0a80006f          	jal	x0,13a4 <PreProcessAll_M0+0x4c0>

        address = SELFLOOP_ADDR_BASE + (j<<3);
    1300:	fd042783          	lw	x15,-48(x8)
    1304:	00379793          	slli	x15,x15,0x3
    1308:	faf42e23          	sw	x15,-68(x8)
        for(int i = 0; i < NO_MODULES; i++) {
    130c:	fc042623          	sw	x0,-52(x8)
    1310:	0740006f          	jal	x0,1384 <PreProcessAll_M0+0x4a0>
            if(REQD_DATA_ACCEPTED & (1<<i)) {
    1314:	fcc42783          	lw	x15,-52(x8)
    1318:	00100713          	addi	x14,x0,1
    131c:	00f717b3          	sll	x15,x14,x15
    1320:	00078713          	addi	x14,x15,0
    1324:	fec42783          	lw	x15,-20(x8)
    1328:	00f777b3          	and	x15,x14,x15
    132c:	04078663          	beq	x15,x0,1378 <PreProcessAll_M0+0x494>
                Input1_2(SELFLOOP[i][j], 1);
    1330:	fffff7b7          	lui	x15,0xfffff
    1334:	ff040713          	addi	x14,x8,-16
    1338:	00f70733          	add	x14,x14,x15
    133c:	fcc42783          	lw	x15,-52(x8)
    1340:	00879693          	slli	x13,x15,0x8
    1344:	fd042783          	lw	x15,-48(x8)
    1348:	00f687b3          	add	x15,x13,x15
    134c:	00279793          	slli	x15,x15,0x2
    1350:	00f707b3          	add	x15,x14,x15
    1354:	f787a783          	lw	x15,-136(x15) # ffffef78 <__stack_top+0xfffbef78>
    1358:	00100593          	addi	x11,x0,1
    135c:	00078513          	addi	x10,x15,0
    1360:	989ff0ef          	jal	x1,ce8 <Input1_2>
                Input3(0, opcode, address, i);   // Mode = 0
    1364:	fcc42683          	lw	x13,-52(x8)
    1368:	fbc42603          	lw	x12,-68(x8)
    136c:	fc042583          	lw	x11,-64(x8)
    1370:	00000513          	addi	x10,x0,0
    1374:	a2dff0ef          	jal	x1,da0 <Input3>
        for(int i = 0; i < NO_MODULES; i++) {
    1378:	fcc42783          	lw	x15,-52(x8)
    137c:	00178793          	addi	x15,x15,1
    1380:	fcf42623          	sw	x15,-52(x8)
    1384:	fcc42703          	lw	x14,-52(x8)
    1388:	00300793          	addi	x15,x0,3
    138c:	f8e7d4e3          	bge	x15,x14,1314 <PreProcessAll_M0+0x430>
            }
        }

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    1390:	fec42503          	lw	x10,-20(x8)
    1394:	a81ff0ef          	jal	x1,e14 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    1398:	fd042783          	lw	x15,-48(x8)
    139c:	00178793          	addi	x15,x15,1
    13a0:	fcf42823          	sw	x15,-48(x8)
    13a4:	fd042703          	lw	x14,-48(x8)
    13a8:	0ff00793          	addi	x15,x0,255
    13ac:	f4e7dae3          	bge	x15,x14,1300 <PreProcessAll_M0+0x41c>

    }

    // Writing MOVE to peripheral
    opcode = 1;
    13b0:	00100793          	addi	x15,x0,1
    13b4:	fcf42023          	sw	x15,-64(x8)
    for(int j = 0; j < 256; j++) {
    13b8:	fc042423          	sw	x0,-56(x8)
    13bc:	0b40006f          	jal	x0,1470 <PreProcessAll_M0+0x58c>

        address = MOVE_ADDR_BASE + (j<<3);
    13c0:	fc842783          	lw	x15,-56(x8)
    13c4:	00379713          	slli	x14,x15,0x3
    13c8:	000017b7          	lui	x15,0x1
    13cc:	80078793          	addi	x15,x15,-2048 # 800 <parseEXT+0x7e8>
    13d0:	00f707b3          	add	x15,x14,x15
    13d4:	faf42e23          	sw	x15,-68(x8)
        for(int i = 0; i < NO_MODULES; i++) {
    13d8:	fc042223          	sw	x0,-60(x8)
    13dc:	0740006f          	jal	x0,1450 <PreProcessAll_M0+0x56c>
            if(REQD_DATA_ACCEPTED & (1<<i)) {
    13e0:	fc442783          	lw	x15,-60(x8)
    13e4:	00100713          	addi	x14,x0,1
    13e8:	00f717b3          	sll	x15,x14,x15
    13ec:	00078713          	addi	x14,x15,0
    13f0:	fec42783          	lw	x15,-20(x8)
    13f4:	00f777b3          	and	x15,x14,x15
    13f8:	04078663          	beq	x15,x0,1444 <PreProcessAll_M0+0x560>
                Input1_2(MOVE[i][j], 1);
    13fc:	ffffe7b7          	lui	x15,0xffffe
    1400:	ff040713          	addi	x14,x8,-16
    1404:	00f70733          	add	x14,x14,x15
    1408:	fc442783          	lw	x15,-60(x8)
    140c:	00879693          	slli	x13,x15,0x8
    1410:	fc842783          	lw	x15,-56(x8)
    1414:	00f687b3          	add	x15,x13,x15
    1418:	00279793          	slli	x15,x15,0x2
    141c:	00f707b3          	add	x15,x14,x15
    1420:	f787a783          	lw	x15,-136(x15) # ffffdf78 <__stack_top+0xfffbdf78>
    1424:	00100593          	addi	x11,x0,1
    1428:	00078513          	addi	x10,x15,0
    142c:	8bdff0ef          	jal	x1,ce8 <Input1_2>
                Input3(0, opcode, address, i);   // Mode = 0
    1430:	fc442683          	lw	x13,-60(x8)
    1434:	fbc42603          	lw	x12,-68(x8)
    1438:	fc042583          	lw	x11,-64(x8)
    143c:	00000513          	addi	x10,x0,0
    1440:	961ff0ef          	jal	x1,da0 <Input3>
        for(int i = 0; i < NO_MODULES; i++) {
    1444:	fc442783          	lw	x15,-60(x8)
    1448:	00178793          	addi	x15,x15,1
    144c:	fcf42223          	sw	x15,-60(x8)
    1450:	fc442703          	lw	x14,-60(x8)
    1454:	00300793          	addi	x15,x0,3
    1458:	f8e7d4e3          	bge	x15,x14,13e0 <PreProcessAll_M0+0x4fc>
            }
        }

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    145c:	fec42503          	lw	x10,-20(x8)
    1460:	9b5ff0ef          	jal	x1,e14 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    1464:	fc842783          	lw	x15,-56(x8)
    1468:	00178793          	addi	x15,x15,1
    146c:	fcf42423          	sw	x15,-56(x8)
    1470:	fc842703          	lw	x14,-56(x8)
    1474:	0ff00793          	addi	x15,x0,255
    1478:	f4e7d4e3          	bge	x15,x14,13c0 <PreProcessAll_M0+0x4dc>

    }

    return REQD_DATA_ACCEPTED;
    147c:	fec42783          	lw	x15,-20(x8)
    
}
    1480:	00078513          	addi	x10,x15,0
    1484:	00002337          	lui	x6,0x2
    1488:	00610133          	add	x2,x2,x6
    148c:	0ac12083          	lw	x1,172(x2)
    1490:	0a812403          	lw	x8,168(x2)
    1494:	0b010113          	addi	x2,x2,176
    1498:	00008067          	jalr	x0,0(x1)

0000149c <PreProcessAll_M1>:
        pattern - char* string representing the pattern to be sent to all the modules. "\0" represents empty pattern (i.e) modules need not be used
    Returns :
        An integer - 1 implies that module was used, 
                     0 implies either the modules weren't required or the provided pattern couldn't be processed
*/
int PreProcessAll_M1(char *pattern) {
    149c:	81010113          	addi	x2,x2,-2032
    14a0:	7e112623          	sw	x1,2028(x2)
    14a4:	7e812423          	sw	x8,2024(x2)
    14a8:	7f010413          	addi	x8,x2,2032
    14ac:	fa010113          	addi	x2,x2,-96
    14b0:	fffff7b7          	lui	x15,0xfffff
    14b4:	ff040713          	addi	x14,x8,-16
    14b8:	00f707b3          	add	x15,x14,x15
    14bc:	7ca7a623          	sw	x10,1996(x15) # fffff7cc <__stack_top+0xfffbf7cc>

    unsigned int INIT, ACCEPT, EpsBEG, EpsEND ,EpsBLK;
    unsigned int SELFLOOP[256], MOVE[256];

    if(pattern[0] == '\0') return 0;
    14c0:	fffff7b7          	lui	x15,0xfffff
    14c4:	ff040713          	addi	x14,x8,-16
    14c8:	00f707b3          	add	x15,x14,x15
    14cc:	7cc7a783          	lw	x15,1996(x15) # fffff7cc <__stack_top+0xfffbf7cc>
    14d0:	0007c783          	lbu	x15,0(x15)
    14d4:	00079663          	bne	x15,x0,14e0 <PreProcessAll_M1+0x44>
    14d8:	00000793          	addi	x15,x0,0
    14dc:	2940006f          	jal	x0,1770 <PreProcessAll_M1+0x2d4>
    int ret_code = parseEXT(pattern, &INIT, &ACCEPT, &EpsBEG, &EpsEND, &EpsBLK, MOVE, SELFLOOP);
    14e0:	bc440893          	addi	x17,x8,-1084
    14e4:	fffff7b7          	lui	x15,0xfffff
    14e8:	7d478793          	addi	x15,x15,2004 # fffff7d4 <__stack_top+0xfffbf7d4>
    14ec:	ff040713          	addi	x14,x8,-16
    14f0:	00f70833          	add	x16,x14,x15
    14f4:	fc440313          	addi	x6,x8,-60
    14f8:	fc840713          	addi	x14,x8,-56
    14fc:	fcc40693          	addi	x13,x8,-52
    1500:	fd040613          	addi	x12,x8,-48
    1504:	fd440593          	addi	x11,x8,-44
    1508:	fffff7b7          	lui	x15,0xfffff
    150c:	ff040513          	addi	x10,x8,-16
    1510:	00f50533          	add	x10,x10,x15
    1514:	00030793          	addi	x15,x6,0 # 2000 <myputs>
    1518:	7cc52503          	lw	x10,1996(x10)
    151c:	afdfe0ef          	jal	x1,18 <parseEXT>
    1520:	fea42223          	sw	x10,-28(x8)
    if(!ret_code) return 0;
    1524:	fe442783          	lw	x15,-28(x8)
    1528:	00079663          	bne	x15,x0,1534 <PreProcessAll_M1+0x98>
    152c:	00000793          	addi	x15,x0,0
    1530:	2400006f          	jal	x0,1770 <PreProcessAll_M1+0x2d4>

    unsigned int REQD_DATA_ACCEPTED = (1<<NO_MODULES)-1;
    1534:	00f00793          	addi	x15,x0,15
    1538:	fef42023          	sw	x15,-32(x8)

    // opcode = 1 : Input for preprocessing
    // Writing EpsBEG to peripheral
    int opcode = 1, address = EpsBEG_ADDR;
    153c:	00100793          	addi	x15,x0,1
    1540:	fcf42e23          	sw	x15,-36(x8)
    1544:	000017b7          	lui	x15,0x1
    1548:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(EpsBEG, 1);
    154c:	fcc42783          	lw	x15,-52(x8)
    1550:	00100593          	addi	x11,x0,1
    1554:	00078513          	addi	x10,x15,0 # 1000 <PreProcessAll_M0+0x11c>
    1558:	f90ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(1, opcode, address, 0);          // Mode = 1, target module : dont care
    155c:	00000693          	addi	x13,x0,0
    1560:	fd842603          	lw	x12,-40(x8)
    1564:	fdc42583          	lw	x11,-36(x8)
    1568:	00100513          	addi	x10,x0,1
    156c:	835ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    1570:	fe042503          	lw	x10,-32(x8)
    1574:	8a1ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing EpsBLK to peripheral
    opcode = 1, address = EpsBLK_ADDR;
    1578:	00100793          	addi	x15,x0,1
    157c:	fcf42e23          	sw	x15,-36(x8)
    1580:	000017b7          	lui	x15,0x1
    1584:	00878793          	addi	x15,x15,8 # 1008 <PreProcessAll_M0+0x124>
    1588:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(EpsBLK, 1);
    158c:	fc442783          	lw	x15,-60(x8)
    1590:	00100593          	addi	x11,x0,1
    1594:	00078513          	addi	x10,x15,0
    1598:	f50ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(1, opcode, address, 0);          // Mode = 1, target module : dont care
    159c:	00000693          	addi	x13,x0,0
    15a0:	fd842603          	lw	x12,-40(x8)
    15a4:	fdc42583          	lw	x11,-36(x8)
    15a8:	00100513          	addi	x10,x0,1
    15ac:	ff4ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    15b0:	fe042503          	lw	x10,-32(x8)
    15b4:	861ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing EpsEND to peripheral
    opcode = 1, address = EpsEND_ADDR;
    15b8:	00100793          	addi	x15,x0,1
    15bc:	fcf42e23          	sw	x15,-36(x8)
    15c0:	000017b7          	lui	x15,0x1
    15c4:	01078793          	addi	x15,x15,16 # 1010 <PreProcessAll_M0+0x12c>
    15c8:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(EpsEND, 1);
    15cc:	fc842783          	lw	x15,-56(x8)
    15d0:	00100593          	addi	x11,x0,1
    15d4:	00078513          	addi	x10,x15,0
    15d8:	f10ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(1, opcode, address, 0);          // Mode = 1, target module : dont care
    15dc:	00000693          	addi	x13,x0,0
    15e0:	fd842603          	lw	x12,-40(x8)
    15e4:	fdc42583          	lw	x11,-36(x8)
    15e8:	00100513          	addi	x10,x0,1
    15ec:	fb4ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    15f0:	fe042503          	lw	x10,-32(x8)
    15f4:	821ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing INIT to peripheral
    opcode = 1, address = INIT_ADDR;
    15f8:	00100793          	addi	x15,x0,1
    15fc:	fcf42e23          	sw	x15,-36(x8)
    1600:	000017b7          	lui	x15,0x1
    1604:	01878793          	addi	x15,x15,24 # 1018 <PreProcessAll_M0+0x134>
    1608:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(INIT, 1);
    160c:	fd442783          	lw	x15,-44(x8)
    1610:	00100593          	addi	x11,x0,1
    1614:	00078513          	addi	x10,x15,0
    1618:	ed0ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(1, opcode, address, 0);          // Mode = 1, target module : dont care
    161c:	00000693          	addi	x13,x0,0
    1620:	fd842603          	lw	x12,-40(x8)
    1624:	fdc42583          	lw	x11,-36(x8)
    1628:	00100513          	addi	x10,x0,1
    162c:	f74ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    1630:	fe042503          	lw	x10,-32(x8)
    1634:	fe0ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing ACCEPT to peripheral
    opcode = 1, address = ACCEPT_ADDR;
    1638:	00100793          	addi	x15,x0,1
    163c:	fcf42e23          	sw	x15,-36(x8)
    1640:	000017b7          	lui	x15,0x1
    1644:	02078793          	addi	x15,x15,32 # 1020 <PreProcessAll_M0+0x13c>
    1648:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(ACCEPT, 1);
    164c:	fd042783          	lw	x15,-48(x8)
    1650:	00100593          	addi	x11,x0,1
    1654:	00078513          	addi	x10,x15,0
    1658:	e90ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(1, opcode, address, 0);          // Mode = 1, target module : dont care
    165c:	00000693          	addi	x13,x0,0
    1660:	fd842603          	lw	x12,-40(x8)
    1664:	fdc42583          	lw	x11,-36(x8)
    1668:	00100513          	addi	x10,x0,1
    166c:	f34ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    1670:	fe042503          	lw	x10,-32(x8)
    1674:	fa0ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing SELFLOOP to peripheral
    opcode = 1;
    1678:	00100793          	addi	x15,x0,1
    167c:	fcf42e23          	sw	x15,-36(x8)
    for(int j = 0; j < 256; j++) {
    1680:	fe042623          	sw	x0,-20(x8)
    1684:	0580006f          	jal	x0,16dc <PreProcessAll_M1+0x240>

        address = SELFLOOP_ADDR_BASE + (j<<3);
    1688:	fec42783          	lw	x15,-20(x8)
    168c:	00379793          	slli	x15,x15,0x3
    1690:	fcf42c23          	sw	x15,-40(x8)
        Input1_2(SELFLOOP[j], 1);
    1694:	fec42783          	lw	x15,-20(x8)
    1698:	00279793          	slli	x15,x15,0x2
    169c:	ff040713          	addi	x14,x8,-16
    16a0:	00f707b3          	add	x15,x14,x15
    16a4:	bd47a783          	lw	x15,-1068(x15)
    16a8:	00100593          	addi	x11,x0,1
    16ac:	00078513          	addi	x10,x15,0
    16b0:	e38ff0ef          	jal	x1,ce8 <Input1_2>
        Input3(1, opcode, address, 0);      // Mode = 1, target module : dont care
    16b4:	00000693          	addi	x13,x0,0
    16b8:	fd842603          	lw	x12,-40(x8)
    16bc:	fdc42583          	lw	x11,-36(x8)
    16c0:	00100513          	addi	x10,x0,1
    16c4:	edcff0ef          	jal	x1,da0 <Input3>

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    16c8:	fe042503          	lw	x10,-32(x8)
    16cc:	f48ff0ef          	jal	x1,e14 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    16d0:	fec42783          	lw	x15,-20(x8)
    16d4:	00178793          	addi	x15,x15,1
    16d8:	fef42623          	sw	x15,-20(x8)
    16dc:	fec42703          	lw	x14,-20(x8)
    16e0:	0ff00793          	addi	x15,x0,255
    16e4:	fae7d2e3          	bge	x15,x14,1688 <PreProcessAll_M1+0x1ec>

    }

    // Writing MOVE to peripheral
    opcode = 1;
    16e8:	00100793          	addi	x15,x0,1
    16ec:	fcf42e23          	sw	x15,-36(x8)
    for(int j = 0; j < 256; j++) {
    16f0:	fe042423          	sw	x0,-24(x8)
    16f4:	06c0006f          	jal	x0,1760 <PreProcessAll_M1+0x2c4>

        address = MOVE_ADDR_BASE + (j<<3);
    16f8:	fe842783          	lw	x15,-24(x8)
    16fc:	00379713          	slli	x14,x15,0x3
    1700:	000017b7          	lui	x15,0x1
    1704:	80078793          	addi	x15,x15,-2048 # 800 <parseEXT+0x7e8>
    1708:	00f707b3          	add	x15,x14,x15
    170c:	fcf42c23          	sw	x15,-40(x8)
        Input1_2(MOVE[j], 1);
    1710:	fffff7b7          	lui	x15,0xfffff
    1714:	ff040713          	addi	x14,x8,-16
    1718:	00f70733          	add	x14,x14,x15
    171c:	fe842783          	lw	x15,-24(x8)
    1720:	00279793          	slli	x15,x15,0x2
    1724:	00f707b3          	add	x15,x14,x15
    1728:	7d47a783          	lw	x15,2004(x15) # fffff7d4 <__stack_top+0xfffbf7d4>
    172c:	00100593          	addi	x11,x0,1
    1730:	00078513          	addi	x10,x15,0
    1734:	db4ff0ef          	jal	x1,ce8 <Input1_2>
        Input3(1, opcode, address, 0);      // Mode = 1, target module : dont care
    1738:	00000693          	addi	x13,x0,0
    173c:	fd842603          	lw	x12,-40(x8)
    1740:	fdc42583          	lw	x11,-36(x8)
    1744:	00100513          	addi	x10,x0,1
    1748:	e58ff0ef          	jal	x1,da0 <Input3>

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    174c:	fe042503          	lw	x10,-32(x8)
    1750:	ec4ff0ef          	jal	x1,e14 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    1754:	fe842783          	lw	x15,-24(x8)
    1758:	00178793          	addi	x15,x15,1
    175c:	fef42423          	sw	x15,-24(x8)
    1760:	fe842703          	lw	x14,-24(x8)
    1764:	0ff00793          	addi	x15,x0,255
    1768:	f8e7d8e3          	bge	x15,x14,16f8 <PreProcessAll_M1+0x25c>

    }

    return 1;
    176c:	00100793          	addi	x15,x0,1

}
    1770:	00078513          	addi	x10,x15,0
    1774:	06010113          	addi	x2,x2,96
    1778:	7ec12083          	lw	x1,2028(x2)
    177c:	7e812403          	lw	x8,2024(x2)
    1780:	7f010113          	addi	x2,x2,2032
    1784:	00008067          	jalr	x0,0(x1)

00001788 <PreProcess>:
        module - integer representing the module number to be targetted
    Returns :
        An integer - 1 implies that module was used, 
                     0 implies either the module wasn't required or the provided pattern couldn't be processed
*/
int PreProcess(char *pattern, int module) {
    1788:	81010113          	addi	x2,x2,-2032
    178c:	7e112623          	sw	x1,2028(x2)
    1790:	7e812423          	sw	x8,2024(x2)
    1794:	7f010413          	addi	x8,x2,2032
    1798:	fa010113          	addi	x2,x2,-96
    179c:	fffff7b7          	lui	x15,0xfffff
    17a0:	ff040713          	addi	x14,x8,-16
    17a4:	00f707b3          	add	x15,x14,x15
    17a8:	7ca7a623          	sw	x10,1996(x15) # fffff7cc <__stack_top+0xfffbf7cc>
    17ac:	fffff7b7          	lui	x15,0xfffff
    17b0:	ff040713          	addi	x14,x8,-16
    17b4:	00f707b3          	add	x15,x14,x15
    17b8:	7cb7a423          	sw	x11,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>

    unsigned int INIT, ACCEPT, EpsBEG, EpsEND ,EpsBLK;
    unsigned int SELFLOOP[256], MOVE[256];

    if(pattern[0] == '\0') return 0;
    17bc:	fffff7b7          	lui	x15,0xfffff
    17c0:	ff040713          	addi	x14,x8,-16
    17c4:	00f707b3          	add	x15,x14,x15
    17c8:	7cc7a783          	lw	x15,1996(x15) # fffff7cc <__stack_top+0xfffbf7cc>
    17cc:	0007c783          	lbu	x15,0(x15)
    17d0:	00079663          	bne	x15,x0,17dc <PreProcess+0x54>
    17d4:	00000793          	addi	x15,x0,0
    17d8:	2fc0006f          	jal	x0,1ad4 <PreProcess+0x34c>
    int ret_code = parseEXT(pattern, &INIT, &ACCEPT, &EpsBEG, &EpsEND, &EpsBLK, MOVE, SELFLOOP);
    17dc:	bc440893          	addi	x17,x8,-1084
    17e0:	fffff7b7          	lui	x15,0xfffff
    17e4:	7d478793          	addi	x15,x15,2004 # fffff7d4 <__stack_top+0xfffbf7d4>
    17e8:	ff040713          	addi	x14,x8,-16
    17ec:	00f70833          	add	x16,x14,x15
    17f0:	fc440313          	addi	x6,x8,-60
    17f4:	fc840713          	addi	x14,x8,-56
    17f8:	fcc40693          	addi	x13,x8,-52
    17fc:	fd040613          	addi	x12,x8,-48
    1800:	fd440593          	addi	x11,x8,-44
    1804:	fffff7b7          	lui	x15,0xfffff
    1808:	ff040513          	addi	x10,x8,-16
    180c:	00f50533          	add	x10,x10,x15
    1810:	00030793          	addi	x15,x6,0
    1814:	7cc52503          	lw	x10,1996(x10)
    1818:	801fe0ef          	jal	x1,18 <parseEXT>
    181c:	fea42223          	sw	x10,-28(x8)
    if(!ret_code) return 0;
    1820:	fe442783          	lw	x15,-28(x8)
    1824:	00079663          	bne	x15,x0,1830 <PreProcess+0xa8>
    1828:	00000793          	addi	x15,x0,0
    182c:	2a80006f          	jal	x0,1ad4 <PreProcess+0x34c>

    unsigned int REQD_DATA_ACCEPTED = (1<<module);
    1830:	fffff7b7          	lui	x15,0xfffff
    1834:	ff040713          	addi	x14,x8,-16
    1838:	00f707b3          	add	x15,x14,x15
    183c:	7c87a783          	lw	x15,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    1840:	00100713          	addi	x14,x0,1
    1844:	00f717b3          	sll	x15,x14,x15
    1848:	fef42023          	sw	x15,-32(x8)

    // opcode = 1 : Input for preprocessing
    // Writing EpsBEG to peripheral
    int opcode = 1, address = EpsBEG_ADDR;
    184c:	00100793          	addi	x15,x0,1
    1850:	fcf42e23          	sw	x15,-36(x8)
    1854:	000017b7          	lui	x15,0x1
    1858:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(EpsBEG, 1);
    185c:	fcc42783          	lw	x15,-52(x8)
    1860:	00100593          	addi	x11,x0,1
    1864:	00078513          	addi	x10,x15,0 # 1000 <PreProcessAll_M0+0x11c>
    1868:	c80ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(0, opcode, address, module);     // Mode = 0
    186c:	fffff7b7          	lui	x15,0xfffff
    1870:	ff040713          	addi	x14,x8,-16
    1874:	00f707b3          	add	x15,x14,x15
    1878:	7c87a683          	lw	x13,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    187c:	fd842603          	lw	x12,-40(x8)
    1880:	fdc42583          	lw	x11,-36(x8)
    1884:	00000513          	addi	x10,x0,0
    1888:	d18ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    188c:	fe042503          	lw	x10,-32(x8)
    1890:	d84ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing EpsBLK to peripheral
    opcode = 1, address = EpsBLK_ADDR;
    1894:	00100793          	addi	x15,x0,1
    1898:	fcf42e23          	sw	x15,-36(x8)
    189c:	000017b7          	lui	x15,0x1
    18a0:	00878793          	addi	x15,x15,8 # 1008 <PreProcessAll_M0+0x124>
    18a4:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(EpsBLK, 1);
    18a8:	fc442783          	lw	x15,-60(x8)
    18ac:	00100593          	addi	x11,x0,1
    18b0:	00078513          	addi	x10,x15,0
    18b4:	c34ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(0, opcode, address, module);     // Mode = 0
    18b8:	fffff7b7          	lui	x15,0xfffff
    18bc:	ff040713          	addi	x14,x8,-16
    18c0:	00f707b3          	add	x15,x14,x15
    18c4:	7c87a683          	lw	x13,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    18c8:	fd842603          	lw	x12,-40(x8)
    18cc:	fdc42583          	lw	x11,-36(x8)
    18d0:	00000513          	addi	x10,x0,0
    18d4:	cccff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    18d8:	fe042503          	lw	x10,-32(x8)
    18dc:	d38ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing EpsEND to peripheral
    opcode = 1, address = EpsEND_ADDR;
    18e0:	00100793          	addi	x15,x0,1
    18e4:	fcf42e23          	sw	x15,-36(x8)
    18e8:	000017b7          	lui	x15,0x1
    18ec:	01078793          	addi	x15,x15,16 # 1010 <PreProcessAll_M0+0x12c>
    18f0:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(EpsEND, 1);
    18f4:	fc842783          	lw	x15,-56(x8)
    18f8:	00100593          	addi	x11,x0,1
    18fc:	00078513          	addi	x10,x15,0
    1900:	be8ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(0, opcode, address, module);     // Mode = 0
    1904:	fffff7b7          	lui	x15,0xfffff
    1908:	ff040713          	addi	x14,x8,-16
    190c:	00f707b3          	add	x15,x14,x15
    1910:	7c87a683          	lw	x13,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    1914:	fd842603          	lw	x12,-40(x8)
    1918:	fdc42583          	lw	x11,-36(x8)
    191c:	00000513          	addi	x10,x0,0
    1920:	c80ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    1924:	fe042503          	lw	x10,-32(x8)
    1928:	cecff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing INIT to peripheral
    opcode = 1, address = INIT_ADDR;
    192c:	00100793          	addi	x15,x0,1
    1930:	fcf42e23          	sw	x15,-36(x8)
    1934:	000017b7          	lui	x15,0x1
    1938:	01878793          	addi	x15,x15,24 # 1018 <PreProcessAll_M0+0x134>
    193c:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(INIT, 1);
    1940:	fd442783          	lw	x15,-44(x8)
    1944:	00100593          	addi	x11,x0,1
    1948:	00078513          	addi	x10,x15,0
    194c:	b9cff0ef          	jal	x1,ce8 <Input1_2>
    Input3(0, opcode, address, module);     // Mode = 0
    1950:	fffff7b7          	lui	x15,0xfffff
    1954:	ff040713          	addi	x14,x8,-16
    1958:	00f707b3          	add	x15,x14,x15
    195c:	7c87a683          	lw	x13,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    1960:	fd842603          	lw	x12,-40(x8)
    1964:	fdc42583          	lw	x11,-36(x8)
    1968:	00000513          	addi	x10,x0,0
    196c:	c34ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    1970:	fe042503          	lw	x10,-32(x8)
    1974:	ca0ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing ACCEPT to peripheral
    opcode = 1, address = ACCEPT_ADDR;
    1978:	00100793          	addi	x15,x0,1
    197c:	fcf42e23          	sw	x15,-36(x8)
    1980:	000017b7          	lui	x15,0x1
    1984:	02078793          	addi	x15,x15,32 # 1020 <PreProcessAll_M0+0x13c>
    1988:	fcf42c23          	sw	x15,-40(x8)
    Input1_2(ACCEPT, 1);
    198c:	fd042783          	lw	x15,-48(x8)
    1990:	00100593          	addi	x11,x0,1
    1994:	00078513          	addi	x10,x15,0
    1998:	b50ff0ef          	jal	x1,ce8 <Input1_2>
    Input3(0, opcode, address, module);     // Mode = 0
    199c:	fffff7b7          	lui	x15,0xfffff
    19a0:	ff040713          	addi	x14,x8,-16
    19a4:	00f707b3          	add	x15,x14,x15
    19a8:	7c87a683          	lw	x13,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    19ac:	fd842603          	lw	x12,-40(x8)
    19b0:	fdc42583          	lw	x11,-36(x8)
    19b4:	00000513          	addi	x10,x0,0
    19b8:	be8ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking(REQD_DATA_ACCEPTED);
    19bc:	fe042503          	lw	x10,-32(x8)
    19c0:	c54ff0ef          	jal	x1,e14 <Complete_Handshaking>

    // Writing SELFLOOP to peripheral
    opcode = 1;
    19c4:	00100793          	addi	x15,x0,1
    19c8:	fcf42e23          	sw	x15,-36(x8)
    for(int j = 0; j < 256; j++) {
    19cc:	fe042623          	sw	x0,-20(x8)
    19d0:	0640006f          	jal	x0,1a34 <PreProcess+0x2ac>

        address = SELFLOOP_ADDR_BASE + (j<<3);
    19d4:	fec42783          	lw	x15,-20(x8)
    19d8:	00379793          	slli	x15,x15,0x3
    19dc:	fcf42c23          	sw	x15,-40(x8)
        Input1_2(SELFLOOP[j], 1);
    19e0:	fec42783          	lw	x15,-20(x8)
    19e4:	00279793          	slli	x15,x15,0x2
    19e8:	ff040713          	addi	x14,x8,-16
    19ec:	00f707b3          	add	x15,x14,x15
    19f0:	bd47a783          	lw	x15,-1068(x15)
    19f4:	00100593          	addi	x11,x0,1
    19f8:	00078513          	addi	x10,x15,0
    19fc:	aecff0ef          	jal	x1,ce8 <Input1_2>
        Input3(0, opcode, address, module); // Mode = 0
    1a00:	fffff7b7          	lui	x15,0xfffff
    1a04:	ff040713          	addi	x14,x8,-16
    1a08:	00f707b3          	add	x15,x14,x15
    1a0c:	7c87a683          	lw	x13,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    1a10:	fd842603          	lw	x12,-40(x8)
    1a14:	fdc42583          	lw	x11,-36(x8)
    1a18:	00000513          	addi	x10,x0,0
    1a1c:	b84ff0ef          	jal	x1,da0 <Input3>

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    1a20:	fe042503          	lw	x10,-32(x8)
    1a24:	bf0ff0ef          	jal	x1,e14 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    1a28:	fec42783          	lw	x15,-20(x8)
    1a2c:	00178793          	addi	x15,x15,1
    1a30:	fef42623          	sw	x15,-20(x8)
    1a34:	fec42703          	lw	x14,-20(x8)
    1a38:	0ff00793          	addi	x15,x0,255
    1a3c:	f8e7dce3          	bge	x15,x14,19d4 <PreProcess+0x24c>

    }

    // Writing MOVE to peripheral
    opcode = 1;
    1a40:	00100793          	addi	x15,x0,1
    1a44:	fcf42e23          	sw	x15,-36(x8)
    for(int j = 0; j < 256; j++) {
    1a48:	fe042423          	sw	x0,-24(x8)
    1a4c:	0780006f          	jal	x0,1ac4 <PreProcess+0x33c>

        address = MOVE_ADDR_BASE + (j<<3);
    1a50:	fe842783          	lw	x15,-24(x8)
    1a54:	00379713          	slli	x14,x15,0x3
    1a58:	000017b7          	lui	x15,0x1
    1a5c:	80078793          	addi	x15,x15,-2048 # 800 <parseEXT+0x7e8>
    1a60:	00f707b3          	add	x15,x14,x15
    1a64:	fcf42c23          	sw	x15,-40(x8)
        Input1_2(MOVE[j], 1);
    1a68:	fffff7b7          	lui	x15,0xfffff
    1a6c:	ff040713          	addi	x14,x8,-16
    1a70:	00f70733          	add	x14,x14,x15
    1a74:	fe842783          	lw	x15,-24(x8)
    1a78:	00279793          	slli	x15,x15,0x2
    1a7c:	00f707b3          	add	x15,x14,x15
    1a80:	7d47a783          	lw	x15,2004(x15) # fffff7d4 <__stack_top+0xfffbf7d4>
    1a84:	00100593          	addi	x11,x0,1
    1a88:	00078513          	addi	x10,x15,0
    1a8c:	a5cff0ef          	jal	x1,ce8 <Input1_2>
        Input3(0, opcode, address, module); // Mode = 0
    1a90:	fffff7b7          	lui	x15,0xfffff
    1a94:	ff040713          	addi	x14,x8,-16
    1a98:	00f707b3          	add	x15,x14,x15
    1a9c:	7c87a683          	lw	x13,1992(x15) # fffff7c8 <__stack_top+0xfffbf7c8>
    1aa0:	fd842603          	lw	x12,-40(x8)
    1aa4:	fdc42583          	lw	x11,-36(x8)
    1aa8:	00000513          	addi	x10,x0,0
    1aac:	af4ff0ef          	jal	x1,da0 <Input3>

        Complete_Handshaking(REQD_DATA_ACCEPTED);
    1ab0:	fe042503          	lw	x10,-32(x8)
    1ab4:	b60ff0ef          	jal	x1,e14 <Complete_Handshaking>
    for(int j = 0; j < 256; j++) {
    1ab8:	fe842783          	lw	x15,-24(x8)
    1abc:	00178793          	addi	x15,x15,1
    1ac0:	fef42423          	sw	x15,-24(x8)
    1ac4:	fe842703          	lw	x14,-24(x8)
    1ac8:	0ff00793          	addi	x15,x0,255
    1acc:	f8e7d2e3          	bge	x15,x14,1a50 <PreProcess+0x2c8>

    }

    return 1;
    1ad0:	00100793          	addi	x15,x0,1

}
    1ad4:	00078513          	addi	x10,x15,0
    1ad8:	06010113          	addi	x2,x2,96
    1adc:	7ec12083          	lw	x1,2028(x2)
    1ae0:	7e812403          	lw	x8,2024(x2)
    1ae4:	7f010113          	addi	x2,x2,2032
    1ae8:	00008067          	jalr	x0,0(x1)

00001aec <SimulateNFA_All_M0>:
        text_char - char array where Ith character is the text character to be sent to the Ith module. "\0" represents empty pattern (i.e) Ith module need not be used
    Returns :
        An integer which is a bitmask, where Ith place being 1 implies the text (entered till now) has matched the pattern in that module, 
                                                             0 implies either the module didn't process anything, or the text hasn't matched the pattern yet
*/
int SimulateNFA_All_M0(char text_chars[NO_MODULES]) {
    1aec:	fd010113          	addi	x2,x2,-48
    1af0:	02112623          	sw	x1,44(x2)
    1af4:	02812423          	sw	x8,40(x2)
    1af8:	03010413          	addi	x8,x2,48
    1afc:	fca42e23          	sw	x10,-36(x8)

    unsigned int TARGET_MODULES = 0;
    1b00:	fe042623          	sw	x0,-20(x8)

    for(int i = 0; i < NO_MODULES; i++) {
    1b04:	fe042423          	sw	x0,-24(x8)
    1b08:	0700006f          	jal	x0,1b78 <SimulateNFA_All_M0+0x8c>
        if(text_chars[i] != '\0') {
    1b0c:	fe842783          	lw	x15,-24(x8)
    1b10:	fdc42703          	lw	x14,-36(x8)
    1b14:	00f707b3          	add	x15,x14,x15
    1b18:	0007c783          	lbu	x15,0(x15)
    1b1c:	04078863          	beq	x15,x0,1b6c <SimulateNFA_All_M0+0x80>
            TARGET_MODULES |= (1<<i);
    1b20:	fe842783          	lw	x15,-24(x8)
    1b24:	00100713          	addi	x14,x0,1
    1b28:	00f717b3          	sll	x15,x14,x15
    1b2c:	00078713          	addi	x14,x15,0
    1b30:	fec42783          	lw	x15,-20(x8)
    1b34:	00e7e7b3          	or	x15,x15,x14
    1b38:	fef42623          	sw	x15,-20(x8)
            Input1_2((int)text_chars[i], 1);
    1b3c:	fe842783          	lw	x15,-24(x8)
    1b40:	fdc42703          	lw	x14,-36(x8)
    1b44:	00f707b3          	add	x15,x14,x15
    1b48:	0007c783          	lbu	x15,0(x15)
    1b4c:	00100593          	addi	x11,x0,1
    1b50:	00078513          	addi	x10,x15,0
    1b54:	994ff0ef          	jal	x1,ce8 <Input1_2>
            // opcode = 2 : Input for simulating NFA; address : dont care
            Input3(0, 2, 0, i);     // Mode = 0
    1b58:	fe842683          	lw	x13,-24(x8)
    1b5c:	00000613          	addi	x12,x0,0
    1b60:	00200593          	addi	x11,x0,2
    1b64:	00000513          	addi	x10,x0,0
    1b68:	a38ff0ef          	jal	x1,da0 <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    1b6c:	fe842783          	lw	x15,-24(x8)
    1b70:	00178793          	addi	x15,x15,1
    1b74:	fef42423          	sw	x15,-24(x8)
    1b78:	fe842703          	lw	x14,-24(x8)
    1b7c:	00300793          	addi	x15,x0,3
    1b80:	f8e7d6e3          	bge	x15,x14,1b0c <SimulateNFA_All_M0+0x20>
        }
    }

    unsigned int PATTERN_ACCEPTED_STATUS = Complete_Handshaking(TARGET_MODULES);
    1b84:	fec42503          	lw	x10,-20(x8)
    1b88:	a8cff0ef          	jal	x1,e14 <Complete_Handshaking>
    1b8c:	fea42223          	sw	x10,-28(x8)

    return PATTERN_ACCEPTED_STATUS;
    1b90:	fe442783          	lw	x15,-28(x8)

}
    1b94:	00078513          	addi	x10,x15,0
    1b98:	02c12083          	lw	x1,44(x2)
    1b9c:	02812403          	lw	x8,40(x2)
    1ba0:	03010113          	addi	x2,x2,48
    1ba4:	00008067          	jalr	x0,0(x1)

00001ba8 <SimulateNFA_All_M1>:
        text_char - text character to be sent to the target module. "\0" represents empty pattern (i.e) modules need not be used
    Returns :
        An integer which is a bitmask, where Ith place being 1 implies the text (entered till now) has matched the pattern in that module, 
                                                             0 implies either the module didn't process anything, or the text hasn't matched the pattern yet
*/
int SimulateNFA_All_M1(char text_char) {
    1ba8:	fd010113          	addi	x2,x2,-48
    1bac:	02112623          	sw	x1,44(x2)
    1bb0:	02812423          	sw	x8,40(x2)
    1bb4:	03010413          	addi	x8,x2,48
    1bb8:	00050793          	addi	x15,x10,0
    1bbc:	fcf40fa3          	sb	x15,-33(x8)

    if(text_char == '\0') return 0;
    1bc0:	fdf44783          	lbu	x15,-33(x8)
    1bc4:	00079663          	bne	x15,x0,1bd0 <SimulateNFA_All_M1+0x28>
    1bc8:	00000793          	addi	x15,x0,0
    1bcc:	0400006f          	jal	x0,1c0c <SimulateNFA_All_M1+0x64>

    unsigned int TARGET_MODULES = (1<<NO_MODULES)-1;
    1bd0:	00f00793          	addi	x15,x0,15
    1bd4:	fef42623          	sw	x15,-20(x8)

    Input1_2((int)text_char, 1);
    1bd8:	fdf44783          	lbu	x15,-33(x8)
    1bdc:	00100593          	addi	x11,x0,1
    1be0:	00078513          	addi	x10,x15,0
    1be4:	904ff0ef          	jal	x1,ce8 <Input1_2>
    // opcode = 2 : Input for simulating NFA; address, target module : dont care
    Input3(1, 2, 0, 0);    // Mode = 1
    1be8:	00000693          	addi	x13,x0,0
    1bec:	00000613          	addi	x12,x0,0
    1bf0:	00200593          	addi	x11,x0,2
    1bf4:	00100513          	addi	x10,x0,1
    1bf8:	9a8ff0ef          	jal	x1,da0 <Input3>

    unsigned int PATTERN_ACCEPTED_STATUS = Complete_Handshaking(TARGET_MODULES);
    1bfc:	fec42503          	lw	x10,-20(x8)
    1c00:	a14ff0ef          	jal	x1,e14 <Complete_Handshaking>
    1c04:	fea42423          	sw	x10,-24(x8)

    return PATTERN_ACCEPTED_STATUS;
    1c08:	fe842783          	lw	x15,-24(x8)

}
    1c0c:	00078513          	addi	x10,x15,0
    1c10:	02c12083          	lw	x1,44(x2)
    1c14:	02812403          	lw	x8,40(x2)
    1c18:	03010113          	addi	x2,x2,48
    1c1c:	00008067          	jalr	x0,0(x1)

00001c20 <SimulateNFA>:
        module - integer representing the module number to be targetted
    Returns :
        An integer - 1 implies the text (entered till now) has matched the pattern in the target module, 
                     0 implies either the module didn't process anything, or the text hasn't matched the pattern yet
*/
int SimulateNFA(char text_char, int module) {
    1c20:	fd010113          	addi	x2,x2,-48
    1c24:	02112623          	sw	x1,44(x2)
    1c28:	02812423          	sw	x8,40(x2)
    1c2c:	03010413          	addi	x8,x2,48
    1c30:	00050793          	addi	x15,x10,0
    1c34:	fcb42c23          	sw	x11,-40(x8)
    1c38:	fcf40fa3          	sb	x15,-33(x8)

    if(text_char == '\0') return 0;
    1c3c:	fdf44783          	lbu	x15,-33(x8)
    1c40:	00079663          	bne	x15,x0,1c4c <SimulateNFA+0x2c>
    1c44:	00000793          	addi	x15,x0,0
    1c48:	0580006f          	jal	x0,1ca0 <SimulateNFA+0x80>

    unsigned int TARGET_MODULE = (1<<module);
    1c4c:	fd842783          	lw	x15,-40(x8)
    1c50:	00100713          	addi	x14,x0,1
    1c54:	00f717b3          	sll	x15,x14,x15
    1c58:	fef42623          	sw	x15,-20(x8)

    Input1_2((int)text_char, 1);
    1c5c:	fdf44783          	lbu	x15,-33(x8)
    1c60:	00100593          	addi	x11,x0,1
    1c64:	00078513          	addi	x10,x15,0
    1c68:	880ff0ef          	jal	x1,ce8 <Input1_2>
    // opcode = 2 : Input for simulating NFA; address : dont care
    Input3(0, 2, 0, module);    // Mode = 0
    1c6c:	fd842683          	lw	x13,-40(x8)
    1c70:	00000613          	addi	x12,x0,0
    1c74:	00200593          	addi	x11,x0,2
    1c78:	00000513          	addi	x10,x0,0
    1c7c:	924ff0ef          	jal	x1,da0 <Input3>

    unsigned int PATTERN_ACCEPTED_STATUS = Complete_Handshaking(TARGET_MODULE);
    1c80:	fec42503          	lw	x10,-20(x8)
    1c84:	990ff0ef          	jal	x1,e14 <Complete_Handshaking>
    1c88:	fea42423          	sw	x10,-24(x8)

    return (PATTERN_ACCEPTED_STATUS & TARGET_MODULE) != 0;
    1c8c:	fe842703          	lw	x14,-24(x8)
    1c90:	fec42783          	lw	x15,-20(x8)
    1c94:	00f777b3          	and	x15,x14,x15
    1c98:	00f037b3          	sltu	x15,x0,x15
    1c9c:	0ff7f793          	andi	x15,x15,255

}
    1ca0:	00078513          	addi	x10,x15,0
    1ca4:	02c12083          	lw	x1,44(x2)
    1ca8:	02812403          	lw	x8,40(x2)
    1cac:	03010113          	addi	x2,x2,48
    1cb0:	00008067          	jalr	x0,0(x1)

00001cb4 <ResetNFA_All_M0>:
    Function to reset the state of NFA in required modules without doing it separately one after the other.
    (MODE 0)
    Arguments :
        bitmask - Ith position 1 represents Ith module has to be reset, 0 represents no change
*/
void ResetNFA_All_M0(unsigned int bitmask) {
    1cb4:	fd010113          	addi	x2,x2,-48
    1cb8:	02112623          	sw	x1,44(x2)
    1cbc:	02812423          	sw	x8,40(x2)
    1cc0:	03010413          	addi	x8,x2,48
    1cc4:	fca42e23          	sw	x10,-36(x8)

    for(int i = 0; i < NO_MODULES; i++) {
    1cc8:	fe042623          	sw	x0,-20(x8)
    1ccc:	0400006f          	jal	x0,1d0c <ResetNFA_All_M0+0x58>
        if(bitmask & (1<<i)) {
    1cd0:	fec42783          	lw	x15,-20(x8)
    1cd4:	00100713          	addi	x14,x0,1
    1cd8:	00f717b3          	sll	x15,x14,x15
    1cdc:	00078713          	addi	x14,x15,0
    1ce0:	fdc42783          	lw	x15,-36(x8)
    1ce4:	00f777b3          	and	x15,x14,x15
    1ce8:	00078c63          	beq	x15,x0,1d00 <ResetNFA_All_M0+0x4c>
            // opcode = 3 : Reset state instruction; address : dont care
            Input3(0, 3, 0, i);     // Mode = 0
    1cec:	fec42683          	lw	x13,-20(x8)
    1cf0:	00000613          	addi	x12,x0,0
    1cf4:	00300593          	addi	x11,x0,3
    1cf8:	00000513          	addi	x10,x0,0
    1cfc:	8a4ff0ef          	jal	x1,da0 <Input3>
    for(int i = 0; i < NO_MODULES; i++) {
    1d00:	fec42783          	lw	x15,-20(x8)
    1d04:	00178793          	addi	x15,x15,1
    1d08:	fef42623          	sw	x15,-20(x8)
    1d0c:	fec42703          	lw	x14,-20(x8)
    1d10:	00300793          	addi	x15,x0,3
    1d14:	fae7dee3          	bge	x15,x14,1cd0 <ResetNFA_All_M0+0x1c>
        }
    }

    Complete_Handshaking(bitmask);
    1d18:	fdc42503          	lw	x10,-36(x8)
    1d1c:	8f8ff0ef          	jal	x1,e14 <Complete_Handshaking>

}
    1d20:	00000013          	addi	x0,x0,0
    1d24:	02c12083          	lw	x1,44(x2)
    1d28:	02812403          	lw	x8,40(x2)
    1d2c:	03010113          	addi	x2,x2,48
    1d30:	00008067          	jalr	x0,0(x1)

00001d34 <ResetNFA_All_M1>:
    Function to reset the state of NFA in all modules parallely.
    (MODE 1)
    Arguments :
        module - MODULE_ID of target module where state has to be reset
*/
void ResetNFA_All_M1() {
    1d34:	ff010113          	addi	x2,x2,-16
    1d38:	00112623          	sw	x1,12(x2)
    1d3c:	00812423          	sw	x8,8(x2)
    1d40:	01010413          	addi	x8,x2,16

    // opcode = 3 : Reset state instruction; address : dont care
    Input3(1, 3, 0, 0);       // Mode = 1, target module : dont care
    1d44:	00000693          	addi	x13,x0,0
    1d48:	00000613          	addi	x12,x0,0
    1d4c:	00300593          	addi	x11,x0,3
    1d50:	00100513          	addi	x10,x0,1
    1d54:	84cff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking((1<<NO_MODULES)-1);
    1d58:	00f00513          	addi	x10,x0,15
    1d5c:	8b8ff0ef          	jal	x1,e14 <Complete_Handshaking>

}
    1d60:	00000013          	addi	x0,x0,0
    1d64:	00c12083          	lw	x1,12(x2)
    1d68:	00812403          	lw	x8,8(x2)
    1d6c:	01010113          	addi	x2,x2,16
    1d70:	00008067          	jalr	x0,0(x1)

00001d74 <ResetNFA>:
/*
    Function to reset the state of NFA in target module.
    Arguments :
        module - MODULE_ID of target module where state has to be reset
*/
void ResetNFA(int module) {
    1d74:	fe010113          	addi	x2,x2,-32
    1d78:	00112e23          	sw	x1,28(x2)
    1d7c:	00812c23          	sw	x8,24(x2)
    1d80:	02010413          	addi	x8,x2,32
    1d84:	fea42623          	sw	x10,-20(x8)

    // opcode = 3 : Reset state instruction; address : dont care
    Input3(0, 3, 0, module);    // Mode = 0
    1d88:	fec42683          	lw	x13,-20(x8)
    1d8c:	00000613          	addi	x12,x0,0
    1d90:	00300593          	addi	x11,x0,3
    1d94:	00000513          	addi	x10,x0,0
    1d98:	808ff0ef          	jal	x1,da0 <Input3>

    Complete_Handshaking((1<<module));
    1d9c:	fec42783          	lw	x15,-20(x8)
    1da0:	00100713          	addi	x14,x0,1
    1da4:	00f717b3          	sll	x15,x14,x15
    1da8:	00078513          	addi	x10,x15,0
    1dac:	868ff0ef          	jal	x1,e14 <Complete_Handshaking>

}
    1db0:	00000013          	addi	x0,x0,0
    1db4:	01c12083          	lw	x1,28(x2)
    1db8:	01812403          	lw	x8,24(x2)
    1dbc:	02010113          	addi	x2,x2,32
    1dc0:	00008067          	jalr	x0,0(x1)

00001dc4 <_outbyte>:
// change later if needed
#define OUTPERIPH_BASE 0x800000
#define OUTPERIPH_WRITE_OFFSET 0x00
#define OUTPERIPH_READSTATUS_OFFSET 0x04
void _outbyte(int c)
{
    1dc4:	fd010113          	addi	x2,x2,-48
    1dc8:	02812623          	sw	x8,44(x2)
    1dcc:	03010413          	addi	x8,x2,48
    1dd0:	fca42e23          	sw	x10,-36(x8)
        // Fill in the code here
        // What you need is to write to the address of the peripheral (as defined in th BIU)
        // Example code here:
        int *p;  // Pointer to integer
        p = (int *)(OUTPERIPH_BASE + OUTPERIPH_WRITE_OFFSET); // Set pointer value directly
    1dd4:	008007b7          	lui	x15,0x800
    1dd8:	fef42623          	sw	x15,-20(x8)
        (*p) = c; // Write the value to the address
    1ddc:	fec42783          	lw	x15,-20(x8)
    1de0:	fdc42703          	lw	x14,-36(x8)
    1de4:	00e7a023          	sw	x14,0(x15) # 800000 <__stack_top+0x7c0000>
}
    1de8:	00000013          	addi	x0,x0,0
    1dec:	02c12403          	lw	x8,44(x2)
    1df0:	03010113          	addi	x2,x2,48
    1df4:	00008067          	jalr	x0,0(x1)

00001df8 <outbyte>:

void outbyte(int c)
{
    1df8:	fe010113          	addi	x2,x2,-32
    1dfc:	00112e23          	sw	x1,28(x2)
    1e00:	00812c23          	sw	x8,24(x2)
    1e04:	02010413          	addi	x8,x2,32
    1e08:	fea42623          	sw	x10,-20(x8)
        static char prev = 0;
        if (c < ' ' && c != '\r' && c != '\n' && c != '\t' && c != '\b')
    1e0c:	fec42703          	lw	x14,-20(x8)
    1e10:	01f00793          	addi	x15,x0,31
    1e14:	02e7ca63          	blt	x15,x14,1e48 <outbyte+0x50>
    1e18:	fec42703          	lw	x14,-20(x8)
    1e1c:	00d00793          	addi	x15,x0,13
    1e20:	02f70463          	beq	x14,x15,1e48 <outbyte+0x50>
    1e24:	fec42703          	lw	x14,-20(x8)
    1e28:	00a00793          	addi	x15,x0,10
    1e2c:	00f70e63          	beq	x14,x15,1e48 <outbyte+0x50>
    1e30:	fec42703          	lw	x14,-20(x8)
    1e34:	00900793          	addi	x15,x0,9
    1e38:	00f70863          	beq	x14,x15,1e48 <outbyte+0x50>
    1e3c:	fec42703          	lw	x14,-20(x8)
    1e40:	00800793          	addi	x15,x0,8
    1e44:	02f71e63          	bne	x14,x15,1e80 <outbyte+0x88>
                return;
        if (c == '\n' && prev != '\r') _outbyte('\r');
    1e48:	fec42703          	lw	x14,-20(x8)
    1e4c:	00a00793          	addi	x15,x0,10
    1e50:	00f71c63          	bne	x14,x15,1e68 <outbyte+0x70>
    1e54:	8141c703          	lbu	x14,-2028(x3) # 26e8 <prev.2>
    1e58:	00d00793          	addi	x15,x0,13
    1e5c:	00f70663          	beq	x14,x15,1e68 <outbyte+0x70>
    1e60:	00d00513          	addi	x10,x0,13
    1e64:	f61ff0ef          	jal	x1,1dc4 <_outbyte>
        _outbyte(c);
    1e68:	fec42503          	lw	x10,-20(x8)
    1e6c:	f59ff0ef          	jal	x1,1dc4 <_outbyte>
        prev = c;
    1e70:	fec42783          	lw	x15,-20(x8)
    1e74:	0ff7f713          	andi	x14,x15,255
    1e78:	80e18a23          	sb	x14,-2028(x3) # 26e8 <prev.2>
    1e7c:	0080006f          	jal	x0,1e84 <outbyte+0x8c>
                return;
    1e80:	00000013          	addi	x0,x0,0
}
    1e84:	01c12083          	lw	x1,28(x2)
    1e88:	01812403          	lw	x8,24(x2)
    1e8c:	02010113          	addi	x2,x2,32
    1e90:	00008067          	jalr	x0,0(x1)

00001e94 <readstatus>:
// The following function should read back the number of bytes that 
// have gone through the peripheral since system startup.  Again, the
// address of the status readout register is your choice, and can be
// hardcoded here or declared as a #define
int readstatus() 
{
    1e94:	fe010113          	addi	x2,x2,-32
    1e98:	00812e23          	sw	x8,28(x2)
    1e9c:	02010413          	addi	x8,x2,32
        // Fill in code here
        // Note how the _outbyte function was written, and adapt it to read back the status register
		int *p;  // Pointer to integer
        p = (int *)(OUTPERIPH_BASE + OUTPERIPH_READSTATUS_OFFSET); // Read value in location pointed by pointer to get no of bytes written
    1ea0:	008007b7          	lui	x15,0x800
    1ea4:	00478793          	addi	x15,x15,4 # 800004 <__stack_top+0x7c0004>
    1ea8:	fef42623          	sw	x15,-20(x8)
        return (*p);
    1eac:	fec42783          	lw	x15,-20(x8)
    1eb0:	0007a783          	lw	x15,0(x15)
}
    1eb4:	00078513          	addi	x10,x15,0
    1eb8:	01c12403          	lw	x8,28(x2)
    1ebc:	02010113          	addi	x2,x2,32
    1ec0:	00008067          	jalr	x0,0(x1)

00001ec4 <mydiv>:
// These funcs have not been checked - they may fail for large
// or negative values.
// We could also have had a single function computing both, but would
// need pointers or assembly to return two values.
static int mydiv(int u, int b)
{
    1ec4:	fe010113          	addi	x2,x2,-32
    1ec8:	00812e23          	sw	x8,28(x2)
    1ecc:	00912c23          	sw	x9,24(x2)
    1ed0:	01212a23          	sw	x18,20(x2)
    1ed4:	02010413          	addi	x8,x2,32
    1ed8:	fea42623          	sw	x10,-20(x8)
    1edc:	feb42423          	sw	x11,-24(x8)
	register unsigned int q = 0;
    1ee0:	00000913          	addi	x18,x0,0
	register unsigned int m = u;
    1ee4:	fec42483          	lw	x9,-20(x8)
	while (m >= b) {
    1ee8:	0100006f          	jal	x0,1ef8 <mydiv+0x34>
		m -= b;
    1eec:	fe842783          	lw	x15,-24(x8)
    1ef0:	40f484b3          	sub	x9,x9,x15
		q++;
    1ef4:	00190913          	addi	x18,x18,1
	while (m >= b) {
    1ef8:	fe842783          	lw	x15,-24(x8)
    1efc:	fef4f8e3          	bgeu	x9,x15,1eec <mydiv+0x28>
	}
	return q;
    1f00:	00090793          	addi	x15,x18,0
}
    1f04:	00078513          	addi	x10,x15,0
    1f08:	01c12403          	lw	x8,28(x2)
    1f0c:	01812483          	lw	x9,24(x2)
    1f10:	01412903          	lw	x18,20(x2)
    1f14:	02010113          	addi	x2,x2,32
    1f18:	00008067          	jalr	x0,0(x1)

00001f1c <mymod>:

static int mymod(int u, int b)
{
    1f1c:	fe010113          	addi	x2,x2,-32
    1f20:	00812e23          	sw	x8,28(x2)
    1f24:	00912c23          	sw	x9,24(x2)
    1f28:	02010413          	addi	x8,x2,32
    1f2c:	fea42623          	sw	x10,-20(x8)
    1f30:	feb42423          	sw	x11,-24(x8)
	register unsigned int m = u;
    1f34:	fec42483          	lw	x9,-20(x8)
	while (m >= b) m -= b;
    1f38:	00c0006f          	jal	x0,1f44 <mymod+0x28>
    1f3c:	fe842783          	lw	x15,-24(x8)
    1f40:	40f484b3          	sub	x9,x9,x15
    1f44:	fe842783          	lw	x15,-24(x8)
    1f48:	fef4fae3          	bgeu	x9,x15,1f3c <mymod+0x20>
	return m;
    1f4c:	00048793          	addi	x15,x9,0
}
    1f50:	00078513          	addi	x10,x15,0
    1f54:	01c12403          	lw	x8,28(x2)
    1f58:	01812483          	lw	x9,24(x2)
    1f5c:	02010113          	addi	x2,x2,32
    1f60:	00008067          	jalr	x0,0(x1)

00001f64 <convert>:

char *convert(unsigned int num, int base) 
{ 
    1f64:	fd010113          	addi	x2,x2,-48
    1f68:	02112623          	sw	x1,44(x2)
    1f6c:	02812423          	sw	x8,40(x2)
    1f70:	03010413          	addi	x8,x2,48
    1f74:	fca42e23          	sw	x10,-36(x8)
    1f78:	fcb42c23          	sw	x11,-40(x8)
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
    1f7c:	84918793          	addi	x15,x3,-1975 # 271d <buffer.1+0x31>
    1f80:	fef42623          	sw	x15,-20(x8)
	*ptr = '\0'; 
    1f84:	fec42783          	lw	x15,-20(x8)
    1f88:	00078023          	sb	x0,0(x15)
	
	do 
	{ 
                int x = mymod(num, base);
    1f8c:	fdc42783          	lw	x15,-36(x8)
    1f90:	fd842583          	lw	x11,-40(x8)
    1f94:	00078513          	addi	x10,x15,0
    1f98:	f85ff0ef          	jal	x1,1f1c <mymod>
    1f9c:	fea42423          	sw	x10,-24(x8)
		*--ptr = Representation[x]; 
    1fa0:	fec42783          	lw	x15,-20(x8)
    1fa4:	fff78793          	addi	x15,x15,-1
    1fa8:	fef42623          	sw	x15,-20(x8)
    1fac:	000027b7          	lui	x15,0x2
    1fb0:	6d478713          	addi	x14,x15,1748 # 26d4 <Representation.0>
    1fb4:	fe842783          	lw	x15,-24(x8)
    1fb8:	00f707b3          	add	x15,x14,x15
    1fbc:	0007c703          	lbu	x14,0(x15)
    1fc0:	fec42783          	lw	x15,-20(x8)
    1fc4:	00e78023          	sb	x14,0(x15)
		num = mydiv(num, base); 
    1fc8:	fdc42783          	lw	x15,-36(x8)
    1fcc:	fd842583          	lw	x11,-40(x8)
    1fd0:	00078513          	addi	x10,x15,0
    1fd4:	ef1ff0ef          	jal	x1,1ec4 <mydiv>
    1fd8:	00050793          	addi	x15,x10,0
    1fdc:	fcf42e23          	sw	x15,-36(x8)
	}while(num != 0); 
    1fe0:	fdc42783          	lw	x15,-36(x8)
    1fe4:	fa0794e3          	bne	x15,x0,1f8c <convert+0x28>
	
	return(ptr); 
    1fe8:	fec42783          	lw	x15,-20(x8)
}
    1fec:	00078513          	addi	x10,x15,0
    1ff0:	02c12083          	lw	x1,44(x2)
    1ff4:	02812403          	lw	x8,40(x2)
    1ff8:	03010113          	addi	x2,x2,48
    1ffc:	00008067          	jalr	x0,0(x1)

00002000 <myputs>:

// void myputs(const char *a, int len)
void myputs(const char *a)
{
    2000:	fe010113          	addi	x2,x2,-32
    2004:	00112e23          	sw	x1,28(x2)
    2008:	00812c23          	sw	x8,24(x2)
    200c:	00912a23          	sw	x9,20(x2)
    2010:	02010413          	addi	x8,x2,32
    2014:	fea42623          	sw	x10,-20(x8)
        register char* p;
	for(p=(char *)a; (*p)!=0; p++) {
    2018:	fec42483          	lw	x9,-20(x8)
    201c:	0140006f          	jal	x0,2030 <myputs+0x30>
		outbyte(*p);
    2020:	0004c783          	lbu	x15,0(x9)
    2024:	00078513          	addi	x10,x15,0
    2028:	dd1ff0ef          	jal	x1,1df8 <outbyte>
	for(p=(char *)a; (*p)!=0; p++) {
    202c:	00148493          	addi	x9,x9,1
    2030:	0004c783          	lbu	x15,0(x9)
    2034:	fe0796e3          	bne	x15,x0,2020 <myputs+0x20>
	}
}
    2038:	00000013          	addi	x0,x0,0
    203c:	00000013          	addi	x0,x0,0
    2040:	01c12083          	lw	x1,28(x2)
    2044:	01812403          	lw	x8,24(x2)
    2048:	01412483          	lw	x9,20(x2)
    204c:	02010113          	addi	x2,x2,32
    2050:	00008067          	jalr	x0,0(x1)

00002054 <main>:
#include "./Pattern_Matching/PM_Utility.c"
#include "./STDOUT/outbyte.c"

int main() {
    2054:	fc010113          	addi	x2,x2,-64
    2058:	02112e23          	sw	x1,60(x2)
    205c:	02812c23          	sw	x8,56(x2)
    2060:	04010413          	addi	x8,x2,64

    char* patterns[4] = {"abc+","[abc]{0,3}d[e,f]?","\0","[a-zA-Z][0-9]hello"};
    2064:	000027b7          	lui	x15,0x2
    2068:	69878793          	addi	x15,x15,1688 # 2698 <main+0x644>
    206c:	0007a603          	lw	x12,0(x15)
    2070:	0047a683          	lw	x13,4(x15)
    2074:	0087a703          	lw	x14,8(x15)
    2078:	00c7a783          	lw	x15,12(x15)
    207c:	fcc42623          	sw	x12,-52(x8)
    2080:	fcd42823          	sw	x13,-48(x8)
    2084:	fce42a23          	sw	x14,-44(x8)
    2088:	fcf42c23          	sw	x15,-40(x8)
    char* pattern2 = "ab?[cd]*";
    208c:	000027b7          	lui	x15,0x2
    2090:	55478793          	addi	x15,x15,1364 # 2554 <main+0x500>
    2094:	fef42223          	sw	x15,-28(x8)

    PreProcessAll_M0(patterns);
    2098:	fcc40793          	addi	x15,x8,-52
    209c:	00078513          	addi	x10,x15,0
    20a0:	e45fe0ef          	jal	x1,ee4 <PreProcessAll_M0>
    PreProcess(pattern2, 2);
    20a4:	00200593          	addi	x11,x0,2
    20a8:	fe442503          	lw	x10,-28(x8)
    20ac:	edcff0ef          	jal	x1,1788 <PreProcess>

    // Pattern Matching in a single module
    myputs("SINGLE TEXT - SINGLE COMPLEX PATTERN MATCHING\n\n");
    20b0:	000027b7          	lui	x15,0x2
    20b4:	56078513          	addi	x10,x15,1376 # 2560 <main+0x50c>
    20b8:	f49ff0ef          	jal	x1,2000 <myputs>
    int pattern_status = SimulateNFA('a', 2);
    20bc:	00200593          	addi	x11,x0,2
    20c0:	06100513          	addi	x10,x0,97
    20c4:	b5dff0ef          	jal	x1,1c20 <SimulateNFA>
    20c8:	fea42023          	sw	x10,-32(x8)
    if(pattern_status) {
    20cc:	fe042783          	lw	x15,-32(x8)
    20d0:	06078063          	beq	x15,x0,2130 <main+0xdc>
        myputs("Text : \n");
    20d4:	000027b7          	lui	x15,0x2
    20d8:	59078513          	addi	x10,x15,1424 # 2590 <main+0x53c>
    20dc:	f25ff0ef          	jal	x1,2000 <myputs>
        myputs("a");
    20e0:	000027b7          	lui	x15,0x2
    20e4:	59c78513          	addi	x10,x15,1436 # 259c <main+0x548>
    20e8:	f19ff0ef          	jal	x1,2000 <myputs>
        myputs("\n--- Matched Pattern : \n");
    20ec:	000027b7          	lui	x15,0x2
    20f0:	5a078513          	addi	x10,x15,1440 # 25a0 <main+0x54c>
    20f4:	f0dff0ef          	jal	x1,2000 <myputs>
        myputs(pattern2);
    20f8:	fe442503          	lw	x10,-28(x8)
    20fc:	f05ff0ef          	jal	x1,2000 <myputs>
        myputs("\n@ ");
    2100:	000027b7          	lui	x15,0x2
    2104:	5bc78513          	addi	x10,x15,1468 # 25bc <main+0x568>
    2108:	ef9ff0ef          	jal	x1,2000 <myputs>
        myputs(convert(1, 10));
    210c:	00a00593          	addi	x11,x0,10
    2110:	00100513          	addi	x10,x0,1
    2114:	e51ff0ef          	jal	x1,1f64 <convert>
    2118:	00050793          	addi	x15,x10,0
    211c:	00078513          	addi	x10,x15,0
    2120:	ee1ff0ef          	jal	x1,2000 <myputs>
        myputs("st character\n\n");
    2124:	000027b7          	lui	x15,0x2
    2128:	5c078513          	addi	x10,x15,1472 # 25c0 <main+0x56c>
    212c:	ed5ff0ef          	jal	x1,2000 <myputs>
    }

    myputs("--------------------------------------------------\n");
    2130:	000027b7          	lui	x15,0x2
    2134:	5d078513          	addi	x10,x15,1488 # 25d0 <main+0x57c>
    2138:	ec9ff0ef          	jal	x1,2000 <myputs>
    
    // Single text - parallel pattern matching
    // We use the same patterns in the 4 modules as setup earlier, but now try to simulate all NFAs with single text
    char *new_text = "abcdefghijklmnopqrtuvwxyz";
    213c:	000027b7          	lui	x15,0x2
    2140:	60478793          	addi	x15,x15,1540 # 2604 <main+0x5b0>
    2144:	fcf42e23          	sw	x15,-36(x8)
    myputs("SINGLE TEXT - MULTIPLE COMPLEX PATTERNS MATCHING\n\n");
    2148:	000027b7          	lui	x15,0x2
    214c:	62078513          	addi	x10,x15,1568 # 2620 <main+0x5cc>
    2150:	eb1ff0ef          	jal	x1,2000 <myputs>
    myputs("Text : \n");
    2154:	000027b7          	lui	x15,0x2
    2158:	59078513          	addi	x10,x15,1424 # 2590 <main+0x53c>
    215c:	ea5ff0ef          	jal	x1,2000 <myputs>
    myputs(new_text);
    2160:	fdc42503          	lw	x10,-36(x8)
    2164:	e9dff0ef          	jal	x1,2000 <myputs>
    for(int i = 0; new_text[i]; i++) {
    2168:	fe042623          	sw	x0,-20(x8)
    216c:	1640006f          	jal	x0,22d0 <main+0x27c>
        pattern_status = SimulateNFA_All_M1(new_text[i]);
    2170:	fec42783          	lw	x15,-20(x8)
    2174:	fdc42703          	lw	x14,-36(x8)
    2178:	00f707b3          	add	x15,x14,x15
    217c:	0007c783          	lbu	x15,0(x15)
    2180:	00078513          	addi	x10,x15,0
    2184:	a25ff0ef          	jal	x1,1ba8 <SimulateNFA_All_M1>
    2188:	fea42023          	sw	x10,-32(x8)
        if(pattern_status)  {
    218c:	fe042783          	lw	x15,-32(x8)
    2190:	12078a63          	beq	x15,x0,22c4 <main+0x270>
            myputs("\n--- Matched Pattern(s) : \n");
    2194:	000027b7          	lui	x15,0x2
    2198:	65478513          	addi	x10,x15,1620 # 2654 <main+0x600>
    219c:	e65ff0ef          	jal	x1,2000 <myputs>
            for(int j = 0; j < 4; j++) {
    21a0:	fe042423          	sw	x0,-24(x8)
    21a4:	0700006f          	jal	x0,2214 <main+0x1c0>
                if(pattern_status & (1<<j)) {
    21a8:	fe842783          	lw	x15,-24(x8)
    21ac:	fe042703          	lw	x14,-32(x8)
    21b0:	40f757b3          	sra	x15,x14,x15
    21b4:	0017f793          	andi	x15,x15,1
    21b8:	04078863          	beq	x15,x0,2208 <main+0x1b4>
                    if(j == 2) {myputs(pattern2); myputs("\n");}
    21bc:	fe842703          	lw	x14,-24(x8)
    21c0:	00200793          	addi	x15,x0,2
    21c4:	00f71e63          	bne	x14,x15,21e0 <main+0x18c>
    21c8:	fe442503          	lw	x10,-28(x8)
    21cc:	e35ff0ef          	jal	x1,2000 <myputs>
    21d0:	000027b7          	lui	x15,0x2
    21d4:	67078513          	addi	x10,x15,1648 # 2670 <main+0x61c>
    21d8:	e29ff0ef          	jal	x1,2000 <myputs>
    21dc:	02c0006f          	jal	x0,2208 <main+0x1b4>
                    else {myputs(patterns[j]); myputs("\n");}
    21e0:	fe842783          	lw	x15,-24(x8)
    21e4:	00279793          	slli	x15,x15,0x2
    21e8:	ff040713          	addi	x14,x8,-16
    21ec:	00f707b3          	add	x15,x14,x15
    21f0:	fdc7a783          	lw	x15,-36(x15)
    21f4:	00078513          	addi	x10,x15,0
    21f8:	e09ff0ef          	jal	x1,2000 <myputs>
    21fc:	000027b7          	lui	x15,0x2
    2200:	67078513          	addi	x10,x15,1648 # 2670 <main+0x61c>
    2204:	dfdff0ef          	jal	x1,2000 <myputs>
            for(int j = 0; j < 4; j++) {
    2208:	fe842783          	lw	x15,-24(x8)
    220c:	00178793          	addi	x15,x15,1
    2210:	fef42423          	sw	x15,-24(x8)
    2214:	fe842703          	lw	x14,-24(x8)
    2218:	00300793          	addi	x15,x0,3
    221c:	f8e7d6e3          	bge	x15,x14,21a8 <main+0x154>
                }
            }
            myputs("@ ");
    2220:	000027b7          	lui	x15,0x2
    2224:	67478513          	addi	x10,x15,1652 # 2674 <main+0x620>
    2228:	dd9ff0ef          	jal	x1,2000 <myputs>
            myputs(convert(i+1, 10));
    222c:	fec42783          	lw	x15,-20(x8)
    2230:	00178793          	addi	x15,x15,1
    2234:	00a00593          	addi	x11,x0,10
    2238:	00078513          	addi	x10,x15,0
    223c:	d29ff0ef          	jal	x1,1f64 <convert>
    2240:	00050793          	addi	x15,x10,0
    2244:	00078513          	addi	x10,x15,0
    2248:	db9ff0ef          	jal	x1,2000 <myputs>
            switch(i+1) {
    224c:	fec42783          	lw	x15,-20(x8)
    2250:	00178793          	addi	x15,x15,1
    2254:	00300713          	addi	x14,x0,3
    2258:	04e78063          	beq	x15,x14,2298 <main+0x244>
    225c:	00300713          	addi	x14,x0,3
    2260:	04f74463          	blt	x14,x15,22a8 <main+0x254>
    2264:	00100713          	addi	x14,x0,1
    2268:	00e78863          	beq	x15,x14,2278 <main+0x224>
    226c:	00200713          	addi	x14,x0,2
    2270:	00e78c63          	beq	x15,x14,2288 <main+0x234>
    2274:	0340006f          	jal	x0,22a8 <main+0x254>
                case 1 : 
                    myputs("st");
    2278:	000027b7          	lui	x15,0x2
    227c:	67878513          	addi	x10,x15,1656 # 2678 <main+0x624>
    2280:	d81ff0ef          	jal	x1,2000 <myputs>
                break;
    2284:	0340006f          	jal	x0,22b8 <main+0x264>
                case 2 :
                    myputs("nd");
    2288:	000027b7          	lui	x15,0x2
    228c:	67c78513          	addi	x10,x15,1660 # 267c <main+0x628>
    2290:	d71ff0ef          	jal	x1,2000 <myputs>
                break;
    2294:	0240006f          	jal	x0,22b8 <main+0x264>
                case 3 :
                    myputs("rd");
    2298:	000027b7          	lui	x15,0x2
    229c:	68078513          	addi	x10,x15,1664 # 2680 <main+0x62c>
    22a0:	d61ff0ef          	jal	x1,2000 <myputs>
                break;
    22a4:	0140006f          	jal	x0,22b8 <main+0x264>
                default :
                    myputs("th");
    22a8:	000027b7          	lui	x15,0x2
    22ac:	68478513          	addi	x10,x15,1668 # 2684 <main+0x630>
    22b0:	d51ff0ef          	jal	x1,2000 <myputs>
                break;
    22b4:	00000013          	addi	x0,x0,0
            }
            myputs(" character\n\n");
    22b8:	000027b7          	lui	x15,0x2
    22bc:	68878513          	addi	x10,x15,1672 # 2688 <main+0x634>
    22c0:	d41ff0ef          	jal	x1,2000 <myputs>
    for(int i = 0; new_text[i]; i++) {
    22c4:	fec42783          	lw	x15,-20(x8)
    22c8:	00178793          	addi	x15,x15,1
    22cc:	fef42623          	sw	x15,-20(x8)
    22d0:	fec42783          	lw	x15,-20(x8)
    22d4:	fdc42703          	lw	x14,-36(x8)
    22d8:	00f707b3          	add	x15,x14,x15
    22dc:	0007c783          	lbu	x15,0(x15)
    22e0:	e80798e3          	bne	x15,x0,2170 <main+0x11c>
        }
    }


    // Infinite loop to avoid repitition of program
    for(;;);
    22e4:	0000006f          	jal	x0,22e4 <main+0x290>
